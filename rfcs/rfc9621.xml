<?xml version='1.0' encoding='utf-8'?>
<rfc xmlns:xi="http://www.w3.org/2001/XInclude" version="3" ipr="trust200902" docName="draft-ietf-taps-arch-19" number="9621" updates="" obsoletes="" submissionType="IETF" category="std" consensus="true" tocInclude="true" sortRefs="true" symRefs="true" xml:lang="en" prepTime="2025-01-22T14:52:20" indexInclude="true" scripts="Common,Latin" tocDepth="3">
  <link href="https://datatracker.ietf.org/doc/draft-ietf-taps-arch-19" rel="prev"/>
  <link href="https://dx.doi.org/10.17487/rfc9621" rel="alternate"/>
  <link href="urn:issn:2070-1721" rel="alternate"/>
  <front>
    <title abbrev="Transport Services Architecture">Architecture and Requirements for Transport Services</title>
    <seriesInfo name="RFC" value="9621" stream="IETF"/>
    <author initials="T." surname="Pauly" fullname="Tommy Pauly" role="editor">
      <organization showOnFrontPage="true">Apple Inc.</organization>
      <address>
        <postal>
          <street>One Apple Park Way</street>
          <city>Cupertino</city>
          <region>CA</region>
          <code>95014</code>
          <country>United States of America</country>
        </postal>
        <email>tpauly@apple.com</email>
      </address>
    </author>
    <author initials="B." surname="Trammell" fullname="Brian Trammell" role="editor">
      <organization showOnFrontPage="true">Google Switzerland GmbH</organization>
      <address>
        <postal>
          <street>Gustav-Gull-Platz 1</street>
          <city>Zurich</city>
          <code>8004</code>
          <country>Switzerland</country>
        </postal>
        <email>ietf@trammell.ch</email>
      </address>
    </author>
    <author initials="A." surname="Brunstrom" fullname="Anna Brunstrom">
      <organization showOnFrontPage="true">Karlstad University</organization>
      <address>
        <postal>
          <street>Universitetsgatan 2</street>
          <city>651 88 Karlstad</city>
          <country>Sweden</country>
        </postal>
        <email>anna.brunstrom@kau.se</email>
      </address>
    </author>
    <author initials="G." surname="Fairhurst" fullname="Godred Fairhurst">
      <organization showOnFrontPage="true">University of Aberdeen</organization>
      <address>
        <postal>
          <street>Fraser Noble Building</street>
          <city>Aberdeen, AB24 3UE</city>
          <country>United Kingdom</country>
        </postal>
        <email>gorry@erg.abdn.ac.uk</email>
        <uri>https://erg.abdn.ac.uk/</uri>
      </address>
    </author>
    <author initials="C. S." surname="Perkins" fullname="Colin S. Perkins">
      <organization showOnFrontPage="true">University of Glasgow</organization>
      <address>
        <postal>
          <street>School of Computing Science</street>
          <city>Glasgow  G12 8QQ</city>
          <country>United Kingdom</country>
        </postal>
        <email>csp@csperkins.org</email>
      </address>
    </author>
    <date month="01" year="2025"/>
    <area>WIT</area>
    <workgroup>taps</workgroup>
    <abstract pn="section-abstract">
      <t indent="0" pn="section-abstract-1">This document describes an architecture that exposes transport protocol features to applications for network communication. The Transport Services Application Programming Interface (API) is based on an asynchronous, event-driven interaction pattern. This API uses Messages for representing data transfer to applications and describes how a Transport Services Implementation can use multiple IP addresses, multiple protocols, and multiple paths and can provide multiple application streams. This document provides the architecture and requirements. It defines common terminology and concepts to be used in definitions of a Transport Services API and a Transport Services Implementation.</t>
    </abstract>
    <boilerplate>
      <section anchor="status-of-memo" numbered="false" removeInRFC="false" toc="exclude" pn="section-boilerplate.1">
        <name slugifiedName="name-status-of-this-memo">Status of This Memo</name>
        <t indent="0" pn="section-boilerplate.1-1">
            This is an Internet Standards Track document.
        </t>
        <t indent="0" pn="section-boilerplate.1-2">
            This document is a product of the Internet Engineering Task Force
            (IETF).  It represents the consensus of the IETF community.  It has
            received public review and has been approved for publication by
            the Internet Engineering Steering Group (IESG).  Further
            information on Internet Standards is available in Section 2 of 
            RFC 7841.
        </t>
        <t indent="0" pn="section-boilerplate.1-3">
            Information about the current status of this document, any
            errata, and how to provide feedback on it may be obtained at
            <eref target="https://www.rfc-editor.org/info/rfc9621" brackets="none"/>.
        </t>
      </section>
      <section anchor="copyright" numbered="false" removeInRFC="false" toc="exclude" pn="section-boilerplate.2">
        <name slugifiedName="name-copyright-notice">Copyright Notice</name>
        <t indent="0" pn="section-boilerplate.2-1">
            Copyright (c) 2025 IETF Trust and the persons identified as the
            document authors. All rights reserved.
        </t>
        <t indent="0" pn="section-boilerplate.2-2">
            This document is subject to BCP 78 and the IETF Trust's Legal
            Provisions Relating to IETF Documents
            (<eref target="https://trustee.ietf.org/license-info" brackets="none"/>) in effect on the date of
            publication of this document. Please review these documents
            carefully, as they describe your rights and restrictions with
            respect to this document. Code Components extracted from this
            document must include Revised BSD License text as described in
            Section 4.e of the Trust Legal Provisions and are provided without
            warranty as described in the Revised BSD License.
        </t>
      </section>
    </boilerplate>
    <toc>
      <section anchor="toc" numbered="false" removeInRFC="false" toc="exclude" pn="section-toc.1">
        <name slugifiedName="name-table-of-contents">Table of Contents</name>
        <ul bare="true" empty="true" indent="2" spacing="compact" pn="section-toc.1-1">
          <li pn="section-toc.1-1.1">
            <t indent="0" pn="section-toc.1-1.1.1"><xref derivedContent="1" format="counter" sectionFormat="of" target="section-1"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-introduction">Introduction</xref></t>
            <ul bare="true" empty="true" indent="2" spacing="compact" pn="section-toc.1-1.1.2">
              <li pn="section-toc.1-1.1.2.1">
                <t indent="0" keepWithNext="true" pn="section-toc.1-1.1.2.1.1"><xref derivedContent="1.1" format="counter" sectionFormat="of" target="section-1.1"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-background">Background</xref></t>
              </li>
              <li pn="section-toc.1-1.1.2.2">
                <t indent="0" keepWithNext="true" pn="section-toc.1-1.1.2.2.1"><xref derivedContent="1.2" format="counter" sectionFormat="of" target="section-1.2"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-overview">Overview</xref></t>
              </li>
              <li pn="section-toc.1-1.1.2.3">
                <t indent="0" keepWithNext="true" pn="section-toc.1-1.1.2.3.1"><xref derivedContent="1.3" format="counter" sectionFormat="of" target="section-1.3"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-specification-of-requiremen">Specification of Requirements</xref></t>
              </li>
              <li pn="section-toc.1-1.1.2.4">
                <t indent="0" pn="section-toc.1-1.1.2.4.1"><xref derivedContent="1.4" format="counter" sectionFormat="of" target="section-1.4"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-glossary-of-key-terms">Glossary of Key Terms</xref></t>
              </li>
            </ul>
          </li>
          <li pn="section-toc.1-1.2">
            <t indent="0" pn="section-toc.1-1.2.1"><xref derivedContent="2" format="counter" sectionFormat="of" target="section-2"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-api-model">API Model</xref></t>
            <ul bare="true" empty="true" indent="2" spacing="compact" pn="section-toc.1-1.2.2">
              <li pn="section-toc.1-1.2.2.1">
                <t indent="0" pn="section-toc.1-1.2.2.1.1"><xref derivedContent="2.1" format="counter" sectionFormat="of" target="section-2.1"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-event-driven-api">Event-Driven API</xref></t>
              </li>
              <li pn="section-toc.1-1.2.2.2">
                <t indent="0" pn="section-toc.1-1.2.2.2.1"><xref derivedContent="2.2" format="counter" sectionFormat="of" target="section-2.2"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-data-transfer-using-message">Data Transfer Using Messages</xref></t>
              </li>
              <li pn="section-toc.1-1.2.2.3">
                <t indent="0" pn="section-toc.1-1.2.2.3.1"><xref derivedContent="2.3" format="counter" sectionFormat="of" target="section-2.3"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-flexible-implementation">Flexible Implementation</xref></t>
              </li>
              <li pn="section-toc.1-1.2.2.4">
                <t indent="0" pn="section-toc.1-1.2.2.4.1"><xref derivedContent="2.4" format="counter" sectionFormat="of" target="section-2.4"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-coexistence">Coexistence</xref></t>
              </li>
            </ul>
          </li>
          <li pn="section-toc.1-1.3">
            <t indent="0" pn="section-toc.1-1.3.1"><xref derivedContent="3" format="counter" sectionFormat="of" target="section-3"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-api-and-implementation-requ">API and Implementation Requirements</xref></t>
            <ul bare="true" empty="true" indent="2" spacing="compact" pn="section-toc.1-1.3.2">
              <li pn="section-toc.1-1.3.2.1">
                <t indent="0" pn="section-toc.1-1.3.2.1.1"><xref derivedContent="3.1" format="counter" sectionFormat="of" target="section-3.1"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-provide-common-apis-for-com">Provide Common APIs for Common Features</xref></t>
              </li>
              <li pn="section-toc.1-1.3.2.2">
                <t indent="0" pn="section-toc.1-1.3.2.2.1"><xref derivedContent="3.2" format="counter" sectionFormat="of" target="section-3.2"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-allow-access-to-specialized">Allow Access to Specialized Features</xref></t>
              </li>
              <li pn="section-toc.1-1.3.2.3">
                <t indent="0" pn="section-toc.1-1.3.2.3.1"><xref derivedContent="3.3" format="counter" sectionFormat="of" target="section-3.3"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-select-between-equivalent-p">Select Between Equivalent Protocol Stacks</xref></t>
              </li>
              <li pn="section-toc.1-1.3.2.4">
                <t indent="0" pn="section-toc.1-1.3.2.4.1"><xref derivedContent="3.4" format="counter" sectionFormat="of" target="section-3.4"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-maintain-interoperability">Maintain Interoperability</xref></t>
              </li>
              <li pn="section-toc.1-1.3.2.5">
                <t indent="0" pn="section-toc.1-1.3.2.5.1"><xref derivedContent="3.5" format="counter" sectionFormat="of" target="section-3.5"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-support-monitoring">Support Monitoring</xref></t>
              </li>
            </ul>
          </li>
          <li pn="section-toc.1-1.4">
            <t indent="0" pn="section-toc.1-1.4.1"><xref derivedContent="4" format="counter" sectionFormat="of" target="section-4"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-transport-services-architec">Transport Services Architecture and Concepts</xref></t>
            <ul bare="true" empty="true" indent="2" spacing="compact" pn="section-toc.1-1.4.2">
              <li pn="section-toc.1-1.4.2.1">
                <t indent="0" pn="section-toc.1-1.4.2.1.1"><xref derivedContent="4.1" format="counter" sectionFormat="of" target="section-4.1"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-transport-services-api-conc">Transport Services API Concepts</xref></t>
                <ul bare="true" empty="true" indent="2" spacing="compact" pn="section-toc.1-1.4.2.1.2">
                  <li pn="section-toc.1-1.4.2.1.2.1">
                    <t indent="0" pn="section-toc.1-1.4.2.1.2.1.1"><xref derivedContent="4.1.1" format="counter" sectionFormat="of" target="section-4.1.1"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-endpoint-objects">Endpoint Objects</xref></t>
                  </li>
                  <li pn="section-toc.1-1.4.2.1.2.2">
                    <t indent="0" pn="section-toc.1-1.4.2.1.2.2.1"><xref derivedContent="4.1.2" format="counter" sectionFormat="of" target="section-4.1.2"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-connections-and-related-obj">Connections and Related Objects</xref></t>
                  </li>
                  <li pn="section-toc.1-1.4.2.1.2.3">
                    <t indent="0" pn="section-toc.1-1.4.2.1.2.3.1"><xref derivedContent="4.1.3" format="counter" sectionFormat="of" target="section-4.1.3"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-preestablishment">Preestablishment</xref></t>
                  </li>
                  <li pn="section-toc.1-1.4.2.1.2.4">
                    <t indent="0" pn="section-toc.1-1.4.2.1.2.4.1"><xref derivedContent="4.1.4" format="counter" sectionFormat="of" target="section-4.1.4"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-establishment-actions">Establishment Actions</xref></t>
                  </li>
                  <li pn="section-toc.1-1.4.2.1.2.5">
                    <t indent="0" pn="section-toc.1-1.4.2.1.2.5.1"><xref derivedContent="4.1.5" format="counter" sectionFormat="of" target="section-4.1.5"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-data-transfer-objects-and-a">Data Transfer Objects and Actions</xref></t>
                  </li>
                  <li pn="section-toc.1-1.4.2.1.2.6">
                    <t indent="0" pn="section-toc.1-1.4.2.1.2.6.1"><xref derivedContent="4.1.6" format="counter" sectionFormat="of" target="section-4.1.6"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-event-handling">Event Handling</xref></t>
                  </li>
                  <li pn="section-toc.1-1.4.2.1.2.7">
                    <t indent="0" pn="section-toc.1-1.4.2.1.2.7.1"><xref derivedContent="4.1.7" format="counter" sectionFormat="of" target="section-4.1.7"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-termination-actions">Termination Actions</xref></t>
                  </li>
                  <li pn="section-toc.1-1.4.2.1.2.8">
                    <t indent="0" pn="section-toc.1-1.4.2.1.2.8.1"><xref derivedContent="4.1.8" format="counter" sectionFormat="of" target="section-4.1.8"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-connection-groups">Connection Groups</xref></t>
                  </li>
                </ul>
              </li>
              <li pn="section-toc.1-1.4.2.2">
                <t indent="0" pn="section-toc.1-1.4.2.2.1"><xref derivedContent="4.2" format="counter" sectionFormat="of" target="section-4.2"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-transport-services-implemen">Transport Services Implementation</xref></t>
                <ul bare="true" empty="true" indent="2" spacing="compact" pn="section-toc.1-1.4.2.2.2">
                  <li pn="section-toc.1-1.4.2.2.2.1">
                    <t indent="0" pn="section-toc.1-1.4.2.2.2.1.1"><xref derivedContent="4.2.1" format="counter" sectionFormat="of" target="section-4.2.1"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-candidate-gathering">Candidate Gathering</xref></t>
                  </li>
                  <li pn="section-toc.1-1.4.2.2.2.2">
                    <t indent="0" pn="section-toc.1-1.4.2.2.2.2.1"><xref derivedContent="4.2.2" format="counter" sectionFormat="of" target="section-4.2.2"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-candidate-racing">Candidate Racing</xref></t>
                  </li>
                  <li pn="section-toc.1-1.4.2.2.2.3">
                    <t indent="0" pn="section-toc.1-1.4.2.2.2.3.1"><xref derivedContent="4.2.3" format="counter" sectionFormat="of" target="section-4.2.3"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-separating-connection-conte">Separating Connection Contexts</xref></t>
                  </li>
                </ul>
              </li>
            </ul>
          </li>
          <li pn="section-toc.1-1.5">
            <t indent="0" pn="section-toc.1-1.5.1"><xref derivedContent="5" format="counter" sectionFormat="of" target="section-5"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-iana-considerations">IANA Considerations</xref></t>
          </li>
          <li pn="section-toc.1-1.6">
            <t indent="0" pn="section-toc.1-1.6.1"><xref derivedContent="6" format="counter" sectionFormat="of" target="section-6"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-security-and-privacy-consid">Security and Privacy Considerations</xref></t>
          </li>
          <li pn="section-toc.1-1.7">
            <t indent="0" pn="section-toc.1-1.7.1"><xref derivedContent="7" format="counter" sectionFormat="of" target="section-7"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-references">References</xref></t>
            <ul bare="true" empty="true" indent="2" spacing="compact" pn="section-toc.1-1.7.2">
              <li pn="section-toc.1-1.7.2.1">
                <t indent="0" pn="section-toc.1-1.7.2.1.1"><xref derivedContent="7.1" format="counter" sectionFormat="of" target="section-7.1"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-normative-references">Normative References</xref></t>
              </li>
              <li pn="section-toc.1-1.7.2.2">
                <t indent="0" pn="section-toc.1-1.7.2.2.1"><xref derivedContent="7.2" format="counter" sectionFormat="of" target="section-7.2"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-informative-references">Informative References</xref></t>
              </li>
            </ul>
          </li>
          <li pn="section-toc.1-1.8">
            <t indent="0" pn="section-toc.1-1.8.1"><xref derivedContent="" format="none" sectionFormat="of" target="section-appendix.a"/><xref derivedContent="" format="title" sectionFormat="of" target="name-acknowledgements">Acknowledgements</xref></t>
          </li>
          <li pn="section-toc.1-1.9">
            <t indent="0" pn="section-toc.1-1.9.1"><xref derivedContent="" format="none" sectionFormat="of" target="section-appendix.b"/><xref derivedContent="" format="title" sectionFormat="of" target="name-authors-addresses">Authors' Addresses</xref></t>
          </li>
        </ul>
      </section>
    </toc>
  </front>
  <middle>
    <section anchor="introduction" numbered="true" removeInRFC="false" toc="include" pn="section-1">
      <name slugifiedName="name-introduction">Introduction</name>
      <t indent="0" pn="section-1-1">Many Application Programming Interfaces (APIs) to provide transport interfaces to networks have been deployed, perhaps the most widely known and imitated being the Socket interface (Socket API) <xref target="POSIX" format="default" sectionFormat="of" derivedContent="POSIX"/>.
The naming of objects and functions across these APIs is not consistent and varies, depending on the protocol being used.
For example, the concept of sending and receiving streams of data is the same for both an unencrypted Transmission Control Protocol (TCP) stream and operating on an encrypted Transport Layer Security (TLS) stream <xref target="RFC8446" format="default" sectionFormat="of" derivedContent="RFC8446"/> over TCP, but applications cannot use the same socket <tt>send()</tt> and <tt>recv()</tt> calls on top of both kinds of connections.
Similarly, terminology for the implementation of transport protocols varies based on the context of the protocols themselves: terms such as "flow", "stream", "message", and "connection" can take on many different meanings.
This variety can lead to confusion when trying to understand the similarities and differences between protocols and how applications can use them effectively.
</t>
      <t indent="0" pn="section-1-2">The goal of the Transport Services System architecture is to provide a flexible
and reusable system with a common interface for transport protocols.
An application uses the Transport Services System through an abstract Connection (we use capitalization to distinguish these from the underlying connections of, for example, TCP).
This provides
flexible Connection establishment allowing an application to request or require a set of Properties.</t>
      <t indent="0" pn="section-1-3">As applications adopt this interface, they will benefit from a wide set of transport features that can evolve over time
and will ensure that the system providing the interface can optimize its behavior based on the application requirements
and network conditions, without requiring changes to the applications. This flexibility enables faster deployment of new features and protocols.</t>
      <t indent="0" pn="section-1-4">This architecture can also support applications by offering racing mechanisms (attempting multiple IP addresses, protocols, or network paths in parallel), which otherwise need to be implemented in each application separately (see <xref target="racing" format="default" sectionFormat="of" derivedContent="Section 4.2.2"/>). Racing selects one or more candidates, each with equivalent Protocol Stacks that are used to identify
an optimal combination of a transport protocol instance such as TCP, UDP, or another transport, together with configuration of parameters and
interfaces.
A Connection represents an object that, once established, can be used to send and receive Messages.
A Connection can also be created from another Connection, by cloning, and then forms a part of a Connection Group whose Connections share Properties.


</t>
      <t indent="0" pn="section-1-5">This document was developed in parallel with the specification of the Transport Services API <xref target="RFC9622" format="default" sectionFormat="of" derivedContent="RFC9622"/> and implementation guidelines <xref target="RFC9623" format="default" sectionFormat="of" derivedContent="RFC9623"/>. Although following the Transport Services Architecture does not require all APIs and implementations to be identical, a common minimal set of features represented in a consistent fashion will enable applications to be easily ported from one implementation of the Transport Services System to another.</t>
      <section anchor="background" numbered="true" removeInRFC="false" toc="include" pn="section-1.1">
        <name slugifiedName="name-background">Background</name>
        <t indent="0" pn="section-1.1-1">The architecture of the Transport Services System is based on the survey of services provided by IETF transport protocols and congestion control mechanisms <xref target="RFC8095" format="default" sectionFormat="of" derivedContent="RFC8095"/> and the distilled minimal set of the features offered by transport protocols <xref target="RFC8923" format="default" sectionFormat="of" derivedContent="RFC8923"/>. These documents identified common features and patterns across all transport protocols developed thus far in the IETF.</t>
        <t indent="0" pn="section-1.1-2">Since transport security is an increasingly relevant aspect of using transport protocols on the Internet, this document also considers the impact of transport security protocols on the feature set exposed by Transport Services <xref target="RFC8922" format="default" sectionFormat="of" derivedContent="RFC8922"/>.</t>
        <t indent="0" pn="section-1.1-3">One of the key insights to come from identifying the minimal set of features provided by transport protocols <xref target="RFC8923" format="default" sectionFormat="of" derivedContent="RFC8923"/> was that features either (1) require application interaction and guidance (referred to in that document as Functional or Optimizing Features) or (2) can be handled automatically by an implementation of the Transport Services System (referred to as Automatable Features). Among the identified Functional and Optimizing Features, some are common across all or nearly all transport protocols, while others present features that, if specified, would only be useful with a subset of protocols, but would not harm the functionality of other protocols. For example, some protocols can deliver messages more quickly for applications that do not require messages to arrive in the order in which they were sent. This functionality needs to be explicitly allowed by the application, since reordering messages would be undesirable in many cases.</t>
      </section>
      <section anchor="overview" numbered="true" removeInRFC="false" toc="include" pn="section-1.2">
        <name slugifiedName="name-overview">Overview</name>
        <t indent="0" pn="section-1.2-1">The following sections describe the Transport Services System:</t>
        <ul spacing="normal" bare="false" empty="false" indent="3" pn="section-1.2-2">
          <li pn="section-1.2-2.1">
            <t indent="0" pn="section-1.2-2.1.1"><xref target="model" format="default" sectionFormat="of" derivedContent="Section 2"/> describes how the Transport Services API model differs from that of socket-based APIs. Specifically, it offers asynchronous event-driven interaction, the use of Messages for data transfer, and the flexibility to use different transport protocols and paths without requiring major changes to the application.</t>
          </li>
          <li pn="section-1.2-2.2">
            <t indent="0" pn="section-1.2-2.2.1"><xref target="requirements" format="default" sectionFormat="of" derivedContent="Section 3"/> explains the fundamental requirements for a Transport Services System. These principles are intended to make sure that transport protocols can continue to be enhanced and evolve without requiring significant changes by application developers.</t>
          </li>
          <li pn="section-1.2-2.3">
            <t indent="0" pn="section-1.2-2.3.1"><xref target="concepts" format="default" sectionFormat="of" derivedContent="Section 4"/> presents the Transport Services Implementation and defines the concepts that are used by the API <xref target="RFC9622" format="default" sectionFormat="of" derivedContent="RFC9622"/> and described in the implementation guidelines <xref target="RFC9623" format="default" sectionFormat="of" derivedContent="RFC9623"/>. This introduces the Preconnection, which allows applications to configure Connection Properties.</t>
          </li>
        </ul>
      </section>
      <section anchor="specification-of-requirements" numbered="true" removeInRFC="false" toc="include" pn="section-1.3">
        <name slugifiedName="name-specification-of-requiremen">Specification of Requirements</name>
        <t indent="0" pn="section-1.3-1">The key words "<bcp14>MUST</bcp14>", "<bcp14>MUST NOT</bcp14>",
        "<bcp14>REQUIRED</bcp14>", "<bcp14>SHALL</bcp14>",
        "<bcp14>SHALL NOT</bcp14>", "<bcp14>SHOULD</bcp14>",
        "<bcp14>SHOULD NOT</bcp14>",
        "<bcp14>RECOMMENDED</bcp14>", "<bcp14>NOT RECOMMENDED</bcp14>",
        "<bcp14>MAY</bcp14>", and "<bcp14>OPTIONAL</bcp14>" in this document
        are to be interpreted as described in BCP 14
        <xref target="RFC2119" format="default" sectionFormat="of" derivedContent="RFC2119"/> <xref target="RFC8174" format="default" sectionFormat="of" derivedContent="RFC8174"/> when, and only
        when, they appear in all capitals, as shown here.</t>
      </section>
      <section anchor="glossary-of-key-terms" numbered="true" removeInRFC="false" toc="include" pn="section-1.4">
        <name slugifiedName="name-glossary-of-key-terms">Glossary of Key Terms</name>
        <t indent="0" pn="section-1.4-1">This subsection provides a glossary of key terms related to the Transport Services Architecture. It provides a short description of key terms that are defined later in this document.</t>
        <dl spacing="normal" indent="3" newline="false" pn="section-1.4-2">
          <dt pn="section-1.4-2.1">Application:</dt>
          <dd pn="section-1.4-2.2"> An entity that uses the transport layer for end-to-end delivery of data across the network <xref target="RFC8095" format="default" sectionFormat="of" derivedContent="RFC8095"/>.</dd>
          <dt pn="section-1.4-2.3">Cached State:</dt>
          <dd pn="section-1.4-2.4"> The state and history that the Transport Services Implementation keeps for each set of the associated Endpoints that have been used previously.</dd>
          <dt pn="section-1.4-2.5">Candidate Path:</dt>
          <dd pn="section-1.4-2.6"> One path that is available to an application and conforms to the Selection Properties and System Policy during racing.</dd>
          <dt pn="section-1.4-2.7">Candidate Protocol Stack:</dt>
          <dd pn="section-1.4-2.8"> One Protocol Stack that can be used by an application for a Connection during racing.</dd>
          <dt pn="section-1.4-2.9">Client:</dt>
          <dd pn="section-1.4-2.10"> The peer responsible for initiating a Connection.</dd>
          <dt pn="section-1.4-2.11">Clone:</dt>
          <dd pn="section-1.4-2.12"> A Connection that was created from another Connection and that forms a part of a Connection Group.</dd>
          <dt pn="section-1.4-2.13">Connection:</dt>
          <dd pn="section-1.4-2.14"> Shared state of two or more Endpoints that persists across Messages that are transmitted and received between these Endpoints <xref target="RFC8303" format="default" sectionFormat="of" derivedContent="RFC8303"/>. When this document and other Transport Services documents use the capitalized "Connection" term, it refers to a Connection object that is being offered by the Transport Services System, as opposed to more generic uses of the word "connection".</dd>
          <dt pn="section-1.4-2.15">Connection Context:</dt>
          <dd pn="section-1.4-2.16"> A set of stored Properties across Connections, such as cached protocol state, cached path state, and heuristics, which can include one or more Connection Groups.</dd>
          <dt pn="section-1.4-2.17">Connection Group:</dt>
          <dd pn="section-1.4-2.18"> A set of Connections that share Properties and caches.</dd>
          <dt pn="section-1.4-2.19">Connection Property:</dt>
          <dd pn="section-1.4-2.20"> A Transport Property that controls per-Connection behavior of a Transport Services Implementation.</dd>
          <dt pn="section-1.4-2.21">Endpoint:</dt>
          <dd pn="section-1.4-2.22"> An entity that communicates with one or more other Endpoints using a transport protocol.</dd>
          <dt pn="section-1.4-2.23">Endpoint Identifier:</dt>
          <dd pn="section-1.4-2.24"> An identifier that specifies one side of a Connection (local or remote), such as a hostname or URL.</dd>
          <dt pn="section-1.4-2.25">Equivalent Protocol Stacks:</dt>
          <dd pn="section-1.4-2.26"> Protocol Stacks that can be safely swapped or raced in parallel during establishment of a Connection.</dd>
          <dt pn="section-1.4-2.27">Event:</dt>
          <dd pn="section-1.4-2.28"> A primitive that is invoked by an Endpoint <xref target="RFC8303" format="default" sectionFormat="of" derivedContent="RFC8303"/>.</dd>
          <dt pn="section-1.4-2.29">Framer:</dt>
          <dd pn="section-1.4-2.30"> A data translation layer that can be added to a Connection to define how application-layer Messages are transmitted over a Protocol Stack.</dd>
          <dt pn="section-1.4-2.31">Local Endpoint:</dt>
          <dd pn="section-1.4-2.32"> The local Endpoint.</dd>
          <dt pn="section-1.4-2.33">Local Endpoint Identifier:</dt>
          <dd pn="section-1.4-2.34"> A representation of the application's identifier for itself that it uses for a Connection.</dd>
          <dt pn="section-1.4-2.35">Message:</dt>
          <dd pn="section-1.4-2.36"> A unit of data that can be transferred between two Endpoints over a Connection.</dd>
          <dt pn="section-1.4-2.37">Message Property:</dt>
          <dd pn="section-1.4-2.38"> A property that can be used to specify details about Message transmission or obtain details about the transmission after receiving a Message.</dd>
          <dt pn="section-1.4-2.39">Parameter:</dt>
          <dd pn="section-1.4-2.40"> A value passed between an application and a transport protocol by a primitive <xref target="RFC8303" format="default" sectionFormat="of" derivedContent="RFC8303"/>.</dd>
          <dt pn="section-1.4-2.41">Path:</dt>
          <dd pn="section-1.4-2.42"> A representation of an available set of Properties that a Local Endpoint can use to communicate with a Remote Endpoint.</dd>
          <dt pn="section-1.4-2.43">Peer:</dt>
          <dd pn="section-1.4-2.44"> An Endpoint application party to a Connection.</dd>
          <dt pn="section-1.4-2.45">Preconnection:</dt>
          <dd pn="section-1.4-2.46"> An object that represents a Connection that has not yet been established.</dd>
          <dt pn="section-1.4-2.47">Preference:</dt>
          <dd pn="section-1.4-2.48"> A preference for prohibiting, avoiding, ignoring, preferring, or requiring a specific transport feature.</dd>
          <dt pn="section-1.4-2.49">Primitive:</dt>
          <dd pn="section-1.4-2.50"> A function call that is used to locally communicate between an application and an Endpoint, which is related to one or more transport features <xref target="RFC8303" format="default" sectionFormat="of" derivedContent="RFC8303"/>.</dd>
          <dt pn="section-1.4-2.51">Protocol Instance:</dt>
          <dd pn="section-1.4-2.52"> A single instance of one protocol, including any state necessary to establish connectivity or send and receive Messages.</dd>
          <dt pn="section-1.4-2.53">Protocol Stack:</dt>
          <dd pn="section-1.4-2.54"> A set of protocol instances that are used together to establish connectivity or send and receive Messages.</dd>
          <dt pn="section-1.4-2.55">Racing:</dt>
          <dd pn="section-1.4-2.56"> The attempt to select between multiple Protocol Stacks based on the Selection and Connection Properties communicated by the application, along with any Security Parameters.</dd>
          <dt pn="section-1.4-2.57">Remote Endpoint:</dt>
          <dd pn="section-1.4-2.58"> The peer that a Local Endpoint can communicate with when a Connection is established.</dd>
          <dt pn="section-1.4-2.59">Remote Endpoint Identifier:</dt>
          <dd pn="section-1.4-2.60"> A representation of the application's identifier for a peer that can participate in establishing a Connection.</dd>
          <dt pn="section-1.4-2.61">Rendezvous:</dt>
          <dd pn="section-1.4-2.62"> The action of establishing a peer-to-peer Connection with a Remote Endpoint.</dd>
          <dt pn="section-1.4-2.63">Security Parameters:</dt>
          <dd pn="section-1.4-2.64"> Parameters that define an application's requirements for authentication and encryption on a Connection.</dd>
          <dt pn="section-1.4-2.65">Selection Property:</dt>
          <dd pn="section-1.4-2.66"> A Transport Property that can be set to influence the selection of paths between the Local and Remote Endpoints.</dd>
          <dt pn="section-1.4-2.67">Server:</dt>
          <dd pn="section-1.4-2.68"> The peer responsible for responding to a Connection initiation.</dd>
          <dt pn="section-1.4-2.69">Socket:</dt>
          <dd pn="section-1.4-2.70"> The combination of a destination IP address and a destination port number <xref target="RFC8303" format="default" sectionFormat="of" derivedContent="RFC8303"/>.</dd>
          <dt pn="section-1.4-2.71">System Policy:</dt>
          <dd pn="section-1.4-2.72"> The input from an operating system or other global preferences that can constrain or influence how an implementation will gather Candidate Paths and Candidate Protocol Stacks and race the candidates during establishment of a Connection.</dd>
          <dt pn="section-1.4-2.73">Transport Feature:</dt>
          <dd pn="section-1.4-2.74"> A specific end-to-end feature that the transport layer provides to an application.</dd>
          <dt pn="section-1.4-2.75">Transport Property:</dt>
          <dd pn="section-1.4-2.76"> A property of a transport protocol and the services it provides <xref target="RFC8095" format="default" sectionFormat="of" derivedContent="RFC8095"/>.</dd>
          <dt pn="section-1.4-2.77">Transport Service:</dt>
          <dd pn="section-1.4-2.78"> A set of transport features, not associated with any given framing protocol, that provides a complete service to an application.</dd>
          <dt pn="section-1.4-2.79">Transport Services API:</dt>
          <dd pn="section-1.4-2.80">The abstract interface <xref target="RFC9622" format="default" sectionFormat="of" derivedContent="RFC9622"/> to a Transport Services Implementation <xref target="RFC9623" format="default" sectionFormat="of" derivedContent="RFC9623"/>.</dd>
          <dt pn="section-1.4-2.81">Transport Services Implementation:</dt>
          <dd pn="section-1.4-2.82"> All objects and protocol instances used internally to a system or library to implement the functionality needed to provide a transport service across a network, as required by the abstract interface.</dd>
          <dt pn="section-1.4-2.83">Transport Services System:</dt>
          <dd pn="section-1.4-2.84"> The Transport Services Implementation and the Transport Services API.</dd>
        </dl>
      </section>
    </section>
    <section anchor="model" numbered="true" removeInRFC="false" toc="include" pn="section-2">
      <name slugifiedName="name-api-model">API Model</name>
      <t indent="0" pn="section-2-1">The model of using sockets can be represented as follows (see <xref target="fig-sockets" format="default" sectionFormat="of" derivedContent="Figure 1"/>):</t>
      <ul spacing="normal" bare="false" empty="false" indent="3" pn="section-2-2">
        <li pn="section-2-2.1">
          <t indent="0" pn="section-2-2.1.1">Applications create connections and transfer data using the Socket API.</t>
        </li>
        <li pn="section-2-2.2">
          <t indent="0" pn="section-2-2.2.1">The Socket API provides the interface to the implementations of TCP and UDP
(typically implemented in the system's kernel).</t>
        </li>
        <li pn="section-2-2.3">
          <t indent="0" pn="section-2-2.3.1">TCP and UDP in the kernel send and receive data over the available network-layer interfaces.</t>
        </li>
        <li pn="section-2-2.4">
          <t indent="0" pn="section-2-2.4.1">Sockets are bound directly to transport-layer and network-layer addresses,
obtained via a separate resolution step, usually performed by a
system-provided DNS stub resolver.</t>
        </li>
      </ul>
      <figure anchor="fig-sockets" align="left" suppress-title="false" pn="figure-1">
        <name slugifiedName="name-socket-api-model">Socket API Model</name>
        <artwork align="left" pn="section-2-3.1">
+-----------------------------------------------------+
|                    Application                      |
+-----------------------------------------------------+
        |                 |                  |
  +------------+     +------------+    +--------------+
  |  DNS Stub  |     | Stream API |    | Datagram API |
  |  Resolver  |     +------------+    +--------------+
  +------------+          |                  |
                    +---------------------------------+
                    |    TCP                UDP       |
                    |    Kernel Networking Stack      |
                    +---------------------------------+
                                    |
+-----------------------------------------------------+
|               Network-Layer Interface               |
+-----------------------------------------------------+
</artwork>
      </figure>
      <t indent="0" pn="section-2-4">The architecture of the Transport Services System is an evolution of this general model of interaction. It both modernizes the API presented to applications by the transport layer and enriches the capabilities of the Transport Services Implementation below this API.</t>
      <t indent="0" pn="section-2-5">The Transport Services API <xref target="RFC9622" format="default" sectionFormat="of" derivedContent="RFC9622"/> defines the interface for an application to create Connections and transfer data. It combines interfaces for multiple interaction patterns into a unified whole (see <xref target="fig-taps" format="default" sectionFormat="of" derivedContent="Figure 2"/>).
This offers generic functions and also the protocol-specific mappings for TCP, UDP, UDP-Lite, and other protocol layers. These mappings are extensible. Future documents could define similar mappings for new layers and for other transport protocols, such as QUIC <xref target="RFC9000" format="default" sectionFormat="of" derivedContent="RFC9000"/>.</t>
      <figure anchor="fig-taps" align="left" suppress-title="false" pn="figure-2">
        <name slugifiedName="name-transport-services-api-mode">Transport Services API Model</name>
        <artwork align="left" pn="section-2-6.1">
+-----------------------------------------------------+
|                    Application                      |
+-----------------------------------------------------+
                          |
+-----------------------------------------------------+
|              Transport Services API                 |
+-----------------------------------------------------+
                          |
+-----------------------------------------------------+
|          Transport Services Implementation          |
|  (Using DNS, UDP, TCP, SCTP, DCCP, TLS, QUIC, etc.) |
+-----------------------------------------------------+
                          |
+-----------------------------------------------------+
|               Network-Layer Interface               |
+-----------------------------------------------------+
</artwork>
      </figure>
      <t indent="0" pn="section-2-7">By combining name resolution with Connection establishment and data transfer in a single API, it allows for more flexible implementations to provide path and transport protocol agility on the application's behalf.</t>
      <t indent="0" pn="section-2-8">The Transport Services Implementation <xref target="RFC9623" format="default" sectionFormat="of" derivedContent="RFC9623"/> is the component of the Transport Services System that implements the transport-layer protocols and other functions needed to send and receive data. It is responsible for mapping the API to a specific available transport Protocol Stack and managing the available network interfaces and paths.</t>
      <t indent="0" pn="section-2-9">There are key differences between the architecture of the Transport Services System and the architecture of the Socket API. The API of the Transport Services System:</t>
      <ul spacing="normal" bare="false" empty="false" indent="3" pn="section-2-10">
        <li pn="section-2-10.1">is asynchronous and event-driven;</li>
        <li pn="section-2-10.2">uses Messages for representing data transfer to applications;</li>
        <li pn="section-2-10.3">describes how a Transport Services Implementation can resolve Endpoint Identifiers to use multiple IP addresses, multiple protocols, and multiple paths and to provide multiple application streams.</li>
      </ul>
      <section anchor="event-driven-api" numbered="true" removeInRFC="false" toc="include" pn="section-2.1">
        <name slugifiedName="name-event-driven-api">Event-Driven API</name>
        <t indent="0" pn="section-2.1-1">Originally, the Socket API presented a blocking interface for establishing connections and transferring data. However, most modern applications interact with the network asynchronously. Emulation of an asynchronous interface using the Socket API can use a try-and-fail model: if the application wants to read but data has not yet been received from the peer, the call to read will fail. The application then waits and can try again later.</t>
        <t indent="0" pn="section-2.1-2">In contrast to the Socket API, all interactions using the Transport Services API are expected to be asynchronous. The API is defined around an event-driven model (see <xref target="events" format="default" sectionFormat="of" derivedContent="Section 4.1.6"/>), which models this asynchronous interaction. Other forms of asynchronous communication could also be available to applications, depending on the platform implementing the interface.</t>
        <t indent="0" pn="section-2.1-3">For example, when an application that uses the Transport Services API wants to receive data, it issues an asynchronous call to receive new data from the Connection. When delivered data becomes available, this data is delivered to the application using asynchronous events that contain the data. Error handling is also asynchronous, resulting in asynchronous error events.</t>
        <t indent="0" pn="section-2.1-4">This API also delivers events regarding the lifetime of a connection and changes in the available network links, which were not previously made explicit in the Socket API.</t>
        <t indent="0" pn="section-2.1-5">Using asynchronous events allows for a more natural interaction model when establishing connections and transferring data. Events in time more closely reflect the nature of interactions over networks, as opposed to how the Socket API represents network resources as file system objects that may be temporarily unavailable.</t>
        <t indent="0" pn="section-2.1-6">Separate from events, callbacks are also provided for asynchronous interactions with the Transport Services API that are not directly related to events on the network or network interfaces.</t>
      </section>
      <section anchor="data-transfer-using-messages" numbered="true" removeInRFC="false" toc="include" pn="section-2.2">
        <name slugifiedName="name-data-transfer-using-message">Data Transfer Using Messages</name>
        <t indent="0" pn="section-2.2-1">The Socket API provides a message interface for datagram protocols like UDP but provides an unstructured stream abstraction for TCP. While TCP has the ability to send and receive data as a byte-stream, most applications need to interpret structure within this byte-stream. For example, HTTP/1.1 uses character delimiters to segment messages over a byte-stream <xref target="RFC9112" format="default" sectionFormat="of" derivedContent="RFC9112"/>; TLS record headers carry a version, content type, and length <xref target="RFC8446" format="default" sectionFormat="of" derivedContent="RFC8446"/>; and HTTP/2 uses frames to segment its headers and bodies <xref target="RFC9113" format="default" sectionFormat="of" derivedContent="RFC9113"/>.</t>
        <t indent="0" pn="section-2.2-2">The Transport Services API represents data as Messages, so that it more closely matches the way applications use the network. A Message-based abstraction provides many benefits, such as:</t>
        <ul spacing="normal" bare="false" empty="false" indent="3" pn="section-2.2-3">
          <li pn="section-2.2-3.1">
            <t indent="0" pn="section-2.2-3.1.1">providing additional information to the Protocol Stack;</t>
          </li>
          <li pn="section-2.2-3.2">
            <t indent="0" pn="section-2.2-3.2.1">the ability to associate deadlines with Messages, for applications that care about timing;</t>
          </li>
          <li pn="section-2.2-3.3">
            <t indent="0" pn="section-2.2-3.3.1">the ability to control reliability, which Messages to retransmit when there is packet loss, and how best to make use of the data that arrived;</t>
          </li>
          <li pn="section-2.2-3.4">
            <t indent="0" pn="section-2.2-3.4.1">the ability to automatically assign Messages and connections to underlying transport connections to utilize multistreaming and create Pooled Connections.</t>
          </li>
        </ul>
        <t indent="0" pn="section-2.2-4">Allowing applications to interact with Messages is backward-compatible with existing protocols and APIs because it does not change the wire format of any protocol. Instead, it provides the Protocol Stack with additional information to allow it to make better use of modern transport protocols, while simplifying the application's role in parsing data. For protocols that inherently use a streaming abstraction, Framers (<xref target="datatransfer" format="default" sectionFormat="of" derivedContent="Section 4.1.5"/>) bridge the gap between the two abstractions.</t>
      </section>
      <section anchor="flexible-implementation" numbered="true" removeInRFC="false" toc="include" pn="section-2.3">
        <name slugifiedName="name-flexible-implementation">Flexible Implementation</name>
        <t indent="0" pn="section-2.3-1">The Socket API for protocols like TCP is generally limited to connecting to a single address over a single interface (IP source address).
It also presents a single stream to the application. Software layers built upon this API often propagate this limitation of a single-address single-stream model. The Transport Services Architecture is designed to:</t>
        <ul spacing="normal" bare="false" empty="false" indent="3" pn="section-2.3-2">
          <li pn="section-2.3-2.1">
            <t indent="0" pn="section-2.3-2.1.1">handle multiple candidate endpoints, protocols, and paths;</t>
          </li>
          <li pn="section-2.3-2.2">
            <t indent="0" pn="section-2.3-2.2.1">support candidate protocol racing to select the most optimal stack in each situation;</t>
          </li>
          <li pn="section-2.3-2.3">
            <t indent="0" pn="section-2.3-2.3.1">support multipath and multistreaming protocols;</t>
          </li>
          <li pn="section-2.3-2.4">
            <t indent="0" pn="section-2.3-2.4.1">provide state caching and application control over it.</t>
          </li>
        </ul>
        <t indent="0" pn="section-2.3-3">A Transport Services Implementation is intended to be flexible at Connection establishment time, considering many different options and trying to select the most optimal combinations by racing them and measuring the results (see Sections <xref target="gathering" format="counter" sectionFormat="of" derivedContent="4.2.1"/> and <xref target="racing" format="counter" sectionFormat="of" derivedContent="4.2.2"/>). This requires applications to specify identifiers for the Local and Remote Endpoint that are at a higher level than IP addresses, such as a hostname or URL.  These identifiers are used by a Transport Services Implementation for resolution, path selection, and racing. An implementation can further implement fallback mechanisms if connection establishment for one protocol fails or performance is determined to be unsatisfactory.
</t>
        <t indent="0" pn="section-2.3-4">Information used in Connection establishment (e.g., cryptographic resumption tokens, information about usability of certain protocols on the path, results of racing in previous connections) is cached in the Transport Services Implementation. Applications have control over whether this information is used for a specific establishment, in order to allow trade-offs between efficiency and linkability.</t>
        <t indent="0" pn="section-2.3-5">Flexibility after Connection establishment is also important. Transport protocols that can migrate between multiple network-layer interfaces need to be able to process and react to interface changes. Protocols that support multiple application-layer streams need to support initiating and receiving new streams using existing connections.</t>
      </section>
      <section anchor="coexistence" numbered="true" removeInRFC="false" toc="include" pn="section-2.4">
        <name slugifiedName="name-coexistence">Coexistence</name>
        <t indent="0" pn="section-2.4-1">While the architecture of the Transport Services System is designed as an enhanced replacement for the Socket API, it need not replace it entirely on a system or platform; indeed, coexistence has been recommended for incremental deployability <xref target="RFC8170" format="default" sectionFormat="of" derivedContent="RFC8170"/>. The architecture is therefore designed such that it can run alongside (or, indeed, on top of) an existing Socket API implementation; only applications built on the Transport Services API are managed by the system's Transport Services Implementation.</t>
      </section>
    </section>
    <section anchor="requirements" numbered="true" removeInRFC="false" toc="include" pn="section-3">
      <name slugifiedName="name-api-and-implementation-requ">API and Implementation Requirements</name>
      <t indent="0" pn="section-3-1">One goal of the architecture is to redefine the interface between applications and transports in a way that allows the transport layer to evolve and improve without fundamentally changing the contract with the application. This requires careful consideration of how to expose the capabilities of protocols. The architecture also encompasses system policies that can influence and inform how transport protocols use a network path or interface.</t>
      <t indent="0" pn="section-3-2">There are several ways the Transport Services System can offer flexibility to an application.  It can:</t>
      <ul spacing="normal" bare="false" empty="false" indent="3" pn="section-3-3">
        <li pn="section-3-3.1">provide access to transport protocols and protocol features;</li>
        <li pn="section-3-3.2">use these protocols across multiple paths that could have different performance and functional characteristics;</li>
        <li pn="section-3-3.3">communicate with different remote systems to optimize performance, robustness to failure, or some other metric.</li>
      </ul>
      <t indent="0" pn="section-3-4">Beyond these, if the Transport Services API remains the same over time, new protocols and features can be added to the Transport Services Implementation without requiring changes in applications for adoption. Similarly, this can provide a common basis for utilizing information about a network path or interface, enabling evolution below the transport layer.</t>
      <t indent="0" pn="section-3-5">The normative requirements described in this section allow Transport Services APIs and Transport Services Implementations to provide this functionality without causing incompatibility or introducing security vulnerabilities.</t>
      <section anchor="provide-common-apis-for-common-features" numbered="true" removeInRFC="false" toc="include" pn="section-3.1">
        <name slugifiedName="name-provide-common-apis-for-com">Provide Common APIs for Common Features</name>
        <t indent="0" pn="section-3.1-1">Any functionality that is common across multiple transport protocols <bcp14>SHOULD</bcp14> be made accessible through a unified set of calls using the Transport Services API. As a baseline, any Transport Services API <bcp14>SHOULD</bcp14> allow access to the minimal set of features offered by transport protocols <xref target="RFC8923" format="default" sectionFormat="of" derivedContent="RFC8923"/>. If that minimal set is updated or expanded in the future, the Transport Services API ought to be extended to match.</t>
        <t indent="0" pn="section-3.1-2">An application can specify constraints and preferences for the protocols, features, and network interfaces it will use via Properties. Properties are used by an application to declare its preferences for how the transport service should operate at each stage in the lifetime of a connection. Transport Properties are subdivided into the following:</t>
        <ul spacing="normal" bare="false" empty="false" indent="3" pn="section-3.1-3">
          <li pn="section-3.1-3.1">Selection Properties, which specify which paths and Protocol Stacks can be used and are preferred by the application;</li>
          <li pn="section-3.1-3.2">Connection Properties, which inform decisions made during Connection establishment and fine-tune the established connection; and</li>
          <li pn="section-3.1-3.3">Message Properties, which can be set on individual Messages.</li>
        </ul>
        <t indent="0" pn="section-3.1-4">It is <bcp14>RECOMMENDED</bcp14> that the Transport Services API offer Properties that are common to multiple transport protocols. This enables a Transport Services System to appropriately select between protocols that offer equivalent features. Similarly, it is <bcp14>RECOMMENDED</bcp14> that the Properties offered by the Transport Services API be applicable to a variety of network-layer interfaces and paths, to permit racing of different network paths without affecting the applications using the API. Each is expected to have a default value.</t>
        <t indent="0" pn="section-3.1-5">It is <bcp14>RECOMMENDED</bcp14> that the default values for Properties be selected to ensure correctness for the widest set of applications, while providing the widest set of options for selection. For example, since both applications that require reliability and those that do not require reliability can function correctly when a protocol provides reliability, reliability ought to be enabled by default. As another example, the default value for a Property regarding the selection of network interfaces ought to permit as many interfaces as possible.</t>
        <t indent="0" pn="section-3.1-6">Applications using the Transport Services API need to be designed to be robust to the automated selection provided by the Transport Services System. This automated selection is constrained by the preferences expressed by the application and requires applications to explicitly set Properties that define any necessary constraints on protocol, path, and interface selection.</t>
      </section>
      <section anchor="allow-access-to-specialized-features" numbered="true" removeInRFC="false" toc="include" pn="section-3.2">
        <name slugifiedName="name-allow-access-to-specialized">Allow Access to Specialized Features</name>
        <t indent="0" pn="section-3.2-1">There are applications that will need to control fine-grained details of transport protocols to optimize their behavior and ensure compatibility with remote systems. It is therefore <bcp14>RECOMMENDED</bcp14> that the Transport Services API and the Transport Services Implementation permit more specialized protocol features to be used.</t>
        <t indent="0" pn="section-3.2-2">Some specialized features could be needed by an application only when using a specific protocol and not when using others. For example, if an application is using TCP, it could require control over the User Timeout Option for TCP <xref target="RFC5482" format="default" sectionFormat="of" derivedContent="RFC5482"/>. Such features would not take effect for other transport protocols. In such cases, the API ought to expose the features in such a way that they take effect when a particular protocol is selected but do not imply that only that protocol could be used. For example, if the API allows an application to specify a preference for using the User Timeout Option, communication would not fail when a protocol such as UDP is selected.</t>
        <t indent="0" pn="section-3.2-3">Other specialized features, however, can also be strictly required by an application and thus further constrain the set of protocols that can be used. For example, if an application requires support for automatic handover or failover for a connection, only Protocol Stacks that provide this feature are eligible to be used, e.g., Protocol Stacks that include a multipath protocol or a protocol that supports connection migration. A Transport Services API needs to allow applications to define such requirements and constrain the options available to a Transport Services Implementation. Since such options are not part of the core/common features, it will generally be simple for an application to modify its set of constraints and change the set of allowable protocol features without changing the core implementation.</t>
        <t indent="0" pn="section-3.2-4">To control these specialized features, the application can declare its preference: whether the presence of a specific feature is prohibited, should be avoided, can be ignored, is preferred, or is required in the preestablishment phase. An implementation of a Transport Services API would honor this preference and allow the application to query the availability of each specialized feature after successful establishment.</t>
      </section>
      <section anchor="equivalence" numbered="true" removeInRFC="false" toc="include" pn="section-3.3">
        <name slugifiedName="name-select-between-equivalent-p">Select Between Equivalent Protocol Stacks</name>
        <t indent="0" pn="section-3.3-1">A Transport Services Implementation can attempt to use, and select between, multiple Protocol Stacks based on the Selection and Connection Properties communicated by the application, along with any Security Parameters. The implementation can only attempt to use multiple Protocol Stacks when they are "equivalent", which means that the stacks can provide the same Transport Properties and interface expectations as requested by the application. Equivalent Protocol Stacks can be safely swapped or raced in parallel (see <xref target="racing" format="default" sectionFormat="of" derivedContent="Section 4.2.2"/>) during Connection establishment.</t>
        <t indent="0" pn="section-3.3-2">The following two examples show non-equivalent Protocol Stacks:</t>
        <ul spacing="normal" bare="false" empty="false" indent="3" pn="section-3.3-3">
          <li pn="section-3.3-3.1">
            <t indent="0" pn="section-3.3-3.1.1">If the application requires preservation of Message boundaries, a Protocol Stack that runs UDP as the top-level interface to the application is not equivalent to a Protocol Stack that runs TCP as the top-level interface. A UDP stack would allow an application to read out Message boundaries based on datagrams sent from the remote system, whereas TCP does not preserve Message boundaries on its own but needs a framing protocol on top to determine Message boundaries.</t>
          </li>
          <li pn="section-3.3-3.2">
            <t indent="0" pn="section-3.3-3.2.1">If the application specifies that it requires reliable transmission of data, then a Protocol Stack using UDP without any reliability layer on top would not be allowed to replace a Protocol Stack using TCP.</t>
          </li>
        </ul>
        <t indent="0" pn="section-3.3-4">The following example shows equivalent Protocol Stacks:</t>
        <ul spacing="normal" bare="false" empty="false" indent="3" pn="section-3.3-5">
          <li pn="section-3.3-5.1">
            <t indent="0" pn="section-3.3-5.1.1">If the application does not require reliable transmission of data, then a Protocol Stack that adds reliability could be regarded as an equivalent Protocol Stack as long as providing this would not conflict with any other application-requested Properties.</t>
          </li>
        </ul>
        <t indent="0" pn="section-3.3-6">A Transport Services Implementation can race different security
protocols, e.g., if the System Policy is explicitly configured to consider them equivalent.
A Transport Services Implementation <bcp14>SHOULD</bcp14> only race Protocol Stacks where the transport security protocols within the stacks are identical.
To ensure that security protocols are not incorrectly swapped, a Transport Services Implementation <bcp14>MUST</bcp14> only select Protocol Stacks that meet application requirements <xref target="RFC8922" format="default" sectionFormat="of" derivedContent="RFC8922"/>.
A Transport Services Implementation <bcp14>MUST NOT</bcp14> automatically fall back from secure protocols to insecure protocols or fall back to weaker versions of secure protocols.
A Transport Services Implementation <bcp14>MAY</bcp14> allow applications to explicitly specify which versions of a protocol ought to be permitted, e.g., to allow a minimum version of TLS 1.2 if TLS 1.3 is not available.</t>
        <t indent="0" pn="section-3.3-7">A Transport Services Implementation <bcp14>MAY</bcp14> specify security Properties relating to how the system operates (e.g., requirements, prohibitions, and preferences for the use of DNS Security Extensions (DNSSEC) or DNS over HTTPS (DoH)).</t>
      </section>
      <section anchor="maintain-interoperability" numbered="true" removeInRFC="false" toc="include" pn="section-3.4">
        <name slugifiedName="name-maintain-interoperability">Maintain Interoperability</name>
        <t indent="0" pn="section-3.4-1">It is important to note that neither the Transport Services API <xref target="RFC9622" format="default" sectionFormat="of" derivedContent="RFC9622"/> nor the guidelines for implementation of the Transport Services System <xref target="RFC9623" format="default" sectionFormat="of" derivedContent="RFC9623"/> define new protocols or protocol capabilities that affect what is communicated across the network. A Transport Services System <bcp14>MUST NOT</bcp14> require that a peer on the other side of a connection use the same API or implementation. A Transport Services Implementation acting as a connection initiator is able to communicate with any existing Endpoint that implements the transport protocol(s) and all the required Properties selected. Similarly, a Transport Services Implementation acting as a Listener can receive connections for any protocol that is supported from an existing initiator that implements the protocol, independently of whether or not the initiator uses the Transport Services System.</t>
        <t indent="0" pn="section-3.4-2">A Transport Services Implementation makes decisions that select protocols and interfaces. In normal use, a given version of a Transport Services System <bcp14>SHOULD</bcp14> result in consistent protocol and interface selection decisions for the same network conditions, given the same set of Properties. This is intended to provide predictable outcomes to the application using the API.</t>
      </section>
      <section anchor="support-monitoring" numbered="true" removeInRFC="false" toc="include" pn="section-3.5">
        <name slugifiedName="name-support-monitoring">Support Monitoring</name>
        <t indent="0" pn="section-3.5-1">The Transport Services API increases the layer of abstraction for applications, and it enables greater automation below the API. Such increased
abstraction comes at the cost of increased complexity when application programmers, users, or system administrators
try to understand why any issues and failures may be happening.
A Transport Services System should therefore offer monitoring functions that
provide relevant debug and diagnostics information. For example, such monitoring functions could indicate the protocol(s) in use, the
number of open connections per protocol, and any statistics that these protocols may offer.</t>
      </section>
    </section>
    <section anchor="concepts" numbered="true" removeInRFC="false" toc="include" pn="section-4">
      <name slugifiedName="name-transport-services-architec">Transport Services Architecture and Concepts</name>
      <t indent="0" pn="section-4-1">This section describes the architecture non-normatively and explains the operation of a Transport Services Implementation. The concepts defined in this document are intended primarily for use in the documents and specifications that describe the Transport Services System. This includes the architecture, the Transport Services API, and the associated Transport Services Implementation. While the specific terminology can be used in some implementations, it is expected that there will remain a variety of terms used by running code.</t>
      <t indent="0" pn="section-4-2">The architecture divides the concepts for the Transport Services System into two categories:</t>
      <ol spacing="normal" type="1" indent="adaptive" start="1" pn="section-4-3"><li pn="section-4-3.1" derivedCounter="1.">
          <t indent="0" pn="section-4-3.1.1">API concepts, which are intended to be exposed to applications; and</t>
        </li>
        <li pn="section-4-3.2" derivedCounter="2.">
          <t indent="0" pn="section-4-3.2.1">System-implementation concepts, which are intended to be internally used by a Transport Services Implementation.</t>
        </li>
      </ol>
      <t indent="0" pn="section-4-4">The following diagram summarizes the top-level concepts in a Transport Services System and how they relate to one another.</t>
      <figure anchor="fig-abstractions" align="left" suppress-title="false" pn="figure-3">
        <name slugifiedName="name-concepts-and-relationships-">Concepts and Relationships in the Architecture of the Transport Services System</name>
        <artwork align="left" pn="section-4-5.1">
  +-----------------------------------------------------+
  |                    Application                      |
  +-+----------------+------^-------+--------^----------+
    |                |      |       |        |
  pre-               |     data     |      events
  establishment      |   transfer   |        |
    |        establishment  |   termination  |
    |                |      |       |        |
    |             +--v------v-------v+       |
  +-v-------------+   Connection(s)  +-------+----------+
  |  Transport    +--------+---------+                  |
  |  Services              |                            |
  |  API                   |  +-------------+           |
  +------------------------+--+  Framer(s)  |-----------+
                           |  +-------------+
  +------------------------|----------------------------+
  |  Transport             |                            |
  |  System                |        +-----------------+ |
  |  Implementation        |        |     Cached      | |
  |                        |        |      State      | |
  |  (Candidate Gathering) |        +-----------------+ |
  |                        |                            |
  |  (Candidate Racing)    |        +-----------------+ |
  |                        |        |     System      | |
  |                        |        |     Policy      | |
  |             +----------v-----+  +-----------------+ |
  |             |    Protocol    |                      |
  +-------------+    Stack(s)    +----------------------+
                +-------+--------+
                        V
+-----------------------------------------------------+
|               Network-Layer Interface               |
+-----------------------------------------------------+
</artwork>
      </figure>
      <t indent="0" pn="section-4-6">The Transport Services Implementation includes the Cached State and System Policy.</t>
      <t indent="0" pn="section-4-7">The System Policy provides input from an operating system or other global preferences that can constrain or influence how an implementation will gather Candidate Paths and Protocol Stacks and race the candidates when establishing a Connection. As the details of System Policy configuration and enforcement are largely dependent on the platform and implementation and do not affect application-level interoperability, the Transport Services API <xref target="RFC9622" format="default" sectionFormat="of" derivedContent="RFC9622"/> does not specify an interface for reading or writing System Policy.</t>
      <t indent="0" pn="section-4-8">The Cached State is the state and history that the Transport Services Implementation keeps for each set of associated Endpoints that have previously been used. An application ought to explicitly request any required or preferred Properties via the Transport Services API.</t>
      <section anchor="transport-services-api-concepts" numbered="true" removeInRFC="false" toc="include" pn="section-4.1">
        <name slugifiedName="name-transport-services-api-conc">Transport Services API Concepts</name>
        <t indent="0" pn="section-4.1-1">Fundamentally, a Transport Services API needs to provide Connection objects (<xref target="objects" format="default" sectionFormat="of" derivedContent="Section 4.1.2"/>) that allow applications to establish communication and then send and receive data. These could be exposed as handles or referenced objects, depending on the chosen programming language.</t>
        <t indent="0" pn="section-4.1-2">Beyond the Connection objects, there are several high-level groups of actions that any Transport Services API needs to provide:</t>
        <ul spacing="normal" bare="false" empty="false" indent="3" pn="section-4.1-3">
          <li pn="section-4.1-3.1">
            <t indent="0" pn="section-4.1-3.1.1">Preestablishment (<xref target="preestablishment" format="default" sectionFormat="of" derivedContent="Section 4.1.3"/>) encompasses the Properties that an application can pass to describe its intent, requirements, prohibitions, and preferences for its networking operations. These Properties apply to multiple transport protocols, unless otherwise specified. Properties specified during preestablishment can have a large impact on the rest of the interface: they modify how establishment occurs, influence the expectations around data transfer, and determine the set of events that will be supported.</t>
          </li>
          <li pn="section-4.1-3.2">
            <t indent="0" pn="section-4.1-3.2.1">Establishment (<xref target="establishment" format="default" sectionFormat="of" derivedContent="Section 4.1.4"/>) focuses on the actions that an application takes on the Connection objects to prepare for data transfer.</t>
          </li>
          <li pn="section-4.1-3.3">
            <t indent="0" pn="section-4.1-3.3.1">Data transfer (<xref target="datatransfer" format="default" sectionFormat="of" derivedContent="Section 4.1.5"/>) consists of how an application represents the data to be sent and received, the functions required to send and receive that data, and how the application is notified of the status of its data transfer.</t>
          </li>
          <li pn="section-4.1-3.4">
            <t indent="0" pn="section-4.1-3.4.1">Event handling (<xref target="events" format="default" sectionFormat="of" derivedContent="Section 4.1.6"/>) defines categories of notifications that an application can receive during the lifetime of a Connection. Events also provide opportunities for the application to interact with the underlying transport by querying state or updating maintenance options.</t>
          </li>
          <li pn="section-4.1-3.5">
            <t indent="0" pn="section-4.1-3.5.1">Termination (<xref target="termination" format="default" sectionFormat="of" derivedContent="Section 4.1.7"/>) focuses on the methods by which data transmission is stopped and connection state is torn down.</t>
          </li>
        </ul>
        <t indent="0" pn="section-4.1-4">The diagram below provides a high-level view of the actions and events during the lifetime of a Connection object. Note that some actions are alternatives (e.g., whether to initiate a connection or listen for incoming connections), while others are optional (e.g., setting Connection and Message Properties in preestablishment) or have been omitted for brevity and simplicity.</t>
        <figure anchor="fig-lifetime" align="left" suppress-title="false" pn="figure-4">
          <name slugifiedName="name-the-lifetime-of-a-connectio">The Lifetime of a Connection Object</name>
          <artwork align="left" pn="section-4.1-5.1">
	  
     Preestablishment     :       Established             : Termination
    -----------------     :       -----------             : -----------
                          :                               :
+-- Local Endpoint        :           Message             :
+-- Remote Endpoint       :    Receive() |                :
+-- Transport Properties  :       Send() |                :
+-- Security Parameters   :              |                :
|                         :              |                :
|               InitiateWithSend()       |        Close() :
|   +---------------+   Initiate() +-----+------+ Abort() :
+---+ Preconnection |-------------&gt;| Connection |-----------&gt; Closed
    +---------------+ Rendezvous() +------------+         :
   Listen() |             :           |     |             :
            |             :           |     v             :
            v             :           | Connection        :
    +----------+          :           |   Ready           :
    | Listener |----------------------+                   :
    +----------+  Connection Received                     :
                          :                               :
</artwork>
        </figure>
        <t indent="0" pn="section-4.1-6">In this diagram, the lifetime of a Connection object is divided into three phases:
preestablishment, the Established state, and termination of a Connection.</t>
        <t indent="0" pn="section-4.1-7">Preestablishment is based around a Preconnection object containing various
sub-objects that describe the Properties and parameters of desired Connections
(Local and Remote Endpoints, Transport Properties, and Security Parameters).
A Preconnection can be used to start listening for inbound connections --
in which case a Listener object is created -- or can be used to establish a new
connection directly using <tt>Initiate</tt> (for outbound connections) or <tt>Rendezvous</tt>
(for peer-to-peer connections).</t>
        <t indent="0" pn="section-4.1-8">Once a Connection is in the Established state, an application can send and receive
Message objects and can receive state updates.</t>
        <t indent="0" pn="section-4.1-9">Closing or aborting a Connection, either locally or from the peer, can terminate
a Connection.</t>
        <section anchor="endpoint-objects" numbered="true" removeInRFC="false" toc="include" pn="section-4.1.1">
          <name slugifiedName="name-endpoint-objects">Endpoint Objects</name>
          <t indent="0" pn="section-4.1.1-1">An Endpoint Identifier specifies one side of a transport connection.
  Endpoints can be Local Endpoints or Remote Endpoints, and the Endpoint Identifiers can respectively represent an identity
  that the application uses for the source or destination of a connection.
  An Endpoint Identifier can be specified at various levels of abstraction.
  An Endpoint Identifier at a higher level of abstraction (such as a hostname) can be resolved to more concrete identities
  (such as IP addresses). A Remote Endpoint Identifier can also represent a multicast group or anycast address.
  In the case of multicast, a multicast transport will be selected for communication.</t>
          <dl spacing="normal" indent="3" newline="false" pn="section-4.1.1-2">
            <dt pn="section-4.1.1-2.1">Remote Endpoint Identifier:</dt>
            <dd pn="section-4.1.1-2.2">The Remote Endpoint Identifier represents the application's identifier for a peer that can participate in a transport connection, for example, the combination of a DNS name for the peer and a service name/port.</dd>
            <dt pn="section-4.1.1-2.3">Local Endpoint Identifier:</dt>
            <dd pn="section-4.1.1-2.4">The Local Endpoint Identifier represents the application's identifier for itself that it uses for transport connections, for example, a local IP address and port.</dd>
          </dl>
        </section>
        <section anchor="objects" numbered="true" removeInRFC="false" toc="include" pn="section-4.1.2">
          <name slugifiedName="name-connections-and-related-obj">Connections and Related Objects</name>
          <dl spacing="normal" indent="3" newline="false" pn="section-4.1.2-1">
            <dt pn="section-4.1.2-1.1">Connection:</dt>
            <dd pn="section-4.1.2-1.2">A Connection object represents one or more active transport protocol instances that can send and/or receive Messages between Local and Remote Endpoints. It is an abstraction that represents the communication. The Connection object holds state pertaining to the underlying transport protocol instances and any ongoing data transfers. For example, an active Connection can represent a connection-oriented protocol such as TCP, or it can represent a fully specified 5-tuple for a connectionless protocol such as UDP, where the Connection remains an abstraction at the endpoints. It can also represent a pool of transport protocol instances, e.g., a set of TCP and QUIC connections to equivalent endpoints, or a stream of a multistreaming transport protocol instance. Connections can be created from a Preconnection or by a Listener.</dd>
            <dt pn="section-4.1.2-1.3">Preconnection:</dt>
            <dd pn="section-4.1.2-1.4">A Preconnection object is a representation of a Connection that has not yet been established. It has state that describes parameters of the Connection: the Local Endpoint Identifier from which that Connection will be established, the Remote Endpoint Identifier to which it will connect, and Transport Properties that influence the paths and protocols a Connection will use. A Preconnection can be either fully specified (representing a single possible Connection) or partially specified (representing a family of possible Connections). The Local Endpoint (<xref target="preestablishment" format="default" sectionFormat="of" derivedContent="Section 4.1.3"/>) is required for a Preconnection used to <tt>Listen</tt> for incoming Connections but is optional if it is used to <tt>Initiate</tt> a Connection. The Remote Endpoint Identifier is required in a Preconnection that is used to <tt>Initiate</tt> a Connection but is optional if it is used to <tt>Listen</tt> for incoming Connections. The Local Endpoint Identifier and the Remote Endpoint Identifier are both required if a peer-to-peer <tt>Rendezvous</tt> is to occur based on the Preconnection.</dd>
            <dt pn="section-4.1.2-1.5">Transport Properties:</dt>
            <dd pn="section-4.1.2-1.6">
              <t indent="0" pn="section-4.1.2-1.6.1">Transport Properties allow the application to express requirements, prohibitions, and preferences and configure a Transport Services Implementation.  There are three kinds of Transport Properties: </t>
              <dl spacing="normal" indent="3" newline="false" pn="section-4.1.2-1.6.2">
                <dt pn="section-4.1.2-1.6.2.1">Selection Properties (<xref target="preestablishment" format="default" sectionFormat="of" derivedContent="Section 4.1.3"/>):</dt>
                <dd pn="section-4.1.2-1.6.2.2">Selection Properties can only be specified on a Preconnection.</dd>
                <dt pn="section-4.1.2-1.6.2.3">Connection Properties (<xref target="preestablishment" format="default" sectionFormat="of" derivedContent="Section 4.1.3"/>):</dt>
                <dd pn="section-4.1.2-1.6.2.4">Connection Properties can be specified on a Preconnection and changed on the Connection.</dd>
                <dt pn="section-4.1.2-1.6.2.5">Message Properties (<xref target="datatransfer" format="default" sectionFormat="of" derivedContent="Section 4.1.5"/>):</dt>
                <dd pn="section-4.1.2-1.6.2.6">Message Properties can be specified as defaults on a Preconnection or a Connection and can also be specified during data transfer to affect specific Messages.</dd>
              </dl>
            </dd>
            <dt pn="section-4.1.2-1.7">Listener:</dt>
            <dd pn="section-4.1.2-1.8">A Listener object accepts incoming transport protocol connections from Remote Endpoints and generates corresponding Connection objects. It is created from a Preconnection object that specifies the type of incoming Connections it will accept.</dd>
          </dl>
        </section>
        <section anchor="preestablishment" numbered="true" removeInRFC="false" toc="include" pn="section-4.1.3">
          <name slugifiedName="name-preestablishment">Preestablishment</name>
          <dl spacing="normal" indent="3" newline="false" pn="section-4.1.3-1">
            <dt pn="section-4.1.3-1.1">Selection Properties:</dt>
            <dd pn="section-4.1.3-1.2">Selection Properties consist of the Properties that an application can set to influence the selection of paths between the Local and Remote Endpoints, influence the selection of transport protocols, or configure the behavior of generic transport protocol features. These Properties can take the form of requirements, prohibitions, or preferences. Examples of Properties that influence path selection include the interface type (such as a Wi-Fi connection or a Cellular LTE connection), requirements around the largest Message that can be sent, or preferences for throughput and latency. Examples of Properties that influence protocol selection and configuration of transport protocol features include reliability, multipath support, and support for TCP Fast Open.</dd>
            <dt pn="section-4.1.3-1.3">Connection Properties:</dt>
            <dd pn="section-4.1.3-1.4">Connection Properties are used to configure protocol-specific options and control per-connection behavior of a Transport Services Implementation; for example, a protocol-specific Connection Property can express that if TCP is used, the implementation ought to use the User Timeout Option. Note that the presence of such a property does not require that a specific protocol be used. In general, these Properties do not explicitly determine the selection of paths or protocols but can be used by an implementation during Connection establishment. Connection Properties are specified on a Preconnection prior to Connection establishment and can be modified on the Connection later. Changes made to Connection Properties after Connection establishment take effect on a best-effort basis.</dd>
            <dt pn="section-4.1.3-1.5">Security Parameters:</dt>
            <dd pn="section-4.1.3-1.6">Security Parameters define an application's requirements for authentication and encryption on a Connection. They are used by transport security protocols (such as those described in <xref target="RFC8922" format="default" sectionFormat="of" derivedContent="RFC8922"/>) to establish secure Connections. Examples of parameters that can be set include local identities, private keys, supported cryptographic algorithms, and requirements for validating trust of remote identities. Security Parameters are primarily associated with a Preconnection object, but Properties related to identities can be associated directly with Endpoints.</dd>
          </dl>
        </section>
        <section anchor="establishment" numbered="true" removeInRFC="false" toc="include" pn="section-4.1.4">
          <name slugifiedName="name-establishment-actions">Establishment Actions</name>
          <dl spacing="normal" indent="3" newline="false" pn="section-4.1.4-1">
            <dt pn="section-4.1.4-1.1">Initiate:</dt>
            <dd pn="section-4.1.4-1.2">The primary action that an application can take to create a Connection to a Remote Endpoint and prepare any required local or remote state to enable the transmission of Messages. For some protocols, this will initiate a client-to-server-style handshake; for other protocols, this will just establish local state (e.g., with connectionless protocols such as UDP). The process of identifying options for connecting, such as resolution of the Remote Endpoint Identifier, occurs in response to calling <tt>Initiate</tt>.</dd>
            <dt pn="section-4.1.4-1.3">Listen:</dt>
            <dd pn="section-4.1.4-1.4">Enables a Listener to accept incoming connections. The Listener will then create Connection objects as incoming connections are accepted (<xref target="events" format="default" sectionFormat="of" derivedContent="Section 4.1.6"/>). Listeners by default register with multiple paths, protocols, and Local Endpoints, unless constrained by Selection Properties and/or the specified Local Endpoint Identifier(s). Connections can be accepted on any of the available paths or endpoints.</dd>
            <dt pn="section-4.1.4-1.5">Rendezvous:</dt>
            <dd pn="section-4.1.4-1.6">The action of establishing a peer-to-peer connection with a Remote Endpoint. It simultaneously attempts to initiate a connection to
a Remote Endpoint while listening for an incoming connection from that
Endpoint.  The process of identifying options for the connection, such
as resolution of the Remote Endpoint Identifier(s), occurs in response to calling <tt>Rendezvous</tt>.
As with Listeners, the set of local paths and endpoints is constrained
by Selection Properties. If successful, calling <tt>Rendezvous</tt> generates and asynchronously returns a
Connection object to represent the established peer-to-peer connection.
The processes by which connections are initiated during a <tt>Rendezvous</tt>
action will depend on the set of Local and Remote Endpoints configured on
the Preconnection. For example, if the Local and Remote Endpoints are TCP
host candidates, then a TCP simultaneous open <xref target="RFC9293" format="default" sectionFormat="of" derivedContent="RFC9293"/> might be performed.
However, if the set of Local Endpoints includes server-reflexive
candidates, such as those provided by STUN (Session Traversal Utilities
for NAT) <xref target="RFC8489" format="default" sectionFormat="of" derivedContent="RFC8489"/>, a <tt>Rendezvous</tt> action will race
candidates in the style of the ICE (Interactive Connectivity Establishment)
algorithm <xref target="RFC8445" format="default" sectionFormat="of" derivedContent="RFC8445"/> to perform NAT
binding discovery and initiate a peer-to-peer connection.</dd>
          </dl>
        </section>
        <section anchor="datatransfer" numbered="true" removeInRFC="false" toc="include" pn="section-4.1.5">
          <name slugifiedName="name-data-transfer-objects-and-a">Data Transfer Objects and Actions</name>
          <dl spacing="normal" indent="3" newline="false" pn="section-4.1.5-1">
            <dt pn="section-4.1.5-1.1">Message:</dt>
            <dd pn="section-4.1.5-1.2">A Message object is a unit of data that can be represented as bytes that can be transferred between two endpoints over a transport connection. The bytes within a Message are assumed to be ordered. If an application does not care about the order in which a peer receives two distinct spans of bytes, those spans of bytes are considered independent Messages. Messages are sent in the payload of IP packets. One packet can carry one or more Messages or parts of a Message.</dd>
            <dt pn="section-4.1.5-1.3">Message Properties:</dt>
            <dd pn="section-4.1.5-1.4">Message Properties are used to specify details about Message transmission. They can be specified directly on individual Messages or can be set on a Preconnection or Connection as defaults. These Properties might only apply to how a Message is sent (such as how the transport will treat prioritization and reliability) but can also include Properties that specific protocols encode and communicate to the Remote Endpoint. When receiving Messages, Message Properties can contain information about the received Message, such as metadata generated at the receiver and information signaled by the Remote Endpoint. For example, a Message can be marked with a Message Property indicating that it is the final Message on a Connection.</dd>
            <dt pn="section-4.1.5-1.5">Send:</dt>
            <dd pn="section-4.1.5-1.6">The <tt>Send</tt> action transmits a Message over a Connection to the Remote Endpoint. The interface to <tt>Send</tt> can accept Message Properties specific to how the Message content is to be sent. The status of the <tt>Send</tt> action is delivered back to the sending application in an event (<xref target="events" format="default" sectionFormat="of" derivedContent="Section 4.1.6"/>).</dd>
            <dt pn="section-4.1.5-1.7">Receive:</dt>
            <dd pn="section-4.1.5-1.8">The <tt>Receive</tt> action indicates that the application is ready to asynchronously accept a Message over a Connection from a Remote Endpoint, while the Message content itself will be delivered in an event (<xref target="events" format="default" sectionFormat="of" derivedContent="Section 4.1.6"/>). The interface to <tt>Receive</tt> can include Message Properties specific to the Message that is to be delivered to the application.</dd>
            <dt pn="section-4.1.5-1.9">Framer:</dt>
            <dd pn="section-4.1.5-1.10">A Framer is a data translation layer that can be added to a Connection. Framers allow extending a Connection's Protocol Stack to define how to encapsulate or encode outbound Messages and how to decapsulate or decode inbound data into Messages. In this way, Message boundaries can be preserved when using a Connection object, even with a protocol that otherwise presents unstructured streams, such as TCP. This is designed based on the fact that many of the current application protocols evolved over TCP, which does not provide Message boundary preservation, and since many of these protocols require Message boundaries to function, each application-layer protocol has defined its own framing. For example, when an HTTP application sends and receives HTTP Messages over a byte-stream transport, it must parse the boundaries of HTTP Messages from the stream of bytes.</dd>
          </dl>
        </section>
        <section anchor="events" numbered="true" removeInRFC="false" toc="include" pn="section-4.1.6">
          <name slugifiedName="name-event-handling">Event Handling</name>
          <t indent="0" pn="section-4.1.6-1">The following categories of events can be delivered to an application:</t>
          <dl spacing="normal" indent="3" newline="false" pn="section-4.1.6-2">
            <dt pn="section-4.1.6-2.1">Connection Ready:</dt>
            <dd pn="section-4.1.6-2.2">Signals to an application that a given Connection is ready to send and/or receive Messages. If the Connection relies on handshakes to establish state between peers, then it is assumed that these steps have been taken.</dd>
            <dt pn="section-4.1.6-2.3">Connection Closed:</dt>
            <dd pn="section-4.1.6-2.4">Signals to an application that a given Connection is no longer usable for sending or receiving Messages. The event delivers a reason or error to the application that describes the nature of the termination.</dd>
            <dt pn="section-4.1.6-2.5">Connection Received:</dt>
            <dd pn="section-4.1.6-2.6">Signals to an application that a given Listener has received a Connection.</dd>
            <dt pn="section-4.1.6-2.7">Message Received:</dt>
            <dd pn="section-4.1.6-2.8">Delivers received Message content to the application, based on a <tt>Receive</tt> action. To allow an application to limit the occurrence of such events, each call to <tt>Receive</tt> will be paired with a single <tt>Receive</tt> event. This can include an error if the <tt>Receive</tt> action cannot be satisfied, e.g., due to the Connection being closed.</dd>
            <dt pn="section-4.1.6-2.9">Message Sent:</dt>
            <dd pn="section-4.1.6-2.10">Notifies the application of the status of its <tt>Send</tt> action. This might indicate a failure if the Message cannot be sent or might indicate that the Message has been processed by the Transport Services System.</dd>
            <dt pn="section-4.1.6-2.11">Path Properties Changed:</dt>
            <dd pn="section-4.1.6-2.12">Notifies the application that a Property of the Connection has changed that might influence how and where data is sent and/or received.</dd>
          </dl>
        </section>
        <section anchor="termination" numbered="true" removeInRFC="false" toc="include" pn="section-4.1.7">
          <name slugifiedName="name-termination-actions">Termination Actions</name>
          <dl spacing="normal" indent="3" newline="false" pn="section-4.1.7-1">
            <dt pn="section-4.1.7-1.1">Close:</dt>
            <dd pn="section-4.1.7-1.2">The action an application takes on a Connection to indicate that it no longer intends to send data or is no longer willing to receive data.  The protocol should signal this state to the Remote Endpoint if the transport protocol permits it. (Note that this is distinct from the concept of "half-closing" a bidirectional connection, such as when a FIN is sent in one direction of a TCP connection <xref target="RFC9293" format="default" sectionFormat="of" derivedContent="RFC9293"/>. The end of a stream can also be indicated using Message Properties when sending.)</dd>
            <dt pn="section-4.1.7-1.3">Abort:</dt>
            <dd pn="section-4.1.7-1.4"> The action the application takes on a Connection 
  to indicate that the Transport Services System
  should not attempt to deliver any outstanding data and that it should
  immediately close and drop the connection.  This is intended for immediate, usually abnormal, termination of a connection.</dd>
          </dl>
        </section>
        <section anchor="connection-groups" numbered="true" removeInRFC="false" toc="include" pn="section-4.1.8">
          <name slugifiedName="name-connection-groups">Connection Groups</name>
          <t indent="0" pn="section-4.1.8-1">A Connection Group is a set of Connections that shares Connection Properties and Cached State generated by protocols.
A Connection Group represents state for managing Connections within a single application and does not require end-to-end protocol signaling. For transport protocols that support multiplexing, only Connections within the same Connection Group are allowed to be multiplexed together.</t>
          <t indent="0" pn="section-4.1.8-2">The API allows a Connection to be created from another Connection. This adds the new Connection to the Connection Group. A change to one of the Connection Properties on any Connection in the Connection Group automatically changes the Connection Property for all others. All Connections in a Connection Group share the same set of Connection Properties except for the Connection Priority. These Connection Properties are said to be entangled.</t>
          <t indent="0" pn="section-4.1.8-3">Passive Connections can also be added to a Connection Group, e.g., when a Listener receives a new Connection that is just a new stream of an already-active multistreaming protocol
instance.</t>
          <t indent="0" pn="section-4.1.8-4">While Connection Groups are managed by the Transport Services Implementation, an application can define different Connection Contexts for different Connection Groups to explicitly control caching boundaries, as discussed in <xref target="conn-context" format="default" sectionFormat="of" derivedContent="Section 4.2.3"/>.</t>
        </section>
      </section>
      <section anchor="transport-services-implementation" numbered="true" removeInRFC="false" toc="include" pn="section-4.2">
        <name slugifiedName="name-transport-services-implemen">Transport Services Implementation</name>
        <t indent="0" pn="section-4.2-1">This section defines the key architectural concepts for the Transport Services Implementation within the Transport Services System.</t>
        <t indent="0" pn="section-4.2-2">The Transport Services System consists of the Transport Services Implementation and the Transport Services API.
The Transport Services Implementation consists of all objects and protocol instances used internally to a system or library to implement the functionality needed to provide a transport service across a network, as required by the abstract interface.</t>
        <dl spacing="normal" indent="3" newline="false" pn="section-4.2-3">
          <dt pn="section-4.2-3.1">Path:</dt>
          <dd pn="section-4.2-3.2">Represents an available set of Properties that a Local Endpoint can use to communicate with a Remote Endpoint, such as routes, addresses, and physical and virtual network interfaces.</dd>
          <dt pn="section-4.2-3.3">Protocol Instance:</dt>
          <dd pn="section-4.2-3.4">A single instance of one protocol, including any state necessary to establish connectivity or send and receive Messages.</dd>
          <dt pn="section-4.2-3.5">Protocol Stack:</dt>
          <dd pn="section-4.2-3.6">A set of protocol instances (including relevant application, security, transport, or Internet protocols) that are used together to establish connectivity or send and receive Messages. A single stack can be simple (e.g., one application stream carried over TCP running over IP) or complex (e.g,. multiple application streams carried over a multipath transport protocol using multiple subflows over IP).</dd>
          <dt pn="section-4.2-3.7">Candidate Path:</dt>
          <dd pn="section-4.2-3.8">One path that is available to an application and conforms to the Selection Properties and System Policy, of which there can be several. Candidate Paths are identified during the gathering phase (<xref target="gathering" format="default" sectionFormat="of" derivedContent="Section 4.2.1"/>) and can be used during the racing phase (<xref target="racing" format="default" sectionFormat="of" derivedContent="Section 4.2.2"/>).</dd>
          <dt pn="section-4.2-3.9">Candidate Protocol Stack:</dt>
          <dd pn="section-4.2-3.10">One Protocol Stack that can be used by an application for a connection, for which there can be several candidates. Candidate Protocol Stacks are identified during the gathering phase (<xref target="gathering" format="default" sectionFormat="of" derivedContent="Section 4.2.1"/>) and are started during the racing phase (<xref target="racing" format="default" sectionFormat="of" derivedContent="Section 4.2.2"/>).</dd>
          <dt pn="section-4.2-3.11">System Policy:</dt>
          <dd pn="section-4.2-3.12">The input from an operating system or other global preferences that can constrain or influence how an implementation will gather Candidate Paths and Candidate Protocol Stacks (<xref target="gathering" format="default" sectionFormat="of" derivedContent="Section 4.2.1"/>) and race the candidates during establishment (<xref target="racing" format="default" sectionFormat="of" derivedContent="Section 4.2.2"/>). Specific aspects of the System Policy apply to either all Connections or only certain Connections, depending on the runtime context and Properties of the Connection.</dd>
          <dt pn="section-4.2-3.13">Cached State:</dt>
          <dd pn="section-4.2-3.14">The state and history that the implementation keeps for each set of associated Endpoints that have been used previously. This can include DNS results, TLS session state, previous success and quality of transport protocols over certain paths, as well as other information.  This caching does not imply that the same decisions are necessarily made for subsequent connections; rather, it means that Cached State is used by a Transport Services Implementation to inform functions such as choosing the candidates to be raced, selecting appropriate transport parameters, etc. An application <bcp14>SHOULD NOT</bcp14> rely on specific caching behavior; instead, it ought to explicitly request any required or preferred Properties via the Transport Services API.

</dd>
        </dl>
        <section anchor="gathering" numbered="true" removeInRFC="false" toc="include" pn="section-4.2.1">
          <name slugifiedName="name-candidate-gathering">Candidate Gathering</name>
          <dl spacing="normal" indent="3" newline="false" pn="section-4.2.1-1">
            <dt pn="section-4.2.1-1.1">Candidate Path Selection:</dt>
            <dd pn="section-4.2.1-1.2">Candidate Path Selection represents the act of choosing one or more paths that are available to use based on the Selection Properties and any available Local and Remote Endpoint Identifiers provided by the application, as well as the policies and heuristics of a Transport Services Implementation.</dd>
            <dt pn="section-4.2.1-1.3">Candidate Protocol Selection:</dt>
            <dd pn="section-4.2.1-1.4">Candidate Protocol Selection represents the act of choosing one or more sets of Protocol Stacks that are available to use based on the Transport Properties provided by the application, and the heuristics or policies within the Transport Services Implementation.</dd>
          </dl>
        </section>
        <section anchor="racing" numbered="true" removeInRFC="false" toc="include" pn="section-4.2.2">
          <name slugifiedName="name-candidate-racing">Candidate Racing</name>
          <t indent="0" pn="section-4.2.2-1">Connection establishment attempts for a set of candidates may be performed simultaneously, synchronously, serially, or using some combination of all of these. We refer to this process as racing, borrowing terminology from Happy Eyeballs <xref target="RFC8305" format="default" sectionFormat="of" derivedContent="RFC8305"/>.</t>
          <dl spacing="normal" indent="3" newline="false" pn="section-4.2.2-2">
            <dt pn="section-4.2.2-2.1">Protocol Option Racing:</dt>
            <dd pn="section-4.2.2-2.2">Protocol Option Racing is the act of attempting to establish, or scheduling attempts to establish, multiple Protocol Stacks that differ based on the composition of protocols or the options used for protocols.</dd>
            <dt pn="section-4.2.2-2.3">Path Racing:</dt>
            <dd pn="section-4.2.2-2.4">Path Racing is the act of attempting to establish, or scheduling attempts to establish, multiple Protocol Stacks that differ based on a selection from the available paths. Since different paths will have distinct configurations (see <xref target="RFC7556" format="default" sectionFormat="of" derivedContent="RFC7556"/>)
for local addresses and DNS servers, attempts across different paths will perform separate DNS resolution steps, which can lead to further racing of the resolved Remote Endpoint Identifiers.</dd>
            <dt pn="section-4.2.2-2.5">Remote Endpoint Racing:</dt>
            <dd pn="section-4.2.2-2.6">Remote Endpoint Racing is the act of attempting to establish, or scheduling attempts to establish, multiple Protocol Stacks that differ based on the specific representation of the Remote Endpoint Identifier, such as a particular IP address that was resolved from a DNS hostname.</dd>
          </dl>
        </section>
        <section anchor="conn-context" numbered="true" removeInRFC="false" toc="include" pn="section-4.2.3">
          <name slugifiedName="name-separating-connection-conte">Separating Connection Contexts</name>
          <t indent="0" pn="section-4.2.3-1">A Transport Services Implementation can by default share stored Properties across Connections within an application, such as cached protocol state, cached path state, and heuristics. This provides efficiency and convenience for the application, since the Transport Services System can automatically optimize behavior.</t>
          <t indent="0" pn="section-4.2.3-2">The Transport Services API can allow applications to explicitly define Connection Contexts that force separation of Cached State and Protocol Stacks.
For example, a web browser application could use Connection Contexts with separate caches when implementing different tabs. Possible reasons to isolate Connections using separate Connection Contexts include privacy concerns regarding:</t>
          <ul spacing="normal" bare="false" empty="false" indent="3" pn="section-4.2.3-3">
            <li pn="section-4.2.3-3.1">
              <t indent="0" pn="section-4.2.3-3.1.1">reusing cached protocol state, as this can lead to linkability. Sensitive state could include TLS session state <xref target="RFC8446" format="default" sectionFormat="of" derivedContent="RFC8446"/> and HTTP cookies <xref target="RFC6265" format="default" sectionFormat="of" derivedContent="RFC6265"/>. These concerns could be addressed using Connection Contexts with separate caches, such as for different browser tabs.</t>
            </li>
            <li pn="section-4.2.3-3.2">
              <t indent="0" pn="section-4.2.3-3.2.1">allowing Connections to multiplex together, which can tell a Remote Endpoint that all of the Connections are coming from the same application. Using Connection Contexts avoids the Connections being multiplexed in an HTTP/2 or QUIC stream.</t>
            </li>
          </ul>
        </section>
      </section>
    </section>
    <section anchor="iana-considerations" numbered="true" removeInRFC="false" toc="include" pn="section-5">
      <name slugifiedName="name-iana-considerations">IANA Considerations</name>
      <t indent="0" pn="section-5-1">This document has no IANA actions.</t>
    </section>
    <section anchor="security-and-privacy-considerations" numbered="true" removeInRFC="false" toc="include" pn="section-6">
      <name slugifiedName="name-security-and-privacy-consid">Security and Privacy Considerations</name>
      <t indent="0" pn="section-6-1">The Transport Services System does not recommend the use of specific security
protocols or algorithms. Its goal is to offer ease of use for existing protocols
by providing a generic security-related interface. Each provided interface
translates to an existing protocol-specific interface provided by supported
security protocols. For example, trust verification callbacks are common parts
of TLS APIs; a Transport Services API exposes similar functionality
<xref target="RFC8922" format="default" sectionFormat="of" derivedContent="RFC8922"/>.</t>
      <t indent="0" pn="section-6-2">As described above in <xref target="equivalence" format="default" sectionFormat="of" derivedContent="Section 3.3"/>, if a Transport Services Implementation races
between two different Protocol Stacks, both need to use the same security protocols
and options. However, a Transport Services Implementation can race different security
protocols, e.g., if the application explicitly specifies that it considers them
equivalent.</t>
      <t indent="0" pn="section-6-3">The application controls whether
information from previous racing attempts or other information
about past communications that was cached by
the Transport Services System is used during establishment.
This allows applications to make
trade-offs between efficiency (through racing) and privacy (via information that
might leak from the cache toward an on-path observer). Some applications have
features (e.g., "incognito mode") that align with this functionality.</t>
      <t indent="0" pn="section-6-4">Applications need to ensure that they use security APIs appropriately. In cases
where applications use an interface to provide sensitive keying material, e.g.,
access to private keys or copies of pre-shared keys (PSKs), key use needs to be
validated and scoped to the intended protocols and roles. For example, if an
application provides a certificate to only be used as client authentication for
outbound TLS and QUIC connections, the Transport Services System <bcp14>MUST NOT</bcp14> use this
automatically in other contexts (such as server authentication for inbound
connections or in other security protocol handshakes that are not equivalent to TLS).

</t>
      <t indent="0" pn="section-6-5">A Transport Services System <bcp14>MUST NOT</bcp14> automatically fall back from
secure protocols to insecure protocols or fall back to weaker versions of secure
protocols (see <xref target="equivalence" format="default" sectionFormat="of" derivedContent="Section 3.3"/>). For example, if an application requests a specific version of TLS
but the desired version of TLS is not available, its connection will fail.
As described in <xref target="equivalence" format="default" sectionFormat="of" derivedContent="Section 3.3"/>, the Transport Services API can allow applications
to specify minimum versions that are allowed to be used by the Transport Services System.</t>
    </section>
  </middle>
  <back>
    <references pn="section-7">
      <name slugifiedName="name-references">References</name>
      <references anchor="sec-normative-references" pn="section-7.1">
        <name slugifiedName="name-normative-references">Normative References</name>
        <reference anchor="RFC2119" target="https://www.rfc-editor.org/info/rfc2119" quoteTitle="true" derivedAnchor="RFC2119">
          <front>
            <title>Key words for use in RFCs to Indicate Requirement Levels</title>
            <author fullname="S. Bradner" initials="S." surname="Bradner"/>
            <date month="March" year="1997"/>
            <abstract>
              <t indent="0">In many standards track documents several words are used to signify the requirements in the specification. These words are often capitalized. This document defines these words as they should be interpreted in IETF documents. This document specifies an Internet Best Current Practices for the Internet Community, and requests discussion and suggestions for improvements.</t>
            </abstract>
          </front>
          <seriesInfo name="BCP" value="14"/>
          <seriesInfo name="RFC" value="2119"/>
          <seriesInfo name="DOI" value="10.17487/RFC2119"/>
        </reference>
        <reference anchor="RFC8174" target="https://www.rfc-editor.org/info/rfc8174" quoteTitle="true" derivedAnchor="RFC8174">
          <front>
            <title>Ambiguity of Uppercase vs Lowercase in RFC 2119 Key Words</title>
            <author fullname="B. Leiba" initials="B." surname="Leiba"/>
            <date month="May" year="2017"/>
            <abstract>
              <t indent="0">RFC 2119 specifies common key words that may be used in protocol specifications. This document aims to reduce the ambiguity by clarifying that only UPPERCASE usage of the key words have the defined special meanings.</t>
            </abstract>
          </front>
          <seriesInfo name="BCP" value="14"/>
          <seriesInfo name="RFC" value="8174"/>
          <seriesInfo name="DOI" value="10.17487/RFC8174"/>
        </reference>
      </references>
      <references anchor="sec-informative-references" pn="section-7.2">
        <name slugifiedName="name-informative-references">Informative References</name>
        <reference anchor="POSIX" target="https://ieeexplore.ieee.org/document/10555529" quoteTitle="true" derivedAnchor="POSIX">
          <front>
            <title>IEEE/Open Group Standard for Information Technology - Portable Operating System Interface (POSIX(TM)) Base Specifications, Issue 8</title>
            <author>
              <organization showOnFrontPage="true"/>
            </author>
            <date year="2024"/>
          </front>
          <seriesInfo name="IEEE Std" value="1003.1-2024"/>
          <seriesInfo name="DOI" value="10.1109/IEEESTD.2024.10555529"/>
        </reference>
        <reference anchor="RFC5482" target="https://www.rfc-editor.org/info/rfc5482" quoteTitle="true" derivedAnchor="RFC5482">
          <front>
            <title>TCP User Timeout Option</title>
            <author fullname="L. Eggert" initials="L." surname="Eggert"/>
            <author fullname="F. Gont" initials="F." surname="Gont"/>
            <date month="March" year="2009"/>
            <abstract>
              <t indent="0">The TCP user timeout controls how long transmitted data may remain unacknowledged before a connection is forcefully closed. It is a local, per-connection parameter. This document specifies a new TCP option -- the TCP User Timeout Option -- that allows one end of a TCP connection to advertise its current user timeout value. This information provides advice to the other end of the TCP connection to adapt its user timeout accordingly. Increasing the user timeouts on both ends of a TCP connection allows it to survive extended periods without end-to-end connectivity. Decreasing the user timeouts allows busy servers to explicitly notify their clients that they will maintain the connection state only for a short time without connectivity. [STANDARDS-TRACK]</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="5482"/>
          <seriesInfo name="DOI" value="10.17487/RFC5482"/>
        </reference>
        <reference anchor="RFC6265" target="https://www.rfc-editor.org/info/rfc6265" quoteTitle="true" derivedAnchor="RFC6265">
          <front>
            <title>HTTP State Management Mechanism</title>
            <author fullname="A. Barth" initials="A." surname="Barth"/>
            <date month="April" year="2011"/>
            <abstract>
              <t indent="0">This document defines the HTTP Cookie and Set-Cookie header fields. These header fields can be used by HTTP servers to store state (called cookies) at HTTP user agents, letting the servers maintain a stateful session over the mostly stateless HTTP protocol. Although cookies have many historical infelicities that degrade their security and privacy, the Cookie and Set-Cookie header fields are widely used on the Internet. This document obsoletes RFC 2965. [STANDARDS-TRACK]</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="6265"/>
          <seriesInfo name="DOI" value="10.17487/RFC6265"/>
        </reference>
        <reference anchor="RFC7556" target="https://www.rfc-editor.org/info/rfc7556" quoteTitle="true" derivedAnchor="RFC7556">
          <front>
            <title>Multiple Provisioning Domain Architecture</title>
            <author fullname="D. Anipko" initials="D." role="editor" surname="Anipko"/>
            <date month="June" year="2015"/>
            <abstract>
              <t indent="0">This document is a product of the work of the Multiple Interfaces Architecture Design team. It outlines a solution framework for some of the issues experienced by nodes that can be attached to multiple networks simultaneously. The framework defines the concept of a Provisioning Domain (PvD), which is a consistent set of network configuration information. PvD-aware nodes learn PvD-specific information from the networks they are attached to and/or other sources. PvDs are used to enable separation and configuration consistency in the presence of multiple concurrent connections.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="7556"/>
          <seriesInfo name="DOI" value="10.17487/RFC7556"/>
        </reference>
        <reference anchor="RFC8095" target="https://www.rfc-editor.org/info/rfc8095" quoteTitle="true" derivedAnchor="RFC8095">
          <front>
            <title>Services Provided by IETF Transport Protocols and Congestion Control Mechanisms</title>
            <author fullname="G. Fairhurst" initials="G." role="editor" surname="Fairhurst"/>
            <author fullname="B. Trammell" initials="B." role="editor" surname="Trammell"/>
            <author fullname="M. Kuehlewind" initials="M." role="editor" surname="Kuehlewind"/>
            <date month="March" year="2017"/>
            <abstract>
              <t indent="0">This document describes, surveys, and classifies the protocol mechanisms provided by existing IETF protocols, as background for determining a common set of transport services. It examines the Transmission Control Protocol (TCP), Multipath TCP, the Stream Control Transmission Protocol (SCTP), the User Datagram Protocol (UDP), UDP-Lite, the Datagram Congestion Control Protocol (DCCP), the Internet Control Message Protocol (ICMP), the Real-Time Transport Protocol (RTP), File Delivery over Unidirectional Transport / Asynchronous Layered Coding (FLUTE/ALC) for Reliable Multicast, NACK- Oriented Reliable Multicast (NORM), Transport Layer Security (TLS), Datagram TLS (DTLS), and the Hypertext Transport Protocol (HTTP), when HTTP is used as a pseudotransport. This survey provides background for the definition of transport services within the TAPS working group.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="8095"/>
          <seriesInfo name="DOI" value="10.17487/RFC8095"/>
        </reference>
        <reference anchor="RFC8170" target="https://www.rfc-editor.org/info/rfc8170" quoteTitle="true" derivedAnchor="RFC8170">
          <front>
            <title>Planning for Protocol Adoption and Subsequent Transitions</title>
            <author fullname="D. Thaler" initials="D." role="editor" surname="Thaler"/>
            <date month="May" year="2017"/>
            <abstract>
              <t indent="0">Over the many years since the introduction of the Internet Protocol, we have seen a number of transitions throughout the protocol stack, such as deploying a new protocol, or updating or replacing an existing protocol. Many protocols and technologies were not designed to enable smooth transition to alternatives or to easily deploy extensions; thus, some transitions, such as the introduction of IPv6, have been difficult. This document attempts to summarize some basic principles to enable future transitions, and it also summarizes what makes for a good transition plan.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="8170"/>
          <seriesInfo name="DOI" value="10.17487/RFC8170"/>
        </reference>
        <reference anchor="RFC8303" target="https://www.rfc-editor.org/info/rfc8303" quoteTitle="true" derivedAnchor="RFC8303">
          <front>
            <title>On the Usage of Transport Features Provided by IETF Transport Protocols</title>
            <author fullname="M. Welzl" initials="M." surname="Welzl"/>
            <author fullname="M. Tuexen" initials="M." surname="Tuexen"/>
            <author fullname="N. Khademi" initials="N." surname="Khademi"/>
            <date month="February" year="2018"/>
            <abstract>
              <t indent="0">This document describes how the transport protocols Transmission Control Protocol (TCP), MultiPath TCP (MPTCP), Stream Control Transmission Protocol (SCTP), User Datagram Protocol (UDP), and Lightweight User Datagram Protocol (UDP-Lite) expose services to applications and how an application can configure and use the features that make up these services. It also discusses the service provided by the Low Extra Delay Background Transport (LEDBAT) congestion control mechanism. The description results in a set of transport abstractions that can be exported in a transport services (TAPS) API.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="8303"/>
          <seriesInfo name="DOI" value="10.17487/RFC8303"/>
        </reference>
        <reference anchor="RFC8305" target="https://www.rfc-editor.org/info/rfc8305" quoteTitle="true" derivedAnchor="RFC8305">
          <front>
            <title>Happy Eyeballs Version 2: Better Connectivity Using Concurrency</title>
            <author fullname="D. Schinazi" initials="D." surname="Schinazi"/>
            <author fullname="T. Pauly" initials="T." surname="Pauly"/>
            <date month="December" year="2017"/>
            <abstract>
              <t indent="0">Many communication protocols operating over the modern Internet use hostnames. These often resolve to multiple IP addresses, each of which may have different performance and connectivity characteristics. Since specific addresses or address families (IPv4 or IPv6) may be blocked, broken, or sub-optimal on a network, clients that attempt multiple connections in parallel have a chance of establishing a connection more quickly. This document specifies requirements for algorithms that reduce this user-visible delay and provides an example algorithm, referred to as "Happy Eyeballs". This document obsoletes the original algorithm description in RFC 6555.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="8305"/>
          <seriesInfo name="DOI" value="10.17487/RFC8305"/>
        </reference>
        <reference anchor="RFC8445" target="https://www.rfc-editor.org/info/rfc8445" quoteTitle="true" derivedAnchor="RFC8445">
          <front>
            <title>Interactive Connectivity Establishment (ICE): A Protocol for Network Address Translator (NAT) Traversal</title>
            <author fullname="A. Keranen" initials="A." surname="Keranen"/>
            <author fullname="C. Holmberg" initials="C." surname="Holmberg"/>
            <author fullname="J. Rosenberg" initials="J." surname="Rosenberg"/>
            <date month="July" year="2018"/>
            <abstract>
              <t indent="0">This document describes a protocol for Network Address Translator (NAT) traversal for UDP-based communication. This protocol is called Interactive Connectivity Establishment (ICE). ICE makes use of the Session Traversal Utilities for NAT (STUN) protocol and its extension, Traversal Using Relay NAT (TURN).</t>
              <t indent="0">This document obsoletes RFC 5245.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="8445"/>
          <seriesInfo name="DOI" value="10.17487/RFC8445"/>
        </reference>
        <reference anchor="RFC8446" target="https://www.rfc-editor.org/info/rfc8446" quoteTitle="true" derivedAnchor="RFC8446">
          <front>
            <title>The Transport Layer Security (TLS) Protocol Version 1.3</title>
            <author fullname="E. Rescorla" initials="E." surname="Rescorla"/>
            <date month="August" year="2018"/>
            <abstract>
              <t indent="0">This document specifies version 1.3 of the Transport Layer Security (TLS) protocol. TLS allows client/server applications to communicate over the Internet in a way that is designed to prevent eavesdropping, tampering, and message forgery.</t>
              <t indent="0">This document updates RFCs 5705 and 6066, and obsoletes RFCs 5077, 5246, and 6961. This document also specifies new requirements for TLS 1.2 implementations.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="8446"/>
          <seriesInfo name="DOI" value="10.17487/RFC8446"/>
        </reference>
        <reference anchor="RFC8489" target="https://www.rfc-editor.org/info/rfc8489" quoteTitle="true" derivedAnchor="RFC8489">
          <front>
            <title>Session Traversal Utilities for NAT (STUN)</title>
            <author fullname="M. Petit-Huguenin" initials="M." surname="Petit-Huguenin"/>
            <author fullname="G. Salgueiro" initials="G." surname="Salgueiro"/>
            <author fullname="J. Rosenberg" initials="J." surname="Rosenberg"/>
            <author fullname="D. Wing" initials="D." surname="Wing"/>
            <author fullname="R. Mahy" initials="R." surname="Mahy"/>
            <author fullname="P. Matthews" initials="P." surname="Matthews"/>
            <date month="February" year="2020"/>
            <abstract>
              <t indent="0">Session Traversal Utilities for NAT (STUN) is a protocol that serves as a tool for other protocols in dealing with NAT traversal. It can be used by an endpoint to determine the IP address and port allocated to it by a NAT. It can also be used to check connectivity between two endpoints and as a keep-alive protocol to maintain NAT bindings. STUN works with many existing NATs and does not require any special behavior from them.</t>
              <t indent="0">STUN is not a NAT traversal solution by itself. Rather, it is a tool to be used in the context of a NAT traversal solution.</t>
              <t indent="0">This document obsoletes RFC 5389.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="8489"/>
          <seriesInfo name="DOI" value="10.17487/RFC8489"/>
        </reference>
        <reference anchor="RFC8922" target="https://www.rfc-editor.org/info/rfc8922" quoteTitle="true" derivedAnchor="RFC8922">
          <front>
            <title>A Survey of the Interaction between Security Protocols and Transport Services</title>
            <author fullname="T. Enghardt" initials="T." surname="Enghardt"/>
            <author fullname="T. Pauly" initials="T." surname="Pauly"/>
            <author fullname="C. Perkins" initials="C." surname="Perkins"/>
            <author fullname="K. Rose" initials="K." surname="Rose"/>
            <author fullname="C. Wood" initials="C." surname="Wood"/>
            <date month="October" year="2020"/>
            <abstract>
              <t indent="0">This document provides a survey of commonly used or notable network security protocols, with a focus on how they interact and integrate with applications and transport protocols. Its goal is to supplement efforts to define and catalog Transport Services by describing the interfaces required to add security protocols. This survey is not limited to protocols developed within the scope or context of the IETF, and those included represent a superset of features a Transport Services system may need to support.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="8922"/>
          <seriesInfo name="DOI" value="10.17487/RFC8922"/>
        </reference>
        <reference anchor="RFC8923" target="https://www.rfc-editor.org/info/rfc8923" quoteTitle="true" derivedAnchor="RFC8923">
          <front>
            <title>A Minimal Set of Transport Services for End Systems</title>
            <author fullname="M. Welzl" initials="M." surname="Welzl"/>
            <author fullname="S. Gjessing" initials="S." surname="Gjessing"/>
            <date month="October" year="2020"/>
            <abstract>
              <t indent="0">This document recommends a minimal set of Transport Services offered by end systems and gives guidance on choosing among the available mechanisms and protocols. It is based on the set of transport features in RFC 8303.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="8923"/>
          <seriesInfo name="DOI" value="10.17487/RFC8923"/>
        </reference>
        <reference anchor="RFC9000" target="https://www.rfc-editor.org/info/rfc9000" quoteTitle="true" derivedAnchor="RFC9000">
          <front>
            <title>QUIC: A UDP-Based Multiplexed and Secure Transport</title>
            <author fullname="J. Iyengar" initials="J." role="editor" surname="Iyengar"/>
            <author fullname="M. Thomson" initials="M." role="editor" surname="Thomson"/>
            <date month="May" year="2021"/>
            <abstract>
              <t indent="0">This document defines the core of the QUIC transport protocol. QUIC provides applications with flow-controlled streams for structured communication, low-latency connection establishment, and network path migration. QUIC includes security measures that ensure confidentiality, integrity, and availability in a range of deployment circumstances. Accompanying documents describe the integration of TLS for key negotiation, loss detection, and an exemplary congestion control algorithm.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="9000"/>
          <seriesInfo name="DOI" value="10.17487/RFC9000"/>
        </reference>
        <reference anchor="RFC9112" target="https://www.rfc-editor.org/info/rfc9112" quoteTitle="true" derivedAnchor="RFC9112">
          <front>
            <title>HTTP/1.1</title>
            <author fullname="R. Fielding" initials="R." role="editor" surname="Fielding"/>
            <author fullname="M. Nottingham" initials="M." role="editor" surname="Nottingham"/>
            <author fullname="J. Reschke" initials="J." role="editor" surname="Reschke"/>
            <date month="June" year="2022"/>
            <abstract>
              <t indent="0">The Hypertext Transfer Protocol (HTTP) is a stateless application-level protocol for distributed, collaborative, hypertext information systems. This document specifies the HTTP/1.1 message syntax, message parsing, connection management, and related security concerns.</t>
              <t indent="0">This document obsoletes portions of RFC 7230.</t>
            </abstract>
          </front>
          <seriesInfo name="STD" value="99"/>
          <seriesInfo name="RFC" value="9112"/>
          <seriesInfo name="DOI" value="10.17487/RFC9112"/>
        </reference>
        <reference anchor="RFC9113" target="https://www.rfc-editor.org/info/rfc9113" quoteTitle="true" derivedAnchor="RFC9113">
          <front>
            <title>HTTP/2</title>
            <author fullname="M. Thomson" initials="M." role="editor" surname="Thomson"/>
            <author fullname="C. Benfield" initials="C." role="editor" surname="Benfield"/>
            <date month="June" year="2022"/>
            <abstract>
              <t indent="0">This specification describes an optimized expression of the semantics of the Hypertext Transfer Protocol (HTTP), referred to as HTTP version 2 (HTTP/2). HTTP/2 enables a more efficient use of network resources and a reduced latency by introducing field compression and allowing multiple concurrent exchanges on the same connection.</t>
              <t indent="0">This document obsoletes RFCs 7540 and 8740.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="9113"/>
          <seriesInfo name="DOI" value="10.17487/RFC9113"/>
        </reference>
        <reference anchor="RFC9293" target="https://www.rfc-editor.org/info/rfc9293" quoteTitle="true" derivedAnchor="RFC9293">
          <front>
            <title>Transmission Control Protocol (TCP)</title>
            <author fullname="W. Eddy" initials="W." role="editor" surname="Eddy"/>
            <date month="August" year="2022"/>
            <abstract>
              <t indent="0">This document specifies the Transmission Control Protocol (TCP). TCP is an important transport-layer protocol in the Internet protocol stack, and it has continuously evolved over decades of use and growth of the Internet. Over this time, a number of changes have been made to TCP as it was specified in RFC 793, though these have only been documented in a piecemeal fashion. This document collects and brings those changes together with the protocol specification from RFC 793. This document obsoletes RFC 793, as well as RFCs 879, 2873, 6093, 6429, 6528, and 6691 that updated parts of RFC 793. It updates RFCs 1011 and 1122, and it should be considered as a replacement for the portions of those documents dealing with TCP requirements. It also updates RFC 5961 by adding a small clarification in reset handling while in the SYN-RECEIVED state. The TCP header control bits from RFC 793 have also been updated based on RFC 3168.</t>
            </abstract>
          </front>
          <seriesInfo name="STD" value="7"/>
          <seriesInfo name="RFC" value="9293"/>
          <seriesInfo name="DOI" value="10.17487/RFC9293"/>
        </reference>
        <reference anchor="RFC9622" target="https://www.rfc-editor.org/info/rfc9622" quoteTitle="true" derivedAnchor="RFC9622">
          <front>
            <title>An Abstract Application Programming Interface (API) for Transport Services</title>
            <author initials="B." surname="Trammell" fullname="Brian Trammell" role="editor">
              <organization showOnFrontPage="true">Google Switzerland GmbH</organization>
            </author>
            <author initials="M." surname="Welzl" fullname="Michael Welzl" role="editor">
              <organization showOnFrontPage="true">University of Oslo</organization>
            </author>
            <author initials="R." surname="Enghardt" fullname="Reese Enghardt">
              <organization showOnFrontPage="true">Netflix</organization>
            </author>
            <author initials="G." surname="Fairhurst" fullname="Gorry Fairhurst">
              <organization showOnFrontPage="true">University of Aberdeen</organization>
            </author>
            <author initials="M." surname="Kühlewind" fullname="Mirja Kühlewind">
              <organization showOnFrontPage="true">Ericsson</organization>
            </author>
            <author initials="C. S." surname="Perkins" fullname="Colin Perkins">
              <organization showOnFrontPage="true">University of Glasgow</organization>
            </author>
            <author initials="P.S." surname="Tiesel" fullname="Philipp S. Tiesel">
              <organization showOnFrontPage="true">SAP SE</organization>
            </author>
            <author initials="T." surname="Pauly" fullname="Tommy Pauly">
              <organization showOnFrontPage="true">Apple Inc.</organization>
            </author>
            <date month="January" year="2025"/>
          </front>
          <seriesInfo name="RFC" value="9622"/>
          <seriesInfo name="DOI" value="10.17487/RFC9622"/>
        </reference>
        <reference anchor="RFC9623" target="https://www.rfc-editor.org/info/rfc9623" quoteTitle="true" derivedAnchor="RFC9623">
          <front>
            <title>Implementing Interfaces to Transport Services</title>
            <author fullname="Anna Brunstrom" initials="A." surname="Brunstrom" role="editor">
              <organization showOnFrontPage="true">Karlstad University</organization>
            </author>
            <author fullname="Tommy Pauly" initials="T." surname="Pauly" role="editor">
              <organization showOnFrontPage="true">Apple Inc.</organization>
            </author>
            <author fullname="Reese Enghardt" initials="R." surname="Enghardt">
              <organization showOnFrontPage="true">Netflix</organization>
            </author>
            <author fullname="Philipp S. Tiesel" initials="P.S." surname="Tiesel">
              <organization showOnFrontPage="true">SAP SE</organization>
            </author>
            <author fullname="Michael Welzl" initials="M." surname="Welzl">
              <organization showOnFrontPage="true">University of Oslo</organization>
            </author>
            <date month="January" year="2025"/>
          </front>
          <seriesInfo name="RFC" value="9623"/>
          <seriesInfo name="DOI" value="10.17487/RFC9623"/>
        </reference>
      </references>
    </references>
    <section anchor="acknowledgements" numbered="false" removeInRFC="false" toc="include" pn="section-appendix.a">
      <name slugifiedName="name-acknowledgements">Acknowledgements</name>
      <t indent="0" pn="section-appendix.a-1">This work has received funding from the European Union's Horizon 2020 research
and innovation programme under grant agreements No. 644334 (NEAT), No. 688421
(MAMI), and No. 815178 (5GENESIS).</t>
      <t indent="0" pn="section-appendix.a-2">This work has been supported by:</t>
      <ul bare="false" empty="false" indent="3" spacing="normal" pn="section-appendix.a-3">
        <li pn="section-appendix.a-3.1">Leibniz Prize project funds from the DFG - German
Research Foundation: Gottfried Wilhelm Leibniz-Preis 2011 (FKZ FE 570/4-1).</li>
        <li pn="section-appendix.a-3.2">the UK Engineering and Physical Sciences
      Research Council under grant EP/R04144X/1.</li>
      </ul>
      <t indent="0" pn="section-appendix.a-4">Thanks to <contact fullname="Reese Enghardt"/>, <contact fullname="Max Franke"/>, <contact fullname="Mirja Kühlewind"/>, <contact fullname="Jonathan Lennox"/>, and
<contact fullname="Michael Welzl"/> for the discussions and feedback that helped shape the architecture
of the system described here.
Particular thanks are also due to <contact fullname="Philipp S. Tiesel"/> and <contact fullname="Christopher A. Wood"/>,
who were both coauthors of this specification as it progressed
through the Transport Services (TAPS) Working Group.
Thanks as well to <contact fullname="Stuart Cheshire"/>, <contact fullname="Josh Graessley"/>, <contact fullname="David Schinazi"/>,
and <contact fullname="Eric Kinnear"/> for their implementation and design efforts, including Happy
Eyeballs, that heavily influenced this work.</t>
    </section>
    <section anchor="authors-addresses" numbered="false" removeInRFC="false" toc="include" pn="section-appendix.b">
      <name slugifiedName="name-authors-addresses">Authors' Addresses</name>
      <author initials="T." surname="Pauly" fullname="Tommy Pauly" role="editor">
        <organization showOnFrontPage="true">Apple Inc.</organization>
        <address>
          <postal>
            <street>One Apple Park Way</street>
            <city>Cupertino</city>
            <region>CA</region>
            <code>95014</code>
            <country>United States of America</country>
          </postal>
          <email>tpauly@apple.com</email>
        </address>
      </author>
      <author initials="B." surname="Trammell" fullname="Brian Trammell" role="editor">
        <organization showOnFrontPage="true">Google Switzerland GmbH</organization>
        <address>
          <postal>
            <street>Gustav-Gull-Platz 1</street>
            <city>Zurich</city>
            <code>8004</code>
            <country>Switzerland</country>
          </postal>
          <email>ietf@trammell.ch</email>
        </address>
      </author>
      <author initials="A." surname="Brunstrom" fullname="Anna Brunstrom">
        <organization showOnFrontPage="true">Karlstad University</organization>
        <address>
          <postal>
            <street>Universitetsgatan 2</street>
            <city>651 88 Karlstad</city>
            <country>Sweden</country>
          </postal>
          <email>anna.brunstrom@kau.se</email>
        </address>
      </author>
      <author initials="G." surname="Fairhurst" fullname="Godred Fairhurst">
        <organization showOnFrontPage="true">University of Aberdeen</organization>
        <address>
          <postal>
            <street>Fraser Noble Building</street>
            <city>Aberdeen, AB24 3UE</city>
            <country>United Kingdom</country>
          </postal>
          <email>gorry@erg.abdn.ac.uk</email>
          <uri>https://erg.abdn.ac.uk/</uri>
        </address>
      </author>
      <author initials="C. S." surname="Perkins" fullname="Colin S. Perkins">
        <organization showOnFrontPage="true">University of Glasgow</organization>
        <address>
          <postal>
            <street>School of Computing Science</street>
            <city>Glasgow  G12 8QQ</city>
            <country>United Kingdom</country>
          </postal>
          <email>csp@csperkins.org</email>
        </address>
      </author>
    </section>
  </back>
</rfc>
