<?xml version='1.0' encoding='utf-8'?>
<rfc xmlns:xi="http://www.w3.org/2001/XInclude" version="3" ipr="trust200902" docName="draft-ietf-lamps-rfc5990bis-10" number="9690" category="std" consensus="true" submissionType="IETF" updates="" obsoletes="5990" tocInclude="true" sortRefs="true" symRefs="true" xml:lang="en" prepTime="2025-02-10T13:54:02" indexInclude="true" scripts="Common,Latin" tocDepth="3">
  <link href="https://datatracker.ietf.org/doc/draft-ietf-lamps-rfc5990bis-10" rel="prev"/>
  <link href="https://dx.doi.org/10.17487/rfc9690" rel="alternate"/>
  <link href="urn:issn:2070-1721" rel="alternate"/>
  <front>
    <title abbrev="RSA-KEM with CMS KEMRecipientInfo">Use of the RSA-KEM Algorithm in the Cryptographic Message Syntax (CMS)</title>
    <seriesInfo name="RFC" value="9690" stream="IETF"/>
    <author initials="R." surname="Housley" fullname="Russ Housley">
      <organization abbrev="Vigil Security" showOnFrontPage="true">Vigil Security, LLC</organization>
      <address>
        <postal>
          <street>516 Dranesville Road</street>
          <city>Herndon</city>
          <region>VA</region>
          <code>20170</code>
          <country>United States of America</country>
        </postal>
        <email>housley@vigilsec.com</email>
      </address>
    </author>
    <author initials="S." surname="Turner" fullname="Sean Turner">
      <organization showOnFrontPage="true">sn3rd</organization>
      <address>
        <email>sean@sn3rd.com</email>
      </address>
    </author>
    <date month="02" year="2025"/>
    <area>SEC</area>
    <workgroup>lamps</workgroup>
    <keyword>Key Encapsulation Mechanism (KEM)</keyword>
    <keyword>KEMRecipientInfo</keyword>
    <abstract pn="section-abstract">
      <t indent="0" pn="section-abstract-1">The RSA Key Encapsulation Mechanism (RSA-KEM) algorithm is a one-pass
(store-and-forward) cryptographic mechanism for an originator to securely
send keying material to a recipient using the recipient's RSA public key.
The RSA-KEM algorithm is specified in Clause 11.5 of ISO/IEC: 18033-2:2006.
This document specifies the conventions for using the RSA-KEM algorithm as a
standalone KEM algorithm and the conventions for using the RSA-KEM algorithm
with the Cryptographic Message Syntax (CMS) using KEMRecipientInfo as
specified in RFC 9629.  This document obsoletes RFC 5990.</t>
    </abstract>
    <boilerplate>
      <section anchor="status-of-memo" numbered="false" removeInRFC="false" toc="exclude" pn="section-boilerplate.1">
        <name slugifiedName="name-status-of-this-memo">Status of This Memo</name>
        <t indent="0" pn="section-boilerplate.1-1">
            This is an Internet Standards Track document.
        </t>
        <t indent="0" pn="section-boilerplate.1-2">
            This document is a product of the Internet Engineering Task Force
            (IETF).  It represents the consensus of the IETF community.  It has
            received public review and has been approved for publication by
            the Internet Engineering Steering Group (IESG).  Further
            information on Internet Standards is available in Section 2 of 
            RFC 7841.
        </t>
        <t indent="0" pn="section-boilerplate.1-3">
            Information about the current status of this document, any
            errata, and how to provide feedback on it may be obtained at
            <eref target="https://www.rfc-editor.org/info/rfc9690" brackets="none"/>.
        </t>
      </section>
      <section anchor="copyright" numbered="false" removeInRFC="false" toc="exclude" pn="section-boilerplate.2">
        <name slugifiedName="name-copyright-notice">Copyright Notice</name>
        <t indent="0" pn="section-boilerplate.2-1">
            Copyright (c) 2025 IETF Trust and the persons identified as the
            document authors. All rights reserved.
        </t>
        <t indent="0" pn="section-boilerplate.2-2">
            This document is subject to BCP 78 and the IETF Trust's Legal
            Provisions Relating to IETF Documents
            (<eref target="https://trustee.ietf.org/license-info" brackets="none"/>) in effect on the date of
            publication of this document. Please review these documents
            carefully, as they describe your rights and restrictions with
            respect to this document. Code Components extracted from this
            document must include Revised BSD License text as described in
            Section 4.e of the Trust Legal Provisions and are provided without
            warranty as described in the Revised BSD License.
        </t>
      </section>
    </boilerplate>
    <toc>
      <section anchor="toc" numbered="false" removeInRFC="false" toc="exclude" pn="section-toc.1">
        <name slugifiedName="name-table-of-contents">Table of Contents</name>
        <ul bare="true" empty="true" indent="2" spacing="compact" pn="section-toc.1-1">
          <li pn="section-toc.1-1.1">
            <t indent="0" pn="section-toc.1-1.1.1"><xref derivedContent="1" format="counter" sectionFormat="of" target="section-1"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-introduction">Introduction</xref></t>
            <ul bare="true" empty="true" indent="2" spacing="compact" pn="section-toc.1-1.1.2">
              <li pn="section-toc.1-1.1.2.1">
                <t indent="0" keepWithNext="true" pn="section-toc.1-1.1.2.1.1"><xref derivedContent="1.1" format="counter" sectionFormat="of" target="section-1.1"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-rsa-kem-algorithm-rationale">RSA-KEM Algorithm Rationale</xref></t>
              </li>
              <li pn="section-toc.1-1.1.2.2">
                <t indent="0" keepWithNext="true" pn="section-toc.1-1.1.2.2.1"><xref derivedContent="1.2" format="counter" sectionFormat="of" target="section-1.2"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-rsa-kem-algorithm-summary">RSA-KEM Algorithm Summary</xref></t>
              </li>
              <li pn="section-toc.1-1.1.2.3">
                <t indent="0" keepWithNext="true" pn="section-toc.1-1.1.2.3.1"><xref derivedContent="1.3" format="counter" sectionFormat="of" target="section-1.3"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-cms-kemrecipientinfo-proces">CMS KEMRecipientInfo Processing Summary</xref></t>
              </li>
              <li pn="section-toc.1-1.1.2.4">
                <t indent="0" pn="section-toc.1-1.1.2.4.1"><xref derivedContent="1.4" format="counter" sectionFormat="of" target="section-1.4"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-conventions-and-definitions">Conventions and Definitions</xref></t>
              </li>
              <li pn="section-toc.1-1.1.2.5">
                <t indent="0" pn="section-toc.1-1.1.2.5.1"><xref derivedContent="1.5" format="counter" sectionFormat="of" target="section-1.5"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-asn1">ASN.1</xref></t>
              </li>
              <li pn="section-toc.1-1.1.2.6">
                <t indent="0" pn="section-toc.1-1.1.2.6.1"><xref derivedContent="1.6" format="counter" sectionFormat="of" target="section-1.6"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-changes-since-rfc-5990">Changes Since RFC 5990</xref></t>
              </li>
            </ul>
          </li>
          <li pn="section-toc.1-1.2">
            <t indent="0" pn="section-toc.1-1.2.1"><xref derivedContent="2" format="counter" sectionFormat="of" target="section-2"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-use-of-the-rsa-kem-algorith">Use of the RSA-KEM Algorithm in CMS</xref></t>
            <ul bare="true" empty="true" indent="2" spacing="compact" pn="section-toc.1-1.2.2">
              <li pn="section-toc.1-1.2.2.1">
                <t indent="0" pn="section-toc.1-1.2.2.1.1"><xref derivedContent="2.1" format="counter" sectionFormat="of" target="section-2.1"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-mandatory-to-implement">Mandatory To Implement</xref></t>
              </li>
              <li pn="section-toc.1-1.2.2.2">
                <t indent="0" pn="section-toc.1-1.2.2.2.1"><xref derivedContent="2.2" format="counter" sectionFormat="of" target="section-2.2"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-recipientinfo-conventions">RecipientInfo Conventions</xref></t>
              </li>
              <li pn="section-toc.1-1.2.2.3">
                <t indent="0" pn="section-toc.1-1.2.2.3.1"><xref derivedContent="2.3" format="counter" sectionFormat="of" target="section-2.3"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-certificate-conventions">Certificate Conventions</xref></t>
              </li>
              <li pn="section-toc.1-1.2.2.4">
                <t indent="0" pn="section-toc.1-1.2.2.4.1"><xref derivedContent="2.4" format="counter" sectionFormat="of" target="section-2.4"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-smimecapabilities-attribute">SMIMECapabilities Attribute Conventions</xref></t>
              </li>
            </ul>
          </li>
          <li pn="section-toc.1-1.3">
            <t indent="0" pn="section-toc.1-1.3.1"><xref derivedContent="3" format="counter" sectionFormat="of" target="section-3"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-security-considerations">Security Considerations</xref></t>
          </li>
          <li pn="section-toc.1-1.4">
            <t indent="0" pn="section-toc.1-1.4.1"><xref derivedContent="4" format="counter" sectionFormat="of" target="section-4"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-iana-considerations">IANA Considerations</xref></t>
          </li>
          <li pn="section-toc.1-1.5">
            <t indent="0" pn="section-toc.1-1.5.1"><xref derivedContent="5" format="counter" sectionFormat="of" target="section-5"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-references">References</xref></t>
            <ul bare="true" empty="true" indent="2" spacing="compact" pn="section-toc.1-1.5.2">
              <li pn="section-toc.1-1.5.2.1">
                <t indent="0" pn="section-toc.1-1.5.2.1.1"><xref derivedContent="5.1" format="counter" sectionFormat="of" target="section-5.1"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-normative-references">Normative References</xref></t>
              </li>
              <li pn="section-toc.1-1.5.2.2">
                <t indent="0" pn="section-toc.1-1.5.2.2.1"><xref derivedContent="5.2" format="counter" sectionFormat="of" target="section-5.2"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-informative-references">Informative References</xref></t>
              </li>
            </ul>
          </li>
          <li pn="section-toc.1-1.6">
            <t indent="0" pn="section-toc.1-1.6.1"><xref derivedContent="Appendix A" format="default" sectionFormat="of" target="section-appendix.a"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-rsa-kem-algorithm">RSA-KEM Algorithm</xref></t>
            <ul bare="true" empty="true" indent="2" spacing="compact" pn="section-toc.1-1.6.2">
              <li pn="section-toc.1-1.6.2.1">
                <t indent="0" pn="section-toc.1-1.6.2.1.1"><xref derivedContent="A.1" format="counter" sectionFormat="of" target="section-appendix.a.1"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-originators-operations-rsa-">Originator's Operations: RSA-KEM Encapsulate()</xref></t>
              </li>
              <li pn="section-toc.1-1.6.2.2">
                <t indent="0" pn="section-toc.1-1.6.2.2.1"><xref derivedContent="A.2" format="counter" sectionFormat="of" target="section-appendix.a.2"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-recipients-operations-rsa-k">Recipient's Operations: RSA-KEM Decapsulate()</xref></t>
              </li>
            </ul>
          </li>
          <li pn="section-toc.1-1.7">
            <t indent="0" pn="section-toc.1-1.7.1"><xref derivedContent="Appendix B" format="default" sectionFormat="of" target="section-appendix.b"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-asn1-syntax">ASN.1 Syntax</xref></t>
            <ul bare="true" empty="true" indent="2" spacing="compact" pn="section-toc.1-1.7.2">
              <li pn="section-toc.1-1.7.2.1">
                <t indent="0" pn="section-toc.1-1.7.2.1.1"><xref derivedContent="B.1" format="counter" sectionFormat="of" target="section-appendix.b.1"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-underlying-components">Underlying Components</xref></t>
              </li>
              <li pn="section-toc.1-1.7.2.2">
                <t indent="0" pn="section-toc.1-1.7.2.2.1"><xref derivedContent="B.2" format="counter" sectionFormat="of" target="section-appendix.b.2"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-asn1-module">ASN.1 Module</xref></t>
              </li>
            </ul>
          </li>
          <li pn="section-toc.1-1.8">
            <t indent="0" pn="section-toc.1-1.8.1"><xref derivedContent="Appendix C" format="default" sectionFormat="of" target="section-appendix.c"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-smimecapabilities-examples">SMIMECapabilities Examples</xref></t>
          </li>
          <li pn="section-toc.1-1.9">
            <t indent="0" pn="section-toc.1-1.9.1"><xref derivedContent="Appendix D" format="default" sectionFormat="of" target="section-appendix.d"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-rsa-kem-cms-enveloped-data-">RSA-KEM CMS Enveloped-Data Example</xref></t>
            <ul bare="true" empty="true" indent="2" spacing="compact" pn="section-toc.1-1.9.2">
              <li pn="section-toc.1-1.9.2.1">
                <t indent="0" pn="section-toc.1-1.9.2.1.1"><xref derivedContent="D.1" format="counter" sectionFormat="of" target="section-appendix.d.1"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-originator-rsa-kem-encapsul">Originator RSA-KEM Encapsulate() Processing</xref></t>
              </li>
              <li pn="section-toc.1-1.9.2.2">
                <t indent="0" pn="section-toc.1-1.9.2.2.1"><xref derivedContent="D.2" format="counter" sectionFormat="of" target="section-appendix.d.2"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-originator-cms-processing">Originator CMS Processing</xref></t>
              </li>
              <li pn="section-toc.1-1.9.2.3">
                <t indent="0" pn="section-toc.1-1.9.2.3.1"><xref derivedContent="D.3" format="counter" sectionFormat="of" target="section-appendix.d.3"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-recipient-rsa-kem-decapsula">Recipient RSA-KEM Decapsulate() Processing</xref></t>
              </li>
              <li pn="section-toc.1-1.9.2.4">
                <t indent="0" pn="section-toc.1-1.9.2.4.1"><xref derivedContent="D.4" format="counter" sectionFormat="of" target="section-appendix.d.4"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-recipient-cms-processing">Recipient CMS Processing</xref></t>
              </li>
            </ul>
          </li>
          <li pn="section-toc.1-1.10">
            <t indent="0" pn="section-toc.1-1.10.1"><xref derivedContent="" format="none" sectionFormat="of" target="section-appendix.e"/><xref derivedContent="" format="title" sectionFormat="of" target="name-acknowledgements">Acknowledgements</xref></t>
          </li>
          <li pn="section-toc.1-1.11">
            <t indent="0" pn="section-toc.1-1.11.1"><xref derivedContent="" format="none" sectionFormat="of" target="section-appendix.f"/><xref derivedContent="" format="title" sectionFormat="of" target="name-authors-addresses">Authors' Addresses</xref></t>
          </li>
        </ul>
      </section>
    </toc>
  </front>
  <middle>
    <section anchor="introduction" numbered="true" removeInRFC="false" toc="include" pn="section-1">
      <name slugifiedName="name-introduction">Introduction</name>
      <t indent="0" pn="section-1-1">The RSA Key Encapsulation Mechanism (RSA-KEM) algorithm is a one-pass
(store-and-forward) cryptographic mechanism for an originator to securely
send keying material to a recipient using the recipient's RSA public key.
The RSA-KEM algorithm is specified in Clause 11.5 of <xref target="ISO18033-2" format="default" sectionFormat="of" derivedContent="ISO18033-2"/>.</t>
      <t indent="0" pn="section-1-2">The RSA-KEM algorithm takes a different approach than other RSA key
transport mechanisms <xref target="RFC8017" format="default" sectionFormat="of" derivedContent="RFC8017"/> with the goal of providing higher
security assurance while also satisfying the KEM interface.  The
RSA-KEM algorithm encrypts a random integer with the recipient's
RSA public key and derives a shared secret from the random integer. The
originator and recipient can derive a symmetric key from the shared
secret.  For example, a key-encryption key (KEK) can be derived from the shared
secret to wrap a content-encryption key (CEK).</t>
      <t indent="0" pn="section-1-3">In the Cryptographic Message Syntax (CMS) <xref target="RFC5652" format="default" sectionFormat="of" derivedContent="RFC5652"/> using
KEMRecipientInfo <xref target="RFC9629" format="default" sectionFormat="of" derivedContent="RFC9629"/>, the shared-secret value
is input to a key derivation function (KDF) to compute a key-encryption key and
wrap a symmetric content-encryption key with the key-encryption key.  In
this way, the originator and the recipient end up with the same
content-encryption key.</t>
      <t indent="0" pn="section-1-4">For completeness, a specification of the RSA-KEM algorithm is given in
<xref target="app-alg" format="default" sectionFormat="of" derivedContent="Appendix A"/> of this document. ASN.1 syntax is given in <xref target="app-asn1" format="default" sectionFormat="of" derivedContent="Appendix B"/>.</t>
      <section anchor="rsa-kem-algorithm-rationale" numbered="true" removeInRFC="false" toc="include" pn="section-1.1">
        <name slugifiedName="name-rsa-kem-algorithm-rationale">RSA-KEM Algorithm Rationale</name>
        <t indent="0" pn="section-1.1-1">The RSA-KEM algorithm provides higher security assurance than other
        variants of the RSA cryptosystem for two reasons.  First, the input to
        the underlying RSA operation is a string-encoded random integer
        between 0 and n-1, where n is the RSA modulus, so it does not have any
        structure that could be exploited by an adversary.  Second, the input
        is independent of the keying material, so the result of the RSA
        decryption operation is not directly available to an adversary.  As a
        result, the RSA-KEM algorithm enjoys a "tight" security proof in the
        random oracle model. (In other padding schemes, such as PKCS #1 v1.5
        <xref target="RFC8017" format="default" sectionFormat="of" derivedContent="RFC8017"/>, the input has structure and depends on the
        keying material. Additionally, the provable security assurances are
        not as strong.)</t>
        <t indent="0" pn="section-1.1-2">The approach is also architecturally convenient because the
public-key operations are separate from the symmetric operations on the
keying material.  Another benefit is that the length of the keying material
is determined by the symmetric algorithms, not the size of the RSA modulus.</t>
      </section>
      <section anchor="rsa-kem-algorithm-summary" numbered="true" removeInRFC="false" toc="include" pn="section-1.2">
        <name slugifiedName="name-rsa-kem-algorithm-summary">RSA-KEM Algorithm Summary</name>
        <t indent="0" pn="section-1.2-1">All KEM algorithms provide three functions: KeyGen(), Encapsulate(),
and Decapsulate().</t>
        <t indent="0" pn="section-1.2-2">The following summarizes these three functions for the RSA-KEM algorithm:</t>
        <dl spacing="normal" newline="true" indent="3" pn="section-1.2-3">
          <dt pn="section-1.2-3.1">KeyGen() -&gt; (pk, sk):</dt>
          <dd pn="section-1.2-3.2">
            <t indent="0" pn="section-1.2-3.2.1">Generate the public key (pk) and a private key (sk) as
          described in <xref section="3" sectionFormat="of" target="RFC8017" format="default" derivedLink="https://rfc-editor.org/rfc/rfc8017#section-3" derivedContent="RFC8017"/>.</t>
          </dd>
          <dt pn="section-1.2-3.3">Encapsulate(pk) -&gt; (ct, SS):</dt>
          <dd pn="section-1.2-3.4">
            <t indent="0" pn="section-1.2-3.4.1">Given the recipient's public key (pk), produce a ciphertext
            (ct) to be passed to the recipient and a shared secret (SS) for
            use by the originator as follows:</t>
            <ol type="1" spacing="normal" indent="adaptive" start="1" pn="section-1.2-3.4.2">
              <li pn="section-1.2-3.4.2.1" derivedCounter="1.">Generate a random integer z between 0 and n-1.</li>
              <li pn="section-1.2-3.4.2.2" derivedCounter="2.">
                <t indent="0" pn="section-1.2-3.4.2.2.1">Encrypt the integer z with the recipient's RSA public key to obtain the ciphertext:</t>
                <artwork align="left" pn="section-1.2-3.4.2.2.2">
       ct = z^e mod n</artwork>
              </li>
              <li pn="section-1.2-3.4.2.3" derivedCounter="3.">
                <t indent="0" pn="section-1.2-3.4.2.3.1">Derive a shared secret from the integer z using a Key
              Derivation Function (KDF):</t>
                <artwork align="left" pn="section-1.2-3.4.2.3.2">
       SS = KDF(Z, ssLen)</artwork>
              </li>
              <li pn="section-1.2-3.4.2.4" derivedCounter="4.">
                <t indent="0" pn="section-1.2-3.4.2.4.1">The ciphertext and the shared secret are returned by the
              function.  The originator sends the ciphertext to the
              recipient.</t>
              </li>
            </ol>
          </dd>
          <dt pn="section-1.2-3.5">Decapsulate(sk, ct) -&gt; SS:</dt>
          <dd pn="section-1.2-3.6">
            <t indent="0" pn="section-1.2-3.6.1">Given the private key (sk) and the ciphertext (ct), produce
            the shared secret (SS) for the recipient as follows:</t>
            <ol type="1" spacing="normal" indent="adaptive" start="1" pn="section-1.2-3.6.2">
              <li pn="section-1.2-3.6.2.1" derivedCounter="1.">
                <t indent="0" pn="section-1.2-3.6.2.1.1">Decrypt the ciphertext with the recipient's RSA private
              key to obtain the random integer z:</t>
                <artwork align="left" pn="section-1.2-3.6.2.1.2">
       z = ct^d mod n</artwork>
              </li>
              <li pn="section-1.2-3.6.2.2" derivedCounter="2.">
                <t indent="0" pn="section-1.2-3.6.2.2.1">Derive a shared secret from the integer z:</t>
                <artwork align="left" pn="section-1.2-3.6.2.2.2">
       SS = KDF(Z, ssLen)</artwork>
              </li>
              <li pn="section-1.2-3.6.2.3" derivedCounter="3.">
                <t indent="0" pn="section-1.2-3.6.2.3.1">The shared secret is returned by the function.</t>
              </li>
            </ol>
          </dd>
        </dl>
      </section>
      <section anchor="cms-kemrecipientinfo-processing-summary" numbered="true" removeInRFC="false" toc="include" pn="section-1.3">
        <name slugifiedName="name-cms-kemrecipientinfo-proces">CMS KEMRecipientInfo Processing Summary</name>
        <t indent="0" pn="section-1.3-1">To support the RSA-KEM algorithm, the CMS originator
        <bcp14>MUST</bcp14> implement Encapsulate().</t>
        <t indent="0" pn="section-1.3-2">Given a content-encryption key CEK, the RSA-KEM algorithm
        processing by the originator to produce the values that are carried in
        the CMS KEMRecipientInfo can be summarized as follows:</t>
        <ol type="1" spacing="normal" indent="adaptive" start="1" pn="section-1.3-3">
          <li pn="section-1.3-3.1" derivedCounter="1.">
            <t indent="0" pn="section-1.3-3.1.1">Obtain the shared secret using the Encapsulate() function of
            the RSA-KEM algorithm and the recipient's RSA public key:</t>
            <artwork align="left" pn="section-1.3-3.1.2">
       (ct, SS) = Encapsulate(pk)</artwork>
          </li>
          <li pn="section-1.3-3.2" derivedCounter="2.">
            <t indent="0" pn="section-1.3-3.2.1">Derive a key-encryption key KEK from the shared secret:</t>
            <artwork align="left" pn="section-1.3-3.2.2">
       KEK = KDF(SS, kekLength, otherInfo)</artwork>
          </li>
          <li pn="section-1.3-3.3" derivedCounter="3.">
            <t indent="0" pn="section-1.3-3.3.1">Wrap the CEK with the KEK to obtain wrapped keying material WK:</t>
            <artwork align="left" pn="section-1.3-3.3.2">
       WK = WRAP(KEK, CEK)
</artwork>
          </li>
          <li pn="section-1.3-3.4" derivedCounter="4.">
            <t indent="0" pn="section-1.3-3.4.1">The originator sends the ciphertext and WK to the recipient in
            the CMS KEMRecipientInfo structure.</t>
          </li>
        </ol>
        <t indent="0" pn="section-1.3-4">To support the RSA-KEM algorithm, the CMS recipient
        <bcp14>MUST</bcp14> implement Decapsulate().</t>
        <t indent="0" pn="section-1.3-5">The RSA-KEM algorithm recipient processing of the values obtained
        from the KEMRecipientInfo structure is summarized as follows:</t>
        <ol type="1" spacing="normal" indent="adaptive" start="1" pn="section-1.3-6">
          <li pn="section-1.3-6.1" derivedCounter="1.">
            <t indent="0" pn="section-1.3-6.1.1">Obtain the shared secret using the Decapsulate() function of
            the RSA-KEM algorithm and the recipient's RSA private key:</t>
            <artwork align="left" pn="section-1.3-6.1.2">
       SS = Decapsulate(sk, ct)</artwork>
          </li>
          <li pn="section-1.3-6.2" derivedCounter="2.">
            <t indent="0" pn="section-1.3-6.2.1">Derive a key-encryption key KEK from the shared secret:</t>
            <artwork align="left" pn="section-1.3-6.2.2">
       KEK = KDF(SS, kekLength, otherInfo)</artwork>
          </li>
          <li pn="section-1.3-6.3" derivedCounter="3.">
            <t indent="0" pn="section-1.3-6.3.1">Unwrap the WK with the KEK to obtain the content-encryption key CEK:</t>
            <artwork align="left" pn="section-1.3-6.3.2">
       CEK = UNWRAP(KEK, WK)</artwork>
          </li>
        </ol>
        <t indent="0" pn="section-1.3-7">Note that the KDF used to process the KEMRecipientInfo structure <bcp14>MAY</bcp14> be
different from the KDF used to derive the shared secret in the RSA-KEM
algorithm.</t>
      </section>
      <section anchor="conventions-and-definitions" numbered="true" removeInRFC="false" toc="include" pn="section-1.4">
        <name slugifiedName="name-conventions-and-definitions">Conventions and Definitions</name>
        <t indent="0" pn="section-1.4-1">
    The key words "<bcp14>MUST</bcp14>", "<bcp14>MUST NOT</bcp14>", "<bcp14>REQUIRED</bcp14>", "<bcp14>SHALL</bcp14>", "<bcp14>SHALL NOT</bcp14>", "<bcp14>SHOULD</bcp14>", "<bcp14>SHOULD NOT</bcp14>", "<bcp14>RECOMMENDED</bcp14>", "<bcp14>NOT RECOMMENDED</bcp14>",
    "<bcp14>MAY</bcp14>", and "<bcp14>OPTIONAL</bcp14>" in this document are to be interpreted as
    described in BCP 14 <xref target="RFC2119" format="default" sectionFormat="of" derivedContent="RFC2119"/> <xref target="RFC8174" format="default" sectionFormat="of" derivedContent="RFC8174"/> 
    when, and only when, they appear in all capitals, as shown here.
        </t>
      </section>
      <section anchor="asn1" numbered="true" removeInRFC="false" toc="include" pn="section-1.5">
        <name slugifiedName="name-asn1">ASN.1</name>
        <t indent="0" pn="section-1.5-1">CMS values are generated using ASN.1 <xref target="X.680" format="default" sectionFormat="of" derivedContent="X.680"/>, which uses the Basic
Encoding Rules (BER) and the Distinguished Encoding Rules (DER) <xref target="X.690" format="default" sectionFormat="of" derivedContent="X.690"/>.</t>
      </section>
      <section anchor="changes-since-rfc-5990" numbered="true" removeInRFC="false" toc="include" pn="section-1.6">
        <name slugifiedName="name-changes-since-rfc-5990">Changes Since RFC 5990</name>
        <t indent="0" pn="section-1.6-1">RFC 5990 <xref target="RFC5990" format="default" sectionFormat="of" derivedContent="RFC5990"/> specified the conventions for using the RSA-KEM algorithm
in CMS as a key transport algorithm.  That is, it used KeyTransRecipientInfo <xref target="RFC5652" format="default" sectionFormat="of" derivedContent="RFC5652"/>
for each recipient.  Since the publication of RFC 5990, a new KEMRecipientInfo
structure <xref target="RFC9629" format="default" sectionFormat="of" derivedContent="RFC9629"/> has been defined to support KEM
algorithms.  When the id-rsa-kem algorithm identifier appears in the
SubjectPublicKeyInfo field of a certificate, the complex parameter structure
defined in RFC 5990 can be omitted; however, the parameters are allowed for
backward compatibility. Also, to avoid visual confusion with id‑kem‑rsa, 
id‑rsa‑kem‑spki is introduced as an alias for id-rsa-kem.</t>
        <t indent="0" pn="section-1.6-2">RFC 5990 used EK as the EncryptedKey, which is the concatenation of
the ciphertext C and the wrapped key WK, EK = (C || WK).  The use of EK was
necessary to align with the KeyTransRecipientInfo structure.  In this
document, the ciphertext and the wrapped key are sent in separate fields of
the KEMRecipientInfo structure.  In particular, the ciphertext is carried in
the kemct field, and the wrapped key is carried in the encryptedKey
field.  See <xref target="app-alg" format="default" sectionFormat="of" derivedContent="Appendix A"/> for details about the computation of the ciphertext.</t>
        <t indent="0" pn="section-1.6-3">RFC 5990 included support for Camellia and Triple-DES block ciphers;
discussion of these block ciphers does not appear in this document, but
the algorithm identifiers remain in the ASN.1 module (see <xref target="app-asn1-module" format="default" sectionFormat="of" derivedContent="Appendix B.2"/>).</t>
        <t indent="0" pn="section-1.6-4">RFC 5990 included support for SHA-1 hash function; discussion of this
hash function does not appear this document, but the algorithm identifier
remains in the ASN.1 module (see <xref target="app-asn1-module" format="default" sectionFormat="of" derivedContent="Appendix B.2"/>).</t>
        <t indent="0" pn="section-1.6-5">RFC 5990 required support for the KDF3 key derivation function
        <xref target="ANS-X9.44" format="default" sectionFormat="of" derivedContent="ANS-X9.44"/>; this document continues to require
        support for the KDF3 key derivation function, but it requires support
        for SHA-256 <xref target="SHS" format="default" sectionFormat="of" derivedContent="SHS"/> as the hash function.</t>
        <t indent="0" pn="section-1.6-6">RFC 5990 recommended support for alternatives to KDF3 and AES-Wrap-128;
this document simply states that other key derivation functions and other
key-encryption algorithms <bcp14>MAY</bcp14> be supported.</t>
        <t indent="0" pn="section-1.6-7">RFC 5990 supported the future definition of additional KEM algorithms that
use RSA; this document supports only one, and it is identified by the
id-kem-rsa object identifier.</t>
        <t indent="0" pn="section-1.6-8">RFC 5990 included an ASN.1 module; this document provides an alternative
ASN.1 module that follows the conventions established in <xref target="RFC5911" format="default" sectionFormat="of" derivedContent="RFC5911"/>,
<xref target="RFC5912" format="default" sectionFormat="of" derivedContent="RFC5912"/>, and <xref target="RFC6268" format="default" sectionFormat="of" derivedContent="RFC6268"/>.  The new ASN.1 module (<xref target="app-asn1-module" format="default" sectionFormat="of" derivedContent="Appendix B.2"/>)
produces the same bits-on-the-wire as the one in RFC 5990.</t>
      </section>
    </section>
    <section anchor="use-of-the-rsa-kem-algorithm-in-cms" numbered="true" removeInRFC="false" toc="include" pn="section-2">
      <name slugifiedName="name-use-of-the-rsa-kem-algorith">Use of the RSA-KEM Algorithm in CMS</name>
      <t indent="0" pn="section-2-1">The RSA-KEM algorithm <bcp14>MAY</bcp14> be employed for one or more recipients in the
CMS enveloped-data content type <xref target="RFC5652" format="default" sectionFormat="of" derivedContent="RFC5652"/>, the CMS authenticated-data
content type <xref target="RFC5652" format="default" sectionFormat="of" derivedContent="RFC5652"/>, or the CMS authenticated-enveloped-data
content type <xref target="RFC5083" format="default" sectionFormat="of" derivedContent="RFC5083"/>.  In each case, the KEMRecipientInfo
<xref target="RFC9629" format="default" sectionFormat="of" derivedContent="RFC9629"/> is used with the RSA-KEM algorithm
to securely transfer the content-encryption key from the originator to
the recipient.</t>
      <section anchor="mandatory-to-implement" numbered="true" removeInRFC="false" toc="include" pn="section-2.1">
        <name slugifiedName="name-mandatory-to-implement">Mandatory To Implement</name>
        <t indent="0" pn="section-2.1-1">A CMS implementation that supports the RSA-KEM algorithm <bcp14>MUST</bcp14> support at
least the following underlying components:</t>
        <ul spacing="normal" bare="false" empty="false" indent="3" pn="section-2.1-2">
          <li pn="section-2.1-2.1">
            <t indent="0" pn="section-2.1-2.1.1">For the key derivation function, an implementation <bcp14>MUST</bcp14> support
KDF3 <xref target="ANS-X9.44" format="default" sectionFormat="of" derivedContent="ANS-X9.44"/> with SHA-256 <xref target="SHS" format="default" sectionFormat="of" derivedContent="SHS"/>.</t>
          </li>
          <li pn="section-2.1-2.2">
            <t indent="0" pn="section-2.1-2.2.1">For key-wrapping, an implementation <bcp14>MUST</bcp14> support the
AES-Wrap-128 <xref target="RFC3394" format="default" sectionFormat="of" derivedContent="RFC3394"/> key-encryption algorithm.</t>
          </li>
        </ul>
        <t indent="0" pn="section-2.1-3">An implementation <bcp14>MAY</bcp14> also support other key derivation functions and
other key-encryption algorithms.</t>
      </section>
      <section anchor="recipientinfo-conventions" numbered="true" removeInRFC="false" toc="include" pn="section-2.2">
        <name slugifiedName="name-recipientinfo-conventions">RecipientInfo Conventions</name>
        <t indent="0" pn="section-2.2-1">When the RSA-KEM algorithm is employed for a recipient, the
RecipientInfo alternative for that recipient <bcp14>MUST</bcp14> be
OtherRecipientInfo using the KEMRecipientInfo structure
<xref target="RFC9629" format="default" sectionFormat="of" derivedContent="RFC9629"/>.  The fields of the
KEMRecipientInfo <bcp14>MUST</bcp14> have the following values:</t>
        <ul spacing="normal" bare="false" empty="false" indent="3" pn="section-2.2-2">
          <li pn="section-2.2-2.1">version is the syntax version number; it <bcp14>MUST</bcp14> be 0.</li>
          <li pn="section-2.2-2.2">rid identifies the recipient's certificate or public key.</li>
          <li pn="section-2.2-2.3">kem identifies the KEM algorithm; it <bcp14>MUST</bcp14> contain id-kem-rsa.</li>
          <li pn="section-2.2-2.4">kemct is the ciphertext produced for this recipient;
            it contains C from steps 1 and 2 of Originator's Operations in
            <xref target="app-alg" format="default" sectionFormat="of" derivedContent="Appendix A"/>.</li>
          <li pn="section-2.2-2.5">kdf identifies the key derivation function (KDF).
            Note that the KDF used for CMS RecipientInfo process
            <bcp14>MAY</bcp14> be different than the KDF used within the
            RSA-KEM algorithm.</li>
          <li pn="section-2.2-2.6">kekLength is the size of the key-encryption key in octets.</li>
          <li pn="section-2.2-2.7">ukm is an optional random input to the key derivation function.</li>
          <li pn="section-2.2-2.8">wrap identifies a key-encryption algorithm used to
            encrypt the keying material.</li>
          <li pn="section-2.2-2.9">encryptedKey is the result of encrypting the keying material with the
key-encryption key.  When used with the CMS enveloped-data content
type <xref target="RFC5652" format="default" sectionFormat="of" derivedContent="RFC5652"/>, the keying material is a content-encryption key.  When
used with the CMS authenticated-data content type <xref target="RFC5652" format="default" sectionFormat="of" derivedContent="RFC5652"/>, the
keying material is a message-authentication key.  When used with the
CMS authenticated-enveloped-data content type <xref target="RFC5083" format="default" sectionFormat="of" derivedContent="RFC5083"/>, the
keying material is a content-authenticated-encryption key (CAEK).</li>
        </ul>
        <t indent="0" pn="section-2.2-3">NOTE: For backward compatibility, implementations <bcp14>MAY</bcp14> also support
the RSA-KEM Key Transport algorithm, identified by id-rsa-kem-spki, which uses
KeyTransRecipientInfo as specified in <xref target="RFC5990" format="default" sectionFormat="of" derivedContent="RFC5990"/>.</t>
      </section>
      <section anchor="certificate-conventions" numbered="true" removeInRFC="false" toc="include" pn="section-2.3">
        <name slugifiedName="name-certificate-conventions">Certificate Conventions</name>
        <t indent="0" pn="section-2.3-1">The conventions specified in this section augment RFC 5280 <xref target="RFC5280" format="default" sectionFormat="of" derivedContent="RFC5280"/>.</t>
        <t indent="0" pn="section-2.3-2">A recipient who employs the RSA-KEM algorithm <bcp14>MAY</bcp14>
        identify the public key in a certificate by the same
        AlgorithmIdentifier as for PKCS #1 v1.5, that is, using the
        rsaEncryption object identifier <xref target="RFC8017" format="default" sectionFormat="of" derivedContent="RFC8017"/>.  The fact
        that the recipient will accept the RSA-KEM algorithm with this public key is not
        indicated by the use of this object identifier.  The willingness to
        accept the RSA-KEM algorithm <bcp14>MAY</bcp14> be signaled by the use
        of the SMIMECapabilities Attribute as specified in <xref section="2.5.2" sectionFormat="of" target="RFC8551" format="default" derivedLink="https://rfc-editor.org/rfc/rfc8551#section-2.5.2" derivedContent="RFC8551"/> or the
        SMIMECapabilities certificate extension as specified in <xref target="RFC4262" format="default" sectionFormat="of" derivedContent="RFC4262"/>.</t>
        <t indent="0" pn="section-2.3-3">If the recipient wishes only to employ the RSA-KEM algorithm with a
        given public key, the recipient <bcp14>MUST</bcp14> identify the
        public key in the certificate using the id-rsa-kem-spki object
        identifier; see <xref target="app-asn1" format="default" sectionFormat="of" derivedContent="Appendix B"/>.  The use of the
        id-rsa-kem-spki object identifier allows certificates that were issued
        to be compatible with the RSA-KEM Key Transport algorithm to also be
        used with this specification.  When the id-rsa-kem-spki object
        identifier appears in the SubjectPublicKeyInfo algorithm field of the
        certificate, the parameters field from AlgorithmIdentifier
        <bcp14>SHOULD</bcp14> be absent.  That is, the AlgorithmIdentifier
        <bcp14>SHOULD</bcp14> be a SEQUENCE of one component, the
        id-rsa-kem-spki object identifier.  With absent parameters, the KDF3
        key derivation function <xref target="ANS-X9.44" format="default" sectionFormat="of" derivedContent="ANS-X9.44"/> with SHA-256 <xref target="SHS" format="default" sectionFormat="of" derivedContent="SHS"/> are used to derive the shared secret.</t>
        <t indent="0" pn="section-2.3-4">When the AlgorithmIdentifier parameters are present, the
GenericHybridParameters <bcp14>MUST</bcp14> be used.  Within the kem element, the algorithm
identifier <bcp14>MUST</bcp14> be set to id-kem-rsa, and RsaKemParameters <bcp14>MUST</bcp14> be included.
As described in <xref target="smimecap" format="default" sectionFormat="of" derivedContent="Section 2.4"/>, the GenericHybridParameters constrain the values
that can be used with the RSA public key for the kdf, kekLength, and wrap
fields of the KEMRecipientInfo structure.</t>
        <t indent="0" pn="section-2.3-5">Regardless of the AlgorithmIdentifier used, the RSA public key <bcp14>MUST</bcp14> be
carried in the subjectPublicKey BIT STRING within the SubjectPublicKeyInfo
field of the certificate using the RSAPublicKey type defined in <xref target="RFC8017" format="default" sectionFormat="of" derivedContent="RFC8017"/>.</t>
        <t indent="0" pn="section-2.3-6">The intended application for the public key <bcp14>MAY</bcp14> be indicated in the key usage
certificate extension as specified in <xref section="4.2.1.3" sectionFormat="of" target="RFC5280" format="default" derivedLink="https://rfc-editor.org/rfc/rfc5280#section-4.2.1.3" derivedContent="RFC5280"/>.  If the
keyUsage extension is present in a certificate that conveys an RSA public key
with the id-rsa-kem-spki object identifier as discussed above, then the key
usage extension <bcp14>MUST</bcp14> contain only the following value:</t>
        <t indent="3" pn="section-2.3-7">keyEncipherment</t>
        <t indent="0" pn="section-2.3-8">Other keyUsage extension values <bcp14>MUST NOT</bcp14> be
present.  That is, a public key intended to be employed only with the
RSA-KEM algorithm <bcp14>MUST NOT</bcp14> also be employed for data encryption or
for digital signatures.  Good cryptographic practice employs a given RSA
key pair in only one scheme.  This practice avoids the risk that vulnerability
in one scheme may compromise the security of the other and may be essential
to maintain provable security.</t>
      </section>
      <section anchor="smimecap" numbered="true" removeInRFC="false" toc="include" pn="section-2.4">
        <name slugifiedName="name-smimecapabilities-attribute">SMIMECapabilities Attribute Conventions</name>
        <t indent="0" pn="section-2.4-1"><xref section="2.5.2" sectionFormat="of" target="RFC8551" format="default" derivedLink="https://rfc-editor.org/rfc/rfc8551#section-2.5.2" derivedContent="RFC8551"/> defines the SMIMECapabilities attribute to
announce a partial list of algorithms that an S/MIME implementation can
support.  When constructing a CMS signed-data content type <xref target="RFC5652" format="default" sectionFormat="of" derivedContent="RFC5652"/>,
a compliant implementation <bcp14>MAY</bcp14> include the SMIMECapabilities attribute
that announces support for the RSA-KEM algorithm.</t>
        <t indent="0" pn="section-2.4-2">The SMIMECapability SEQUENCE representing the RSA-KEM algorithm <bcp14>MUST</bcp14>
include the id-rsa-kem-spki object identifier in the capabilityID field;
see <xref target="app-asn1" format="default" sectionFormat="of" derivedContent="Appendix B"/> for the object identifier value and <xref target="app-example" format="default" sectionFormat="of" derivedContent="Appendix C"/>
for examples.  When the id-rsa-kem-spki object identifier appears in the
capabilityID field and the parameters are present, then the parameters
field <bcp14>MUST</bcp14> use the GenericHybridParameters type.</t>
        <sourcecode type="asn.1" markers="false" pn="section-2.4-3">
  GenericHybridParameters ::= SEQUENCE {
    kem  KeyEncapsulationMechanism,
    dem  DataEncapsulationMechanism }</sourcecode>
        <t indent="0" pn="section-2.4-4">The fields of the GenericHybridParameters type have the following meanings:</t>
        <ul bare="false" empty="false" indent="3" spacing="normal" pn="section-2.4-5">
          <li pn="section-2.4-5.1">
            <t indent="0" pn="section-2.4-5.1.1">kem is an AlgorithmIdentifer.  The algorithm field <bcp14>MUST</bcp14> be set to id-kem-rsa,
and the parameters field <bcp14>MUST</bcp14> be RsaKemParameters, which is a SEQUENCE of an
AlgorithmIdentifier that identifies the supported key derivation function
and a positive INTEGER that identifies the length of the key-encryption
key in octets.</t>
          </li>
          <li pn="section-2.4-5.2">
            <t indent="0" pn="section-2.4-5.2.1">dem is an AlgorithmIdentifier.  The algorithm field <bcp14>MUST</bcp14> be present, and it
identifies the key-encryption algorithm.  The parameters are optional.  If the
GenericHybridParameters are present, then the provided dem value <bcp14>MUST</bcp14> be
used in the wrap field of KEMRecipientInfo.</t>
          </li>
        </ul>
        <t indent="0" pn="section-2.4-6">If the GenericHybridParameters are present, then the provided kem value <bcp14>MUST</bcp14>
be used as the key derivation function in the kdf field of KEMRecipientInfo
and the provided key length <bcp14>MUST</bcp14> be used in the kekLength of KEMRecipientInfo.</t>
      </section>
    </section>
    <section anchor="security-considerations" numbered="true" removeInRFC="false" toc="include" pn="section-3">
      <name slugifiedName="name-security-considerations">Security Considerations</name>
      <t indent="0" pn="section-3-1">The RSA-KEM algorithm should be considered as a replacement for the key transport portion of the
widely implemented PKCS #1 v1.5 <xref target="RFC8017" format="default" sectionFormat="of" derivedContent="RFC8017"/> for new applications
that use CMS to avoid potential vulnerabilities to chosen-ciphertext
attacks and gain a tighter security proof. However, the RSA-KEM algorithm
has the disadvantage of slightly longer encrypted keying material.  With
PKCS #1 v1.5, the originator encrypts the key-encryption key directly with
the recipient's RSA public key.  With the RSA-KEM algorithm, the key-encryption key
is encrypted separately.</t>
      <t indent="0" pn="section-3-2"> The security of the RSA-KEM algorithm can be shown to be tightly related
to the difficulty of either solving the RSA problem or breaking the underlying
symmetric key-encryption algorithm if the underlying key derivation function
is modeled as a random oracle, assuming that the symmetric key-encryption
algorithm satisfies the properties of a data encapsulation mechanism <xref target="SHOUP" format="default" sectionFormat="of" derivedContent="SHOUP"/>.  While in practice a random-oracle result does not provide
an actual security proof for any particular key derivation function, the
result does provide assurance that the general construction is reasonable; a
key derivation function would need to be particularly weak to lead to an
attack that is not possible in the random-oracle model.</t>
      <t indent="0" pn="section-3-3">The RSA key size and the underlying components need to be selected
consistent with the desired security level.  Several security levels
have been identified in the NIST SP 800-57 Part 1 <xref target="NISTSP800-57pt1r5" format="default" sectionFormat="of" derivedContent="NISTSP800-57pt1r5"/>. For example, one way
to achieve 128-bit security, the RSA key size would be at least 3072 bits,
the key derivation function would be SHA-256, and the symmetric
key-encryption algorithm would be AES Key Wrap with a 128-bit key.</t>
      <t indent="0" pn="section-3-4">Implementations <bcp14>MUST</bcp14> protect the RSA private key, the key-encryption key,
the content-encryption key, message-authentication key, and the
content-authenticated-encryption key.  Disclosure of the RSA private key
could result in the compromise of all messages protected with that key.
Disclosure of the key-encryption key, the content-encryption key, or the
content-authenticated-encryption key could result in compromise of the
associated encrypted content.  Disclosure of the key-encryption key, the
message-authentication key, or the content-authenticated-encryption key
could allow modification of the associated authenticated content.</t>
      <t indent="0" pn="section-3-5">Additional considerations related to key management may be found in
<xref target="NISTSP800-57pt1r5" format="default" sectionFormat="of" derivedContent="NISTSP800-57pt1r5"/>.</t>
      <t indent="0" pn="section-3-6">The security of the RSA-KEM algorithm depends on a quality random number
generator.  For further discussion on random number generation,
see <xref target="RFC4086" format="default" sectionFormat="of" derivedContent="RFC4086"/>.</t>
      <t indent="0" pn="section-3-7">The RSA-KEM algorithm does not use an explicit padding scheme. Instead,
an encoded random value (z) between zero and the RSA modulus minus one (n-1)
is directly encrypted with the recipient's RSA public key.  The
IntegerToString(z, nLen) encoding produces a string that is the full length of
the RSA modulus.  In addition, the random value is passed through a 
KDF to reduce possible harm from a poorly implemented random number
source or a maliciously chosen random value (z).  Implementations <bcp14>MUST NOT</bcp14>
use z directly for any purpose.</t>
      <t indent="0" pn="section-3-8">As long as a fresh random integer z is chosen as part of each invocation
of the Encapsulate() function, the RSA-KEM algorithm does not degrade as the number of
ciphertexts increases.  Since RSA encryption provides a bijective map,
a collision in the KDF is the only way that the RSA-KEM algorithm can produce more than
one ciphertext that encapsulates the same shared secret.</t>
      <t indent="0" pn="section-3-9">The RSA-KEM algorithm provides a fixed-length ciphertext.  The recipient <bcp14>MUST</bcp14>
check that the received byte string is the expected length and the length
corresponds to an integer in the expected range prior to attempting decryption
with their RSA private key as described in Steps 1 and 2 of <xref target="app-alg-decap" format="default" sectionFormat="of" derivedContent="Appendix A.2"/>.</t>
      <t indent="0" pn="section-3-10">Implementations <bcp14>SHOULD NOT</bcp14> reveal information about intermediate
values or calculations, whether by timing or other "side channels";
otherwise, an opponent may be able to determine information about
the keying data and/or the recipient's private key.  Although not all
intermediate information may be useful to an opponent, it is
preferable to conceal as much information as is practical, unless
analysis specifically indicates that the information would not be
useful to an opponent.</t>
      <t indent="0" pn="section-3-11">Generally, good cryptographic practice employs a given RSA key pair
in only one scheme.  This practice avoids the risk that vulnerability
in one scheme may compromise the security of the other, and may be
essential to maintain provable security.  RSA public keys have often
been employed for multiple purposes such as key transport and digital
signature without any known bad interactions; however, such combined use
of an RSA key pair is <bcp14>NOT RECOMMENDED</bcp14> in the future (unless the different
schemes are specifically designed to be used together).</t>
      <t indent="0" pn="section-3-12">Accordingly, an RSA key pair used for the RSA-KEM algorithm <bcp14>SHOULD NOT</bcp14>
also be used for digital signatures.  Indeed, the Accredited Standards
Committee X9 (ASC X9) requires such a separation between key pairs used
for key establishment and key pairs used for digital signature
<xref target="ANS-X9.44" format="default" sectionFormat="of" derivedContent="ANS-X9.44"/>.  Continuing this principle of key separation, a key pair
used for the RSA-KEM algorithm <bcp14>SHOULD NOT</bcp14> be used with other key
establishment schemes, or for data encryption, or with more
than one set of underlying algorithm components.</t>
      <t indent="0" pn="section-3-13">It is acceptable to use the same RSA key pair for the RSA-KEM Key
      Transport algorithm as specified in <xref target="RFC5990" format="default" sectionFormat="of" derivedContent="RFC5990"/> and this
      specification.  This is acceptable because the operations involving the
      RSA public key and the RSA private key are identical in the two
      specifications.</t>
      <t indent="0" pn="section-3-14">Parties can gain assurance that implementations are correct through
formal implementation validation, such as the NIST Cryptographic
Module Validation Program (CMVP) <xref target="CMVP" format="default" sectionFormat="of" derivedContent="CMVP"/>.</t>
    </section>
    <section anchor="iana-considerations" numbered="true" removeInRFC="false" toc="include" pn="section-4">
      <name slugifiedName="name-iana-considerations">IANA Considerations</name>
      <t indent="0" pn="section-4-1">For the ASN.1 Module in <xref target="app-asn1-module" format="default" sectionFormat="of" derivedContent="Appendix B.2"/>, IANA has assigned an
object identifier (OID) for the module identifier. The OID for the module
has been allocated in the "SMI Security for S/MIME Module Identifier"
registry (1.2.840.113549.1.9.16.0), and the Description for the new OID
has been set to "id-mod-cms-rsa-kem-2023".</t>
      <t indent="0" pn="section-4-2">IANA has updated the id-alg-rsa-kem entry in the "SMI Security for S/MIME Algorithms (1.2.840.113549.1.9.16.3)" repository to refer to this document.  In addition, IANA has added the following note to the registry:</t>
      <t indent="0" pn="section-4-3">Value 14, "id-alg-rsa-kem," is also referred to as "id-rsa-kem-spki."</t>
    </section>
  </middle>
  <back>
    <references pn="section-5">
      <name slugifiedName="name-references">References</name>
      <references anchor="sec-normative-references" pn="section-5.1">
        <name slugifiedName="name-normative-references">Normative References</name>
        <reference anchor="ANS-X9.44" target="https://webstore.ansi.org/standards/ascx9/ansix9442007r2017" quoteTitle="true" derivedAnchor="ANS-X9.44">
          <front>
            <title>Public Key Cryptography for the Financial Services Industry -- Key Establishment Using Integer Factorization Cryptography</title>
            <author>
              <organization showOnFrontPage="true">American National Standards Institute</organization>
            </author>
            <date year="2007"/>
          </front>
          <seriesInfo name="ANSI" value="X9.44-2007 (R2017)"/>
        </reference>
        <reference anchor="ISO18033-2" target="https://www.iso.org/standard/37971.html" quoteTitle="true" derivedAnchor="ISO18033-2">
          <front>
            <title>Information technology -- Security techniques -- Encryption algorithms -- Part 2: Asymmetric ciphers</title>
            <author>
              <organization showOnFrontPage="true">ISO/IEC</organization>
            </author>
            <date year="2006"/>
          </front>
          <seriesInfo name="ISO/IEC" value="18033-2:2006"/>
        </reference>
        <reference anchor="RFC2119" target="https://www.rfc-editor.org/info/rfc2119" quoteTitle="true" derivedAnchor="RFC2119">
          <front>
            <title>Key words for use in RFCs to Indicate Requirement Levels</title>
            <author fullname="S. Bradner" initials="S." surname="Bradner"/>
            <date month="March" year="1997"/>
            <abstract>
              <t indent="0">In many standards track documents several words are used to signify the requirements in the specification. These words are often capitalized. This document defines these words as they should be interpreted in IETF documents. This document specifies an Internet Best Current Practices for the Internet Community, and requests discussion and suggestions for improvements.</t>
            </abstract>
          </front>
          <seriesInfo name="BCP" value="14"/>
          <seriesInfo name="RFC" value="2119"/>
          <seriesInfo name="DOI" value="10.17487/RFC2119"/>
        </reference>
        <reference anchor="RFC3394" target="https://www.rfc-editor.org/info/rfc3394" quoteTitle="true" derivedAnchor="RFC3394">
          <front>
            <title>Advanced Encryption Standard (AES) Key Wrap Algorithm</title>
            <author fullname="J. Schaad" initials="J." surname="Schaad"/>
            <author fullname="R. Housley" initials="R." surname="Housley"/>
            <date month="September" year="2002"/>
          </front>
          <seriesInfo name="RFC" value="3394"/>
          <seriesInfo name="DOI" value="10.17487/RFC3394"/>
        </reference>
        <reference anchor="RFC5083" target="https://www.rfc-editor.org/info/rfc5083" quoteTitle="true" derivedAnchor="RFC5083">
          <front>
            <title>Cryptographic Message Syntax (CMS) Authenticated-Enveloped-Data Content Type</title>
            <author fullname="R. Housley" initials="R." surname="Housley"/>
            <date month="November" year="2007"/>
            <abstract>
              <t indent="0">This document describes an additional content type for the Cryptographic Message Syntax (CMS). The authenticated-enveloped-data content type is intended for use with authenticated encryption modes. All of the various key management techniques that are supported in the CMS enveloped-data content type are also supported by the CMS authenticated-enveloped-data content type. [STANDARDS-TRACK]</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="5083"/>
          <seriesInfo name="DOI" value="10.17487/RFC5083"/>
        </reference>
        <reference anchor="RFC5280" target="https://www.rfc-editor.org/info/rfc5280" quoteTitle="true" derivedAnchor="RFC5280">
          <front>
            <title>Internet X.509 Public Key Infrastructure Certificate and Certificate Revocation List (CRL) Profile</title>
            <author fullname="D. Cooper" initials="D." surname="Cooper"/>
            <author fullname="S. Santesson" initials="S." surname="Santesson"/>
            <author fullname="S. Farrell" initials="S." surname="Farrell"/>
            <author fullname="S. Boeyen" initials="S." surname="Boeyen"/>
            <author fullname="R. Housley" initials="R." surname="Housley"/>
            <author fullname="W. Polk" initials="W." surname="Polk"/>
            <date month="May" year="2008"/>
            <abstract>
              <t indent="0">This memo profiles the X.509 v3 certificate and X.509 v2 certificate revocation list (CRL) for use in the Internet. An overview of this approach and model is provided as an introduction. The X.509 v3 certificate format is described in detail, with additional information regarding the format and semantics of Internet name forms. Standard certificate extensions are described and two Internet-specific extensions are defined. A set of required certificate extensions is specified. The X.509 v2 CRL format is described in detail along with standard and Internet-specific extensions. An algorithm for X.509 certification path validation is described. An ASN.1 module and examples are provided in the appendices. [STANDARDS-TRACK]</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="5280"/>
          <seriesInfo name="DOI" value="10.17487/RFC5280"/>
        </reference>
        <reference anchor="RFC5652" target="https://www.rfc-editor.org/info/rfc5652" quoteTitle="true" derivedAnchor="RFC5652">
          <front>
            <title>Cryptographic Message Syntax (CMS)</title>
            <author fullname="R. Housley" initials="R." surname="Housley"/>
            <date month="September" year="2009"/>
            <abstract>
              <t indent="0">This document describes the Cryptographic Message Syntax (CMS). This syntax is used to digitally sign, digest, authenticate, or encrypt arbitrary message content. [STANDARDS-TRACK]</t>
            </abstract>
          </front>
          <seriesInfo name="STD" value="70"/>
          <seriesInfo name="RFC" value="5652"/>
          <seriesInfo name="DOI" value="10.17487/RFC5652"/>
        </reference>
        <reference anchor="RFC5911" target="https://www.rfc-editor.org/info/rfc5911" quoteTitle="true" derivedAnchor="RFC5911">
          <front>
            <title>New ASN.1 Modules for Cryptographic Message Syntax (CMS) and S/MIME</title>
            <author fullname="P. Hoffman" initials="P." surname="Hoffman"/>
            <author fullname="J. Schaad" initials="J." surname="Schaad"/>
            <date month="June" year="2010"/>
            <abstract>
              <t indent="0">The Cryptographic Message Syntax (CMS) format, and many associated formats, are expressed using ASN.1. The current ASN.1 modules conform to the 1988 version of ASN.1. This document updates those ASN.1 modules to conform to the 2002 version of ASN.1. There are no bits-on-the-wire changes to any of the formats; this is simply a change to the syntax. This document is not an Internet Standards Track specification; it is published for informational purposes.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="5911"/>
          <seriesInfo name="DOI" value="10.17487/RFC5911"/>
        </reference>
        <reference anchor="RFC5912" target="https://www.rfc-editor.org/info/rfc5912" quoteTitle="true" derivedAnchor="RFC5912">
          <front>
            <title>New ASN.1 Modules for the Public Key Infrastructure Using X.509 (PKIX)</title>
            <author fullname="P. Hoffman" initials="P." surname="Hoffman"/>
            <author fullname="J. Schaad" initials="J." surname="Schaad"/>
            <date month="June" year="2010"/>
            <abstract>
              <t indent="0">The Public Key Infrastructure using X.509 (PKIX) certificate format, and many associated formats, are expressed using ASN.1. The current ASN.1 modules conform to the 1988 version of ASN.1. This document updates those ASN.1 modules to conform to the 2002 version of ASN.1. There are no bits-on-the-wire changes to any of the formats; this is simply a change to the syntax. This document is not an Internet Standards Track specification; it is published for informational purposes.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="5912"/>
          <seriesInfo name="DOI" value="10.17487/RFC5912"/>
        </reference>
        <reference anchor="RFC6268" target="https://www.rfc-editor.org/info/rfc6268" quoteTitle="true" derivedAnchor="RFC6268">
          <front>
            <title>Additional New ASN.1 Modules for the Cryptographic Message Syntax (CMS) and the Public Key Infrastructure Using X.509 (PKIX)</title>
            <author fullname="J. Schaad" initials="J." surname="Schaad"/>
            <author fullname="S. Turner" initials="S." surname="Turner"/>
            <date month="July" year="2011"/>
            <abstract>
              <t indent="0">The Cryptographic Message Syntax (CMS) format, and many associated formats, are expressed using ASN.1. The current ASN.1 modules conform to the 1988 version of ASN.1. This document updates some auxiliary ASN.1 modules to conform to the 2008 version of ASN.1; the 1988 ASN.1 modules remain the normative version. There are no bits- on-the-wire changes to any of the formats; this is simply a change to the syntax. This document is not an Internet Standards Track specification; it is published for informational purposes.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="6268"/>
          <seriesInfo name="DOI" value="10.17487/RFC6268"/>
        </reference>
        <reference anchor="RFC8017" target="https://www.rfc-editor.org/info/rfc8017" quoteTitle="true" derivedAnchor="RFC8017">
          <front>
            <title>PKCS #1: RSA Cryptography Specifications Version 2.2</title>
            <author fullname="K. Moriarty" initials="K." role="editor" surname="Moriarty"/>
            <author fullname="B. Kaliski" initials="B." surname="Kaliski"/>
            <author fullname="J. Jonsson" initials="J." surname="Jonsson"/>
            <author fullname="A. Rusch" initials="A." surname="Rusch"/>
            <date month="November" year="2016"/>
            <abstract>
              <t indent="0">This document provides recommendations for the implementation of public-key cryptography based on the RSA algorithm, covering cryptographic primitives, encryption schemes, signature schemes with appendix, and ASN.1 syntax for representing keys and for identifying the schemes.</t>
              <t indent="0">This document represents a republication of PKCS #1 v2.2 from RSA Laboratories' Public-Key Cryptography Standards (PKCS) series. By publishing this RFC, change control is transferred to the IETF.</t>
              <t indent="0">This document also obsoletes RFC 3447.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="8017"/>
          <seriesInfo name="DOI" value="10.17487/RFC8017"/>
        </reference>
        <reference anchor="RFC8174" target="https://www.rfc-editor.org/info/rfc8174" quoteTitle="true" derivedAnchor="RFC8174">
          <front>
            <title>Ambiguity of Uppercase vs Lowercase in RFC 2119 Key Words</title>
            <author fullname="B. Leiba" initials="B." surname="Leiba"/>
            <date month="May" year="2017"/>
            <abstract>
              <t indent="0">RFC 2119 specifies common key words that may be used in protocol specifications. This document aims to reduce the ambiguity by clarifying that only UPPERCASE usage of the key words have the defined special meanings.</t>
            </abstract>
          </front>
          <seriesInfo name="BCP" value="14"/>
          <seriesInfo name="RFC" value="8174"/>
          <seriesInfo name="DOI" value="10.17487/RFC8174"/>
        </reference>
        <reference anchor="RFC8551" target="https://www.rfc-editor.org/info/rfc8551" quoteTitle="true" derivedAnchor="RFC8551">
          <front>
            <title>Secure/Multipurpose Internet Mail Extensions (S/MIME) Version 4.0 Message Specification</title>
            <author fullname="J. Schaad" initials="J." surname="Schaad"/>
            <author fullname="B. Ramsdell" initials="B." surname="Ramsdell"/>
            <author fullname="S. Turner" initials="S." surname="Turner"/>
            <date month="April" year="2019"/>
            <abstract>
              <t indent="0">This document defines Secure/Multipurpose Internet Mail Extensions (S/MIME) version 4.0. S/MIME provides a consistent way to send and receive secure MIME data. Digital signatures provide authentication, message integrity, and non-repudiation with proof of origin. Encryption provides data confidentiality. Compression can be used to reduce data size. This document obsoletes RFC 5751.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="8551"/>
          <seriesInfo name="DOI" value="10.17487/RFC8551"/>
        </reference>
        <reference anchor="RFC9629" target="https://www.rfc-editor.org/info/rfc9629" quoteTitle="true" derivedAnchor="RFC9629">
          <front>
            <title>Using Key Encapsulation Mechanism (KEM) Algorithms in the Cryptographic Message Syntax (CMS)</title>
            <author fullname="R. Housley" initials="R." surname="Housley"/>
            <author fullname="J. Gray" initials="J." surname="Gray"/>
            <author fullname="T. Okubo" initials="T." surname="Okubo"/>
            <date month="August" year="2024"/>
            <abstract>
              <t indent="0">The Cryptographic Message Syntax (CMS) supports key transport and key agreement algorithms. In recent years, cryptographers have been specifying Key Encapsulation Mechanism (KEM) algorithms, including quantum-secure KEM algorithms. This document defines conventions for the use of KEM algorithms by the originator and recipients to encrypt and decrypt CMS content. This document updates RFC 5652.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="9629"/>
          <seriesInfo name="DOI" value="10.17487/RFC9629"/>
        </reference>
        <reference anchor="SHS" quoteTitle="true" target="https://doi.org/10.6028/NIST.FIPS.180-4" derivedAnchor="SHS">
          <front>
            <title>Secure Hash Standard</title>
            <author>
              <organization showOnFrontPage="true">National Institute of Standards and Technology</organization>
            </author>
            <date year="2015" month="July"/>
          </front>
          <seriesInfo name="NIST FIPS PUB" value="180-4"/>
          <seriesInfo name="DOI" value="10.6028/NIST.FIPS.180-4"/>
        </reference>
        <reference anchor="X.680" target="https://www.itu.int/rec/T-REC-X.680" quoteTitle="true" derivedAnchor="X.680">
          <front>
            <title>Information technology - Abstract Syntax Notation One (ASN.1): Specification of basic notation</title>
            <author>
              <organization showOnFrontPage="true">ITU-T</organization>
            </author>
            <date year="2021" month="February"/>
          </front>
          <seriesInfo name="ITU-T Recommendation" value="X.680"/>
          <seriesInfo name="ISO/IEC" value="8824-1:2021"/>
        </reference>
        <reference anchor="X.690" target="https://www.itu.int/rec/T-REC-X.690" quoteTitle="true" derivedAnchor="X.690">
          <front>
            <title>Information technology - ASN.1 encoding rules: Specification of Basic Encoding Rules (BER), Canonical Encoding Rules (CER) and Distinguished Encoding Rules (DER)</title>
            <author>
              <organization showOnFrontPage="true">ITU-T</organization>
            </author>
            <date year="2021" month="February"/>
          </front>
          <seriesInfo name="ITU-T Recommendation" value="X.690"/>
          <seriesInfo name="ISO/IEC" value="8825-1:2021"/>
        </reference>
      </references>
      <references anchor="sec-informative-references" pn="section-5.2">
        <name slugifiedName="name-informative-references">Informative References</name>
        <reference anchor="CMVP" target="https://csrc.nist.gov/projects/cryptographic-module-validation-program" quoteTitle="true" derivedAnchor="CMVP">
          <front>
            <title>Cryptographic Module Validation Program</title>
            <author>
              <organization showOnFrontPage="true">National Institute of Standards and Technology</organization>
            </author>
            <date year="2016"/>
          </front>
        </reference>
        <reference anchor="NISTSP800-57pt1r5" quoteTitle="true" target="https://doi.org/10.6028/nist.sp.800-57pt1r5" derivedAnchor="NISTSP800-57pt1r5">
          <front>
            <title>Recommendation for Key Management: Part 1 - General</title>
            <author fullname="Elaine Barker">
              <organization showOnFrontPage="true">National Institute of Standards and Technology</organization>
            </author>
            <date year="2020" month="May"/>
          </front>
          <seriesInfo name="NIST SP" value="800-57, Part 1, Revision 5"/>
          <seriesInfo name="DOI" value="10.6028/nist.sp.800-57pt1r5"/>
        </reference>
        <reference anchor="RFC4086" target="https://www.rfc-editor.org/info/rfc4086" quoteTitle="true" derivedAnchor="RFC4086">
          <front>
            <title>Randomness Requirements for Security</title>
            <author fullname="D. Eastlake 3rd" initials="D." surname="Eastlake 3rd"/>
            <author fullname="J. Schiller" initials="J." surname="Schiller"/>
            <author fullname="S. Crocker" initials="S." surname="Crocker"/>
            <date month="June" year="2005"/>
            <abstract>
              <t indent="0">Security systems are built on strong cryptographic algorithms that foil pattern analysis attempts. However, the security of these systems is dependent on generating secret quantities for passwords, cryptographic keys, and similar quantities. The use of pseudo-random processes to generate secret quantities can result in pseudo-security. A sophisticated attacker may find it easier to reproduce the environment that produced the secret quantities and to search the resulting small set of possibilities than to locate the quantities in the whole of the potential number space.</t>
              <t indent="0">Choosing random quantities to foil a resourceful and motivated adversary is surprisingly difficult. This document points out many pitfalls in using poor entropy sources or traditional pseudo-random number generation techniques for generating such quantities. It recommends the use of truly random hardware techniques and shows that the existing hardware on many systems can be used for this purpose. It provides suggestions to ameliorate the problem when a hardware solution is not available, and it gives examples of how large such quantities need to be for some applications. This document specifies an Internet Best Current Practices for the Internet Community, and requests discussion and suggestions for improvements.</t>
            </abstract>
          </front>
          <seriesInfo name="BCP" value="106"/>
          <seriesInfo name="RFC" value="4086"/>
          <seriesInfo name="DOI" value="10.17487/RFC4086"/>
        </reference>
        <reference anchor="RFC4262" target="https://www.rfc-editor.org/info/rfc4262" quoteTitle="true" derivedAnchor="RFC4262">
          <front>
            <title>X.509 Certificate Extension for Secure/Multipurpose Internet Mail Extensions (S/MIME) Capabilities</title>
            <author fullname="S. Santesson" initials="S." surname="Santesson"/>
            <date month="December" year="2005"/>
            <abstract>
              <t indent="0">This document defines a certificate extension for inclusion of Secure/Multipurpose Internet Mail Extensions (S/MIME) Capabilities in X.509 public key certificates, as defined by RFC 3280. This certificate extension provides an optional method to indicate the cryptographic capabilities of an entity as a complement to the S/MIME Capabilities signed attribute in S/MIME messages according to RFC 3851. [STANDARDS-TRACK]</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="4262"/>
          <seriesInfo name="DOI" value="10.17487/RFC4262"/>
        </reference>
        <reference anchor="RFC5990" target="https://www.rfc-editor.org/info/rfc5990" quoteTitle="true" derivedAnchor="RFC5990">
          <front>
            <title>Use of the RSA-KEM Key Transport Algorithm in the Cryptographic Message Syntax (CMS)</title>
            <author fullname="J. Randall" initials="J." surname="Randall"/>
            <author fullname="B. Kaliski" initials="B." surname="Kaliski"/>
            <author fullname="J. Brainard" initials="J." surname="Brainard"/>
            <author fullname="S. Turner" initials="S." surname="Turner"/>
            <date month="September" year="2010"/>
            <abstract>
              <t indent="0">The RSA-KEM Key Transport Algorithm is a one-pass (store-and-forward) mechanism for transporting keying data to a recipient using the recipient's RSA public key. ("KEM" stands for "key encapsulation mechanism".) This document specifies the conventions for using the RSA-KEM Key Transport Algorithm with the Cryptographic Message Syntax (CMS). The ASN.1 syntax is aligned with an expected forthcoming change to American National Standard (ANS) X9.44.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="5990"/>
          <seriesInfo name="DOI" value="10.17487/RFC5990"/>
        </reference>
        <reference anchor="RFC6194" target="https://www.rfc-editor.org/info/rfc6194" quoteTitle="true" derivedAnchor="RFC6194">
          <front>
            <title>Security Considerations for the SHA-0 and SHA-1 Message-Digest Algorithms</title>
            <author fullname="T. Polk" initials="T." surname="Polk"/>
            <author fullname="L. Chen" initials="L." surname="Chen"/>
            <author fullname="S. Turner" initials="S." surname="Turner"/>
            <author fullname="P. Hoffman" initials="P." surname="Hoffman"/>
            <date month="March" year="2011"/>
            <abstract>
              <t indent="0">This document includes security considerations for the SHA-0 and SHA-1 message digest algorithm. This document is not an Internet Standards Track specification; it is published for informational purposes.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="6194"/>
          <seriesInfo name="DOI" value="10.17487/RFC6194"/>
        </reference>
        <reference anchor="SHOUP" target="https://eprint.iacr.org/2001/112" quoteTitle="true" derivedAnchor="SHOUP">
          <front>
            <title>A Proposal for an ISO Standard for Public Key Encryption</title>
            <author initials="V." surname="Shoup" fullname="Victor Shoup">
              <organization showOnFrontPage="true"/>
            </author>
            <date year="2001"/>
          </front>
          <seriesInfo name="Cryptology ePrint Archive" value="Paper 2001/112"/>
        </reference>
      </references>
    </references>
    <section anchor="app-alg" numbered="true" removeInRFC="false" toc="include" pn="section-appendix.a">
      <name slugifiedName="name-rsa-kem-algorithm">RSA-KEM Algorithm</name>
      <t indent="0" pn="section-appendix.a-1">The RSA-KEM algorithm is a one-pass (store-and-forward) cryptographic
mechanism for an originator to securely send keying material to a recipient
using the recipient's RSA public key.</t>
      <t indent="0" pn="section-appendix.a-2">With the RSA-KEM algorithm, an originator encrypts a random integer (z) with
the recipient's RSA public key to produce a ciphertext (ct), and the originator
derives a shared secret (SS) from the random integer (z).  The originator then
sends the ciphertext (ct) to the recipient.  The recipient decrypts the
ciphertext (ct) using their private key to recover the random integer (z),
and the recipient derives a shared secret (SS) from the random integer (z).  In
this way, the originator and recipient obtain the same shared secret (SS).</t>
      <t indent="0" pn="section-appendix.a-3">The RSA-KEM algorithm depends on a key derivation function (KDF), which is
used to derive the shared secret (SS).  Many key derivation functions support
the inclusion of other information in addition to the shared secret (SS) in
the input to the function; however, no other information is included as an
input to the KDF by the RSA-KEM algorithm.</t>
      <section anchor="app-alg-encap" numbered="true" removeInRFC="false" toc="include" pn="section-appendix.a.1">
        <name slugifiedName="name-originators-operations-rsa-">Originator's Operations: RSA-KEM Encapsulate()</name>
        <t indent="0" pn="section-appendix.a.1-1">Let (n,e) be the recipient's RSA public key; see <xref target="RFC8017" format="default" sectionFormat="of" derivedContent="RFC8017"/> for details.</t>
        <t indent="0" pn="section-appendix.a.1-2">Let nLen denote the length in bytes of the modulus n, i.e., the least
integer such that 2<sup>(8*nLen)</sup> &gt; n.</t>
        <t indent="0" pn="section-appendix.a.1-3">The originator performs the following operations:</t>
        <ol spacing="normal" type="1" indent="adaptive" start="1" pn="section-appendix.a.1-4"><li pn="section-appendix.a.1-4.1" derivedCounter="1.">
            <t indent="0" pn="section-appendix.a.1-4.1.1">Generate a random integer z between 0 and n-1 (see NOTE below), and
            convert z to a byte string Z of length nLen, most significant byte
            first: </t>
            <artwork align="left" pn="section-appendix.a.1-4.1.2">
     z = RandomInteger (0, n-1)

     Z = IntegerToString (z, nLen)</artwork>
          </li>
          <li pn="section-appendix.a.1-4.2" derivedCounter="2.">
            <t indent="0" pn="section-appendix.a.1-4.2.1">Encrypt the random integer z using the recipient's RSA public
            key (n,e) and convert the resulting integer c to a ciphertext C,
            a byte string of length nLen: </t>
            <artwork align="left" pn="section-appendix.a.1-4.2.2">
     c = z^e mod n

     ct = IntegerToString (c, nLen)</artwork>
          </li>
          <li pn="section-appendix.a.1-4.3" derivedCounter="3.">
            <t indent="0" pn="section-appendix.a.1-4.3.1">Derive a symmetric shared secret SS of length ssLen bytes (which <bcp14>MUST</bcp14> be the length of the key-encryption key) from the
byte string Z using the underlying key derivation function:  </t>
            <artwork align="left" pn="section-appendix.a.1-4.3.2">
     SS = KDF (Z, ssLen)</artwork>
          </li>
          <li pn="section-appendix.a.1-4.4" derivedCounter="4.">
            <t indent="0" pn="section-appendix.a.1-4.4.1">Output the shared secret SS and the ciphertext ct.  Send the
ciphertext ct to the recipient.</t>
          </li>
        </ol>
        <t indent="0" pn="section-appendix.a.1-5">NOTE: The random integer z <bcp14>MUST</bcp14> be generated independently at random
for different encryption operations, whether for the same or different
recipients.</t>
      </section>
      <section anchor="app-alg-decap" numbered="true" removeInRFC="false" toc="include" pn="section-appendix.a.2">
        <name slugifiedName="name-recipients-operations-rsa-k">Recipient's Operations: RSA-KEM Decapsulate()</name>
        <t indent="0" pn="section-appendix.a.2-1">Let (n,d) be the recipient's RSA private key; see <xref target="RFC8017" format="default" sectionFormat="of" derivedContent="RFC8017"/> for details,
but other private key formats are allowed.</t>
        <t indent="0" pn="section-appendix.a.2-2">Let ct be the ciphertext received from the originator.</t>
        <t indent="0" pn="section-appendix.a.2-3">Let nLen denote the length in bytes of the modulus n.</t>
        <t indent="0" pn="section-appendix.a.2-4">The recipient performs the following operations:</t>
        <ol spacing="normal" type="1" indent="adaptive" start="1" pn="section-appendix.a.2-5"><li pn="section-appendix.a.2-5.1" derivedCounter="1.">
            <t indent="0" pn="section-appendix.a.2-5.1.1">If the length of the encrypted keying material is less than nLen
bytes, output "decryption error", and stop.</t>
          </li>
          <li pn="section-appendix.a.2-5.2" derivedCounter="2.">
            <t indent="0" pn="section-appendix.a.2-5.2.1">Convert the ciphertext ct to an integer c, most significant byte
first (see NOTE below):  </t>
            <artwork align="left" pn="section-appendix.a.2-5.2.2">
     c = StringToInteger (ct)</artwork>
            <t indent="0" pn="section-appendix.a.2-5.2.3">If the integer c is not between 0 and n-1, output "decryption
            error", and stop.</t>
          </li>
          <li pn="section-appendix.a.2-5.3" derivedCounter="3.">
            <t indent="0" pn="section-appendix.a.2-5.3.1">Decrypt the integer c using the recipient's private key (n,d)
            to recover an integer z (see NOTE below): </t>
            <artwork align="left" pn="section-appendix.a.2-5.3.2">
     z = c^d mod n</artwork>
          </li>
          <li pn="section-appendix.a.2-5.4" derivedCounter="4.">
            <t indent="0" pn="section-appendix.a.2-5.4.1">Convert the integer z to a byte string Z of length nLen, most
significant byte first (see NOTE below):  </t>
            <artwork align="left" pn="section-appendix.a.2-5.4.2">
     Z = IntegerToString (z, nLen)</artwork>
          </li>
          <li pn="section-appendix.a.2-5.5" derivedCounter="5.">
            <t indent="0" pn="section-appendix.a.2-5.5.1">Derive a shared secret SS of length ssLen bytes from the byte
string Z using the key derivation function (see NOTE below):  </t>
            <artwork align="left" pn="section-appendix.a.2-5.5.2">
     SS = KDF (Z, ssLen)
</artwork>
          </li>
          <li pn="section-appendix.a.2-5.6" derivedCounter="6.">
            <t indent="0" pn="section-appendix.a.2-5.6.1">Output the shared secret SS.</t>
          </li>
        </ol>
        <t indent="0" pn="section-appendix.a.2-6">NOTE: Implementations <bcp14>SHOULD NOT</bcp14> reveal information about the
integer z, the string Z, or about the calculation of the
exponentiation in Step 2, the conversion in Step 3, or the key
derivation in Step 4, whether by timing or other "side channels".
The observable behavior of the implementation <bcp14>SHOULD</bcp14> be the same at
these steps for all ciphertexts C that are in range.  For example,
IntegerToString conversion should take the same amount of time
regardless of the actual value of the integer z.  The integer z, the
string Z, and other intermediate results <bcp14>MUST</bcp14> be securely deleted
when they are no longer needed.</t>
      </section>
    </section>
    <section anchor="app-asn1" numbered="true" removeInRFC="false" toc="include" pn="section-appendix.b">
      <name slugifiedName="name-asn1-syntax">ASN.1 Syntax</name>
      <t indent="0" pn="section-appendix.b-1">The ASN.1 syntax for identifying the RSA-KEM algorithm
is an extension of the syntax for the "generic hybrid cipher" in
ANS X9.44 <xref target="ANS-X9.44" format="default" sectionFormat="of" derivedContent="ANS-X9.44"/>.</t>
      <t indent="0" pn="section-appendix.b-2">The ASN.1 Module is unchanged from RFC 5990.  The id-rsa-kem-spki
object identifier is used in a backward compatible manner
in certificates <xref target="RFC5280" format="default" sectionFormat="of" derivedContent="RFC5280"/> and SMIMECapabilities <xref target="RFC8551" format="default" sectionFormat="of" derivedContent="RFC8551"/>.
Of course, the use of the id-kem-rsa object identifier in the
new KEMRecipientInfo structure <xref target="RFC9629" format="default" sectionFormat="of" derivedContent="RFC9629"/>
was not yet defined at the time that RFC 5990 was written.</t>
      <section anchor="app-asn1-intro" numbered="true" removeInRFC="false" toc="include" pn="section-appendix.b.1">
        <name slugifiedName="name-underlying-components">Underlying Components</name>
        <t indent="0" pn="section-appendix.b.1-1">Implementations that conform to this specification <bcp14>MUST</bcp14> support
the KDF3 <xref target="ANS-X9.44" format="default" sectionFormat="of" derivedContent="ANS-X9.44"/> key derivation function using SHA-256 <xref target="SHS" format="default" sectionFormat="of" derivedContent="SHS"/>.</t>
        <t indent="0" pn="section-appendix.b.1-2">KDF2 <xref target="ANS-X9.44" format="default" sectionFormat="of" derivedContent="ANS-X9.44"/> and KDF3 are both key derivation functions based on
a hash function.  The only difference between KDF2 and KDF3 is the order
of the components to be hashed.</t>
        <artwork align="left" pn="section-appendix.b.1-3">
   KDF2 calculates T as:   T = T || Hash (Z || D || otherInfo)

   KDF3 calculates T as:   T = T || Hash (D || Z || otherInfo)</artwork>
        <t indent="0" pn="section-appendix.b.1-4">The object identifier for KDF3 is:</t>
        <sourcecode type="asn.1" markers="false" pn="section-appendix.b.1-5">
   id-kdf-kdf3 OBJECT IDENTIFIER ::= { x9-44-components kdf3(2) }</sourcecode>
        <t indent="0" pn="section-appendix.b.1-6">The KDF3 parameters identify the underlying hash function.  For
alignment with ANS X9.44, the hash function <bcp14>MUST</bcp14> be an ASC X9-approved
hash function.  While the SHA-1 hash algorithm is included in the
ASN.1 definitions, SHA-1 <bcp14>MUST NOT</bcp14> be used.  SHA-1 is considered
to be obsolete; see <xref target="RFC6194" format="default" sectionFormat="of" derivedContent="RFC6194"/>.  SHA-1 remains in the ASN.1 module for
compatibility with RFC 5990.  In addition, other hash functions <bcp14>MAY</bcp14> be
used with CMS.</t>
        <sourcecode type="asn.1" markers="false" pn="section-appendix.b.1-7">
   kda-kdf3 KEY-DERIVATION ::= {
      IDENTIFIER id-kdf-kdf3
      PARAMS TYPE KDF3-HashFunction ARE required
      -- No S/MIME caps defined -- }

   KDF3-HashFunction ::=
      AlgorithmIdentifier { DIGEST-ALGORITHM, {KDF3-HashFunctions} }

   KDF3-HashFunctions DIGEST-ALGORITHM ::= { X9-HashFunctions, ... }

   X9-HashFunctions DIGEST-ALGORITHM ::= {
      mda-sha1 | mda-sha224 | mda-sha256 | mda-sha384 |
      mda-sha512, ... }</sourcecode>
        <t indent="0" pn="section-appendix.b.1-8">Implementations that conform to this specification <bcp14>MUST</bcp14> support
the AES Key Wrap <xref target="RFC3394" format="default" sectionFormat="of" derivedContent="RFC3394"/> key-encryption algorithm with a 128-bit
key.  There are three object identifiers for the AES Key Wrap, one for
each permitted size of the key-encryption key.  There are three object
identifiers imported from <xref target="RFC5912" format="default" sectionFormat="of" derivedContent="RFC5912"/>, and none of these algorithm
identifiers have associated parameters:</t>
        <sourcecode type="asn.1" markers="false" pn="section-appendix.b.1-9">
   kwa-aes128-wrap KEY-WRAP ::= {
       IDENTIFIER id-aes128-wrap
       PARAMS ARE absent
       SMIME-CAPS { IDENTIFIED BY id-aes128-wrap } }

   kwa-aes192-wrap KEY-WRAP ::= {
       IDENTIFIER id-aes192-wrap
       PARAMS ARE absent
       SMIME-CAPS { IDENTIFIED BY id-aes192-wrap } }

   kwa-aes256-wrap KEY-WRAP ::= {
       IDENTIFIER id-aes256-wrap
       PARAMS ARE absent
       SMIME-CAPS { IDENTIFIED BY id-aes256-wrap } }</sourcecode>
      </section>
      <section anchor="app-asn1-module" numbered="true" removeInRFC="false" toc="include" pn="section-appendix.b.2">
        <name slugifiedName="name-asn1-module">ASN.1 Module</name>
        <sourcecode type="asn.1" markers="true" pn="section-appendix.b.2-1">
CMS-RSA-KEM-2023
   { iso(1) member-body(2) us(840) rsadsi(113549) pkcs(1)
     pkcs-9(9) smime(16) modules(0) id-mod-cms-rsa-kem-2023(79) }

   DEFINITIONS EXPLICIT TAGS ::= BEGIN

-- EXPORTS ALL

IMPORTS

  KEM-ALGORITHM
    FROM KEMAlgorithmInformation-2023  -- [RFC9629]
       { iso(1) identified-organization(3) dod(6) internet(1)
         security(5) mechanisms(5) pkix(7) id-mod(0)
         id-mod-kemAlgorithmInformation-2023(109) }

  AlgorithmIdentifier{}, PUBLIC-KEY, DIGEST-ALGORITHM,
  KEY-DERIVATION, KEY-WRAP, SMIME-CAPS
    FROM AlgorithmInformation-2009  -- [RFC5912]
      { iso(1) identified-organization(3) dod(6) internet(1)
        security(5) mechanisms(5) pkix(7) id-mod(0)
        id-mod-algorithmInformation-02(58) }

  kwa-aes128-wrap, kwa-aes192-wrap, kwa-aes256-wrap
    FROM CMSAesRsaesOaep-2009  -- [RFC5911]
      { iso(1) member-body(2) us(840) rsadsi(113549)
        pkcs(1) pkcs-9(9) smime(16) modules(0)
        id-mod-cms-aes-02(38) }

  kwa-3DESWrap
    FROM CryptographicMessageSyntaxAlgorithms-2009  -- [RFC5911]
      { iso(1) member-body(2) us(840) rsadsi(113549)
        pkcs(1) pkcs-9(9) smime(16) modules(0)
        id-mod-cmsalg-2001-02(37) }

  id-camellia128-wrap, id-camellia192-wrap, id-camellia256-wrap
    FROM CamelliaEncryptionAlgorithmInCMS  -- [RFC3657]
      { iso(1) member-body(2) us(840) rsadsi(113549)
        pkcs(1) pkcs9(9) smime(16) modules(0)
        id-mod-cms-camellia(23) }

  mda-sha1, pk-rsa, RSAPublicKey
    FROM PKIXAlgs-2009  -- [RFC5912]
      { iso(1) identified-organization(3) dod(6) internet(1)
        security(5) mechanisms(5) pkix(7) id-mod(0)
        id-mod-pkix1-algorithms2008-02(56) }

  mda-sha224, mda-sha256, mda-sha384, mda-sha512
    FROM PKIX1-PSS-OAEP-Algorithms-2009  -- [RFC5912]
      { iso(1) identified-organization(3) dod(6) internet(1)
        security(5) mechanisms(5) pkix(7) id-mod(0)
        id-mod-pkix1-rsa-pkalgs-02(54) } ;


-- Useful types and definitions

OID ::= OBJECT IDENTIFIER  -- alias

NullParms ::= NULL

-- ISO/IEC 18033-2 arc

is18033-2 OID ::= { iso(1) standard(0) is18033(18033) part2(2) }

-- NIST algorithm arc

nistAlgorithm OID ::= { joint-iso-itu-t(2) country(16) us(840)
   organization(1) gov(101) csor(3) nistAlgorithm(4) }

-- PKCS #1 arc

pkcs-1 OID ::= { iso(1) member-body(2) us(840) rsadsi(113549)
   pkcs(1) pkcs-1(1) }

-- X9.44 arc

x9-44 OID ::= { iso(1) identified-organization(3) tc68(133)
   country(16) x9(840) x9Standards(9) x9-44(44) }

x9-44-components OID ::= { x9-44 components(1) }

-- RSA-KEM algorithm

id-rsa-kem OID ::= { iso(1) member-body(2) us(840) rsadsi(113549)
   pkcs(1) pkcs-9(9) smime(16) alg(3) 14 }

id-rsa-kem-spki OID ::= id-rsa-kem

GenericHybridParameters ::= SEQUENCE {
   kem  KeyEncapsulationMechanism,
   dem  DataEncapsulationMechanism }

KeyEncapsulationMechanism ::=
   AlgorithmIdentifier { KEM-ALGORITHM, {KEMAlgorithms} }

KEMAlgorithms KEM-ALGORITHM ::= { kema-kem-rsa | kema-rsa-kem, ... }

kema-rsa-kem KEM-ALGORITHM ::= {
   IDENTIFIER id-rsa-kem-spki
   PARAMS TYPE GenericHybridParameters ARE optional
   PUBLIC-KEYS { pk-rsa | pk-rsa-kem }
   UKM ARE optional
   SMIME-CAPS { TYPE GenericHybridParameters
      IDENTIFIED BY id-rsa-kem-spki } }

kema-kem-rsa KEM-ALGORITHM ::= {
   IDENTIFIER id-kem-rsa
   PARAMS TYPE RsaKemParameters ARE optional
   PUBLIC-KEYS { pk-rsa | pk-rsa-kem }
   UKM ARE optional
   SMIME-CAPS { TYPE GenericHybridParameters
      IDENTIFIED BY id-rsa-kem-spki } }

id-kem-rsa OID ::= { is18033-2 key-encapsulation-mechanism(2)
   rsa(4) }

RsaKemParameters ::= SEQUENCE {
   keyDerivationFunction  KeyDerivationFunction,
   keyLength              KeyLength }

pk-rsa-kem PUBLIC-KEY ::= {
  IDENTIFIER id-rsa-kem-spki
  KEY RSAPublicKey
  PARAMS TYPE GenericHybridParameters ARE preferredAbsent
  -- Private key format is not specified here --
  CERT-KEY-USAGE {keyEncipherment} }

KeyDerivationFunction ::=
   AlgorithmIdentifier { KEY-DERIVATION, {KDFAlgorithms} }

KDFAlgorithms KEY-DERIVATION ::= { kda-kdf2 | kda-kdf3, ... }

KeyLength ::= INTEGER (1..MAX)

DataEncapsulationMechanism ::=
   AlgorithmIdentifier { KEY-WRAP, {DEMAlgorithms} }

DEMAlgorithms KEY-WRAP ::= {
   X9-SymmetricKeyWrappingSchemes |
   Camellia-KeyWrappingSchemes, ... }

X9-SymmetricKeyWrappingSchemes KEY-WRAP ::= {
   kwa-aes128-wrap | kwa-aes192-wrap | kwa-aes256-wrap |
   kwa-3DESWrap, ... }

X9-SymmetricKeyWrappingScheme ::=
   AlgorithmIdentifier { KEY-WRAP, {X9-SymmetricKeyWrappingSchemes} }

Camellia-KeyWrappingSchemes KEY-WRAP ::= {
   kwa-camellia128-wrap | kwa-camellia192-wrap |
   kwa-camellia256-wrap, ... }

Camellia-KeyWrappingScheme ::=
   AlgorithmIdentifier { KEY-WRAP, {Camellia-KeyWrappingSchemes} }

kwa-camellia128-wrap KEY-WRAP ::= {
   IDENTIFIER id-camellia128-wrap
   PARAMS ARE absent
   SMIME-CAPS { IDENTIFIED BY id-camellia128-wrap } }

kwa-camellia192-wrap KEY-WRAP ::= {
   IDENTIFIER id-camellia192-wrap
   PARAMS ARE absent
   SMIME-CAPS { IDENTIFIED BY id-camellia192-wrap } }

kwa-camellia256-wrap KEY-WRAP ::= {
   IDENTIFIER id-camellia256-wrap
   PARAMS ARE absent
   SMIME-CAPS { IDENTIFIED BY id-camellia256-wrap } }

-- Key Derivation Functions

id-kdf-kdf2 OID ::= { x9-44-components kdf2(1) }

kda-kdf2 KEY-DERIVATION ::= {
   IDENTIFIER id-kdf-kdf2
   PARAMS TYPE KDF2-HashFunction ARE required
   -- No S/MIME caps defined -- }

KDF2-HashFunction ::=
   AlgorithmIdentifier { DIGEST-ALGORITHM, {KDF2-HashFunctions} }

KDF2-HashFunctions DIGEST-ALGORITHM ::= { X9-HashFunctions, ... }

id-kdf-kdf3 OID ::= { x9-44-components kdf3(2) }

kda-kdf3 KEY-DERIVATION ::= {
   IDENTIFIER id-kdf-kdf3
   PARAMS TYPE KDF3-HashFunction ARE required
   -- No S/MIME caps defined -- }

KDF3-HashFunction ::=
   AlgorithmIdentifier { DIGEST-ALGORITHM, {KDF3-HashFunctions} }

KDF3-HashFunctions DIGEST-ALGORITHM ::= { X9-HashFunctions, ... }

-- Hash Functions

X9-HashFunctions DIGEST-ALGORITHM ::= {
   mda-sha1 | mda-sha224 | mda-sha256 | mda-sha384 |
   mda-sha512, ... }

-- Updates for the SMIME-CAPS Set from RFC 5911

SMimeCapsSet SMIME-CAPS ::= {
   kema-kem-rsa.&amp;smimeCaps |
   kwa-aes128-wrap |
   kwa-aes192-wrap |
   kwa-aes256-wrap |
   kwa-camellia128-wrap.&amp;smimeCaps |
   kwa-camellia192-wrap.&amp;smimeCaps |
   kwa-camellia256-wrap.&amp;smimeCaps,
   ... }

END</sourcecode>
      </section>
    </section>
    <section anchor="app-example" numbered="true" removeInRFC="false" toc="include" pn="section-appendix.c">
      <name slugifiedName="name-smimecapabilities-examples">SMIMECapabilities Examples</name>
      <t indent="0" pn="section-appendix.c-1">To indicate support for the RSA-KEM algorithm coupled with the KDF3
key derivation function with SHA-256 and the AES Key Wrap symmetric
key-encryption algorithm 128-bit key-encryption key, the
SMIMECapabilities will include the following entry:</t>
      <artwork align="left" pn="section-appendix.c-2">
SEQUENCE {
   id-rsa-kem-spki,                           -- RSA-KEM algorithm
   SEQUENCE {                           -- GenericHybridParameters
      SEQUENCE {                    -- key encapsulation mechanism
         id-kem-rsa,                                    -- RSA-KEM
         SEQUENCE {                            -- RsaKemParameters
            SEQUENCE {                  -- key derivation function
               id-kdf-kdf3,                                -- KDF3
               SEQUENCE {                     -- KDF3-HashFunction
                  id-sha256  -- SHA-256; no parameters (preferred)
               },
            16                              -- KEK length in bytes
            },
      SEQUENCE {                   -- data encapsulation mechanism
         id-aes128-Wrap             -- AES-128 Wrap; no parameters
      }
   }
}</artwork>
      <t indent="0" pn="section-appendix.c-3">This SMIMECapability value has the following DER encoding (in hexadecimal):</t>
      <artwork align="left" pn="section-appendix.c-4">
30 47
  06 0b 2a 86 48 86 f7 0d 01 09 10 03 0e          -- id-rsa-kem-spki
  30 38
     30 29
        06 07 28 81 8c 71 02 02 04                -- id-kem-rsa
        30 1e
           30 19
              06 0a 2b 81 05 10 86 48 09 2c 01 02 -- id-kdf-kdf3
              30 0b
                 06 09 60 86 48 01 65 03 04 02 01 -- id-sha256
                 02 01 10                         -- 16 bytes
      30 0b
         06 09 60 86 48 01 65 03 04 01 05         -- id-aes128-Wrap</artwork>
      <t indent="0" pn="section-appendix.c-5">To indicate support for the RSA-KEM algorithm coupled with the KDF3
key derivation function with SHA-384 and the AES Key Wrap symmetric
key-encryption algorithm 192-bit key-encryption key, the
SMIMECapabilities will include the following SMIMECapability value
(in hexadecimal):</t>
      <artwork align="left" pn="section-appendix.c-6">
  30 47 06 0b 2a 86 48 86 f7 0d 01 09 10 03 0e 30
  38 30 29 06 07 28 81 8c 71 02 02 04 30 1e 30 19
  06 0a 2b 81 05 10 86 48 09 2c 01 02 30 0b 06 09
  60 86 48 01 65 03 04 02 02 02 01 18 30 0b 06 09
  60 86 48 01 65 03 04 01 19</artwork>
      <t indent="0" pn="section-appendix.c-7">To indicate support for the RSA-KEM algorithm coupled with the KDF3
key derivation function with SHA-512 and the AES Key Wrap symmetric
key-encryption algorithm 256-bit key-encryption key, the
SMIMECapabilities will include the following SMIMECapability value
(in hexadecimal):</t>
      <artwork align="left" pn="section-appendix.c-8">
  30 47 06 0b 2a 86 48 86 f7 0d 01 09 10 03 0e 30
  38 30 29 06 07 28 81 8c 71 02 02 04 30 1e 30 19
  06 0a 2b 81 05 10 86 48 09 2c 01 02 30 0b 06 09
  60 86 48 01 65 03 04 02 03 02 01 20 30 0b 06 09
  60 86 48 01 65 03 04 01 2d</artwork>
    </section>
    <section anchor="rsa-kem-cms-enveloped-data-example" numbered="true" removeInRFC="false" toc="include" pn="section-appendix.d">
      <name slugifiedName="name-rsa-kem-cms-enveloped-data-">RSA-KEM CMS Enveloped-Data Example</name>
      <t indent="0" pn="section-appendix.d-1">This example shows the establishment of an AES-128 content-encryption
key using:</t>
      <ul spacing="normal" bare="false" empty="false" indent="3" pn="section-appendix.d-2">
        <li pn="section-appendix.d-2.1">
          <t indent="0" pn="section-appendix.d-2.1.1">RSA-KEM with a 3072-bit key and KDF3 with SHA-256;</t>
        </li>
        <li pn="section-appendix.d-2.2">
          <t indent="0" pn="section-appendix.d-2.2.1">KEMRecipientInfo key derivation using KDF3 with SHA-256; and</t>
        </li>
        <li pn="section-appendix.d-2.3">
          <t indent="0" pn="section-appendix.d-2.3.1">KEMRecipientInfo Key Wrap using AES-128-KEYWRAP.</t>
        </li>
      </ul>
      <t indent="0" pn="section-appendix.d-3">In real-world use, the originator would encrypt the content-encryption
key in a manner that would allow decryption with their own private key
as well as the recipient's private key.  This is omitted in an attempt
to simplify the example.</t>
      <section anchor="originator-rsa-kem-encapsulate-processing" numbered="true" removeInRFC="false" toc="include" pn="section-appendix.d.1">
        <name slugifiedName="name-originator-rsa-kem-encapsul">Originator RSA-KEM Encapsulate() Processing</name>
        <t indent="0" pn="section-appendix.d.1-1">Alice obtains Bob's public key:</t>
        <artwork align="left" pn="section-appendix.d.1-2">
   -----BEGIN PUBLIC KEY-----
   MIIBojANBgkqhkiG9w0BAQEFAAOCAY8AMIIBigKCAYEA3ocW14cxncPJ47fnEjBZ
   AyfC2lqapL3ET4jvV6C7gGeVrRQxWPDwl+cFYBBR2ej3j3/0ecDmu+XuVi2+s5JH
   Keeza+itfuhsz3yifgeEpeK8T+SusHhn20/NBLhYKbh3kiAcCgQ56dpDrDvDcLqq
   vS3jg/VO+OPnZbofoHOOevt8Q/roahJe1PlIyQ4udWB8zZezJ4mLLfbOA9YVaYXx
   2AHHZJevo3nmRnlgJXo6mE00E/6qkhjDHKSMdl2WG6mO9TCDZc9qY3cAJDU6Ir0v
   SH7qUl8/vN13y4UOFkn8hM4kmZ6bJqbZt5NbjHtY4uQ0VMW3RyESzhrO02mrp39a
   uLNnH3EXdXaV1tk75H3qC7zJaeGWMJyQfOE3YfEGRKn8fxubji716D8UecAxAzFy
   FL6m1JiOyV5acAiOpxN14qRYZdHnXOM9DqGIGpoeY1UuD4Mo05osOqOUpBJHA9fS
   whSZG7VNf+vgNWTLNYSYLI04KiMdulnvU6ds+QPz+KKtAgMBAAE=
   -----END PUBLIC KEY-----</artwork>
        <t indent="0" pn="section-appendix.d.1-3">Bob's RSA public key has the following key identifier:</t>
        <artwork align="left" pn="section-appendix.d.1-4">
   9eeb67c9b95a74d44d2f16396680e801b5cba49c</artwork>
        <t indent="0" pn="section-appendix.d.1-5">Alice randomly generates integer z between 0 and n-1:</t>
        <artwork align="left" pn="section-appendix.d.1-6">
   9c126102a5c1c0354672a3c2f19fc9ddea988f815e1da812c7bd4f8eb082bdd1
   4f85a7f7c2f1af11d5333e0d6bcb375bf855f208da72ba27e6fb0655f2825aa6
   2b93b1f9bbd3491fed58f0380fa0de36430e3a144d569600bd362609be5b9481
   0875990b614e406fa6dff500043cbca95968faba61f795096a7fb3687a51078c
   4ca2cb663366b0bea0cd9cccac72a25f3f4ed03deb68b4453bba44b943f4367b
   67d6cd10c8ace53f545aac50968fc3c6ecc80f3224b64e37038504e2d2c0e2b2
   9d45e46c62826d96331360e4c17ea3ef89a9efc5fac99eda830e81450b6534dc
   0bdf042b8f3b706649c631fe51fc2445cc8d447203ec2f41f79cdfea16de1ce6
   abdfdc1e2ef2e5d5d8a65e645f397240ef5a26f5e4ff715de782e30ecf477293
   e89e13171405909a8e04dd31d21d0c57935fc1ceea8e1033e31e1bc8c56da0f3
   d79510f3f380ff58e5a61d361f2f18e99fbae5663172e8cd1f21deaddc5bbbea
   060d55f1842b93d1a9c888d0bf85d0af9947fe51acf940c7e7577eb79cabecb3</artwork>
        <t indent="0" pn="section-appendix.d.1-7">Alice encrypts integer z using the Bob's RSA public key. The result is
called ct:</t>
        <artwork align="left" pn="section-appendix.d.1-8">
   c071fc273af8e7bdb152e06bf73310361074154a43abcf3c93c13499d2065344
   3eed9ef5d3c0685e4aa76a6854815bb97691ff9f8dac15eea7d74f452bf350a6
   46163d68288e978cbf7a73089ee52712f9a4f49e06ace7bbc85ab14d4e336c97
   c5728a2654138c7b26e8835c6b0a9fbed26495c4eadf745a2933be283f6a88b1
   6695fc06666873cfb6d36718ef3376cefc100c3941f3c494944078325807a559
   186b95ccabf3714cfaf79f83bd30537fdd9aed5a4cdcbd8bd0486faed73e9d48
   6b3087d6c806546b6e2671575c98461e441f65542bd95de26d0f53a64e7848d7
   31d9608d053e8d345546602d86236ffe3704c98ad59144f3089e5e6d527b5497
   ba103c79d62e80d0235410b06f71a7d9bd1c38000f910d6312ea2f20a3557535
   ad01b3093fb5f7ee507080d0f77d48c9c3b3796f6b7dd3786085fb895123f04c
   a1f1c1be22c747a8dface32370fb0d570783e27dbb7e74fca94ee39676fde3d8
   a9553d878224736e37e191dab953c7e228c07ad5ca3122421c14debd072a9ab6</artwork>
        <t indent="0" pn="section-appendix.d.1-9">Alice derives the shared secret (SS) using KDF3 with SHA-256:</t>
        <artwork align="left" pn="section-appendix.d.1-10">
   3cf82ec41b54ed4d37402bbd8f805a52</artwork>
      </section>
      <section anchor="originator-cms-processing" numbered="true" removeInRFC="false" toc="include" pn="section-appendix.d.2">
        <name slugifiedName="name-originator-cms-processing">Originator CMS Processing</name>
        <t indent="0" pn="section-appendix.d.2-1">Alice encodes the CMSORIforKEMOtherInfo structure with the algorithm
identifier for AES-128-KEYWRAP and a key length of 16 octets.
The DER encoding of CMSORIforKEMOtherInfo produces 18 octets:</t>
        <artwork align="left" pn="section-appendix.d.2-2">
   3010300b0609608648016503040105020110</artwork>
        <t indent="0" pn="section-appendix.d.2-3">The CMSORIforKEMOtherInfo structure contains:</t>
        <artwork align="left" pn="section-appendix.d.2-4">
  0  16: SEQUENCE {
  2  11:  SEQUENCE {
  4   9:   OBJECT IDENTIFIER aes128-wrap (2 16 840 1 101 3 4 1 5)
       :    }
 15   1:  INTEGER 16
       :   }</artwork>
        <t indent="0" pn="section-appendix.d.2-5">Alice derives the key-encryption key from shared secret produced
by RSA-KEM Encapsulate() and the CMSORIforKEMOtherInfo structure
with KDF3 and SHA-256. The KEK is:</t>
        <artwork align="left" pn="section-appendix.d.2-6">
   e6dc9d62ff2b469bef604c617b018718</artwork>
        <t indent="0" pn="section-appendix.d.2-7">Alice randomly generates a 128-bit content-encryption key:</t>
        <artwork align="left" pn="section-appendix.d.2-8">
   77f2a84640304be7bd42670a84a1258b</artwork>
        <t indent="0" pn="section-appendix.d.2-9">Alice uses AES-128-KEYWRAP to encrypt the 128-bit content-encryption
key with the derived key-encryption key:</t>
        <artwork align="left" pn="section-appendix.d.2-10">
   28782e5d3d794a7616b863fbcfc719b78f12de08cf286e09</artwork>
        <t indent="0" pn="section-appendix.d.2-11">Alice encrypts the padded content using AES-128-CBC with the
content-encryption key.  The 16-octet IV used is:</t>
        <artwork align="left" pn="section-appendix.d.2-12">
   480ccafebabefacedbaddecaf8887781</artwork>
        <t indent="0" pn="section-appendix.d.2-13">The padded content plaintext is:</t>
        <artwork align="left" pn="section-appendix.d.2-14">
   48656c6c6f2c20776f726c6421030303</artwork>
        <t indent="0" pn="section-appendix.d.2-15">The resulting ciphertext is:</t>
        <artwork align="left" pn="section-appendix.d.2-16">
   c6ca65db7bdd76b0f37e2fab6264b66d</artwork>
        <t indent="0" pn="section-appendix.d.2-17">Alice encodes the EnvelopedData (using KEMRecipientInfo) and
ContentInfo, and then sends the result to Bob.  The Base64-encoded
result is:</t>
        <artwork align="left" pn="section-appendix.d.2-18">
   MIICXAYJKoZIhvcNAQcDoIICTTCCAkkCAQMxggIEpIICAAYLKoZIhvcNAQkQDQMw
   ggHvAgEAgBSe62fJuVp01E0vFjlmgOgBtcuknDAJBgcogYxxAgIEBIIBgMBx/Cc6
   +Oe9sVLga/czEDYQdBVKQ6vPPJPBNJnSBlNEPu2e9dPAaF5Kp2poVIFbuXaR/5+N
   rBXup9dPRSvzUKZGFj1oKI6XjL96cwie5ScS+aT0ngas57vIWrFNTjNsl8VyiiZU
   E4x7JuiDXGsKn77SZJXE6t90Wikzvig/aoixZpX8BmZoc8+202cY7zN2zvwQDDlB
   88SUlEB4MlgHpVkYa5XMq/NxTPr3n4O9MFN/3ZrtWkzcvYvQSG+u1z6dSGswh9bI
   BlRrbiZxV1yYRh5EH2VUK9ld4m0PU6ZOeEjXMdlgjQU+jTRVRmAthiNv/jcEyYrV
   kUTzCJ5ebVJ7VJe6EDx51i6A0CNUELBvcafZvRw4AA+RDWMS6i8go1V1Na0Bswk/
   tffuUHCA0Pd9SMnDs3lva33TeGCF+4lRI/BMofHBviLHR6jfrOMjcPsNVweD4n27
   fnT8qU7jlnb949ipVT2HgiRzbjfhkdq5U8fiKMB61coxIkIcFN69ByqatjAbBgor
   gQUQhkgJLAECMA0GCWCGSAFlAwQCAQUAAgEQMAsGCWCGSAFlAwQBBQQYKHguXT15
   SnYWuGP7z8cZt48S3gjPKG4JMDwGCSqGSIb3DQEHATAdBglghkgBZQMEAQIEEEgM
   yv66vvrO263eyviId4GAEMbKZdt73Xaw834vq2Jktm0=</artwork>
        <t indent="0" pn="section-appendix.d.2-19">This result decodes to:</t>
        <artwork align="left" pn="section-appendix.d.2-20">
  0 604: SEQUENCE {
  4   9:  OBJECT IDENTIFIER envelopedData (1 2 840 113549 1 7 3)
 15 589:  [0] {
 19 585:   SEQUENCE {
 23   1:    INTEGER 3
 26 516:    SET {
 30 512:     [4] {
 34  11:      OBJECT IDENTIFIER
       :       KEMRecipientInfo (1 2 840 113549 1 9 16 13 3)
 47 495:      SEQUENCE {
 51   1:       INTEGER 0
 54  20:       [0]
       :       9E EB 67 C9 B9 5A 74 D4 4D 2F 16 39 66 80 E8 01
       :       B5 CB A4 9C
 76   9:       SEQUENCE {
 78   7:        OBJECT IDENTIFIER kemRSA (1 0 18033 2 2 4)
       :         }
 87 384:       OCTET STRING
       :       C0 71 FC 27 3A F8 E7 BD B1 52 E0 6B F7 33 10 36
       :       10 74 15 4A 43 AB CF 3C 93 C1 34 99 D2 06 53 44
       :       3E ED 9E F5 D3 C0 68 5E 4A A7 6A 68 54 81 5B B9
       :       76 91 FF 9F 8D AC 15 EE A7 D7 4F 45 2B F3 50 A6
       :       46 16 3D 68 28 8E 97 8C BF 7A 73 08 9E E5 27 12
       :       F9 A4 F4 9E 06 AC E7 BB C8 5A B1 4D 4E 33 6C 97
       :       C5 72 8A 26 54 13 8C 7B 26 E8 83 5C 6B 0A 9F BE
       :       D2 64 95 C4 EA DF 74 5A 29 33 BE 28 3F 6A 88 B1
       :       66 95 FC 06 66 68 73 CF B6 D3 67 18 EF 33 76 CE
       :       FC 10 0C 39 41 F3 C4 94 94 40 78 32 58 07 A5 59
       :       18 6B 95 CC AB F3 71 4C FA F7 9F 83 BD 30 53 7F
       :       DD 9A ED 5A 4C DC BD 8B D0 48 6F AE D7 3E 9D 48
       :       6B 30 87 D6 C8 06 54 6B 6E 26 71 57 5C 98 46 1E
       :       44 1F 65 54 2B D9 5D E2 6D 0F 53 A6 4E 78 48 D7
       :       31 D9 60 8D 05 3E 8D 34 55 46 60 2D 86 23 6F FE
       :       37 04 C9 8A D5 91 44 F3 08 9E 5E 6D 52 7B 54 97
       :       BA 10 3C 79 D6 2E 80 D0 23 54 10 B0 6F 71 A7 D9
       :       BD 1C 38 00 0F 91 0D 63 12 EA 2F 20 A3 55 75 35
       :       AD 01 B3 09 3F B5 F7 EE 50 70 80 D0 F7 7D 48 C9
       :       C3 B3 79 6F 6B 7D D3 78 60 85 FB 89 51 23 F0 4C
       :       A1 F1 C1 BE 22 C7 47 A8 DF AC E3 23 70 FB 0D 57
       :       07 83 E2 7D BB 7E 74 FC A9 4E E3 96 76 FD E3 D8
       :       A9 55 3D 87 82 24 73 6E 37 E1 91 DA B9 53 C7 E2
       :       28 C0 7A D5 CA 31 22 42 1C 14 DE BD 07 2A 9A B6
475  27:       SEQUENCE {
477  10:        OBJECT IDENTIFIER
       :         kdf3 (1 3 133 16 840 9 44 1 2)
489  13:        SEQUENCE {
491   9:         OBJECT IDENTIFIER
       :          sha-256 (2 16 840 1 101 3 4 2 1)
502   0:         NULL
       :          }
       :         }
504   1:       INTEGER 16
507  11:       SEQUENCE {
509   9:        OBJECT IDENTIFIER
       :         aes128-wrap (2 16 840 1 101 3 4 1 5)
       :         }
520  24:       OCTET STRING
       :       28 78 2E 5D 3D 79 4A 76 16 B8 63 FB CF C7 19 B7
       :       8F 12 DE 08 CF 28 6E 09
       :        }
       :       }
       :      }
546  60:    SEQUENCE {
548   9:     OBJECT IDENTIFIER data (1 2 840 113549 1 7 1)
559  29:     SEQUENCE {
561   9:      OBJECT IDENTIFIER
       :       aes128-CBC (2 16 840 1 101 3 4 1 2)
572  16:      OCTET STRING
       :      48 0C CA FE BA BE FA CE DB AD DE CA F8 88 77 81
       :       }
590  16:     [0] C6 CA 65 DB 7B DD 76 B0 F3 7E 2F AB 62 64 B6 6D
       :      }
       :     }
       :    }
       :   }</artwork>
      </section>
      <section anchor="recipient-rsa-kem-decapsulate-processing" numbered="true" removeInRFC="false" toc="include" pn="section-appendix.d.3">
        <name slugifiedName="name-recipient-rsa-kem-decapsula">Recipient RSA-KEM Decapsulate() Processing</name>
        <t indent="0" pn="section-appendix.d.3-1">Bob's private key:</t>
        <artwork align="left" pn="section-appendix.d.3-2">
   -----BEGIN PRIVATE KEY-----
   MIIG5AIBAAKCAYEA3ocW14cxncPJ47fnEjBZAyfC2lqapL3ET4jvV6C7gGeVrRQx
   WPDwl+cFYBBR2ej3j3/0ecDmu+XuVi2+s5JHKeeza+itfuhsz3yifgeEpeK8T+Su
   sHhn20/NBLhYKbh3kiAcCgQ56dpDrDvDcLqqvS3jg/VO+OPnZbofoHOOevt8Q/ro
   ahJe1PlIyQ4udWB8zZezJ4mLLfbOA9YVaYXx2AHHZJevo3nmRnlgJXo6mE00E/6q
   khjDHKSMdl2WG6mO9TCDZc9qY3cAJDU6Ir0vSH7qUl8/vN13y4UOFkn8hM4kmZ6b
   JqbZt5NbjHtY4uQ0VMW3RyESzhrO02mrp39auLNnH3EXdXaV1tk75H3qC7zJaeGW
   MJyQfOE3YfEGRKn8fxubji716D8UecAxAzFyFL6m1JiOyV5acAiOpxN14qRYZdHn
   XOM9DqGIGpoeY1UuD4Mo05osOqOUpBJHA9fSwhSZG7VNf+vgNWTLNYSYLI04KiMd
   ulnvU6ds+QPz+KKtAgMBAAECggGATFfkSkUjjJCjLvDk4aScpSx6+Rakf2hrdS3x
   jwqhyUfAXgTTeUQQBs1HVtHCgxQd+qlXYn3/qu8TeZVwG4NPztyi/Z5yB1wOGJEV
   3k8N/ytul6pJFFn6p48VM01bUdTrkMJbXERe6g/rr6dBQeeItCaOK7N5SIJH3Oqh
   9xYuB5tH4rquCdYLmt17Tx8CaVqU9qPY3vOdQEOwIjjMV8uQUR8rHSO9KkSj8AGs
   Lq9kcuPpvgJc2oqMRcNePS2WVh8xPFktRLLRazgLP8STHAtjT6SlJ2UzkUqfDHGK
   q/BoXxBDu6L1VDwdnIS5HXtL54ElcXWsoOyKF8/ilmhRUIUWRZFmlS1ok8IC5IgX
   UdL9rJVZFTRLyAwmcCEvRM1asbBrhyEyshSOuN5nHJi2WVJ+wSHijeKl1qeLlpMk
   HrdIYBq4Nz7/zXmiQphpAy+yQeanhP8O4O6C8e7RwKdpxe44su4Z8fEgA5yQx0u7
   8yR1EhGKydX5bhBLR5Cm1VM7rT2BAoHBAP/+e5gZLNf/ECtEBZjeiJ0VshszOoUq
   haUQPA+9Bx9pytsoKm5oQhB7QDaxAvrn8/FUW2aAkaXsaj9F+/q30AYSQtExai9J
   fdKKook3oimN8/yNRsKmhfjGOj8hd4+GjX0qoMSBCEVdT+bAjjry8wgQrqReuZnu
   oXU85dmb3jvv0uIczIKvTIeyjXE5afjQIJLmZFXsBm09BG87Ia5EFUKly96BOMJh
   /QWEzuYYXDqOFfzQtkAefXNFW21Kz4Hw2QKBwQDeiGh4lxCGTjECvG7fauMGlu+q
   DSdYyMHif6t6mx57eS16EjvOrlXKItYhIyzW8Kw0rf/CSB2j8ig1GkMLTOgrGIJ1
   0322o50FOr5oOmZPueeR4pOyAP0fgQ8DD1L3JBpY68/8MhYbsizVrR+Ar4jM0f96
   W2bF5Xj3h+fQTDMkx6VrCCQ6miRmBUzH+ZPs5n/lYOzAYrqiKOanaiHy4mjRvlsy
   mjZ6z5CG8sISqcLQ/k3Qli5pOY/v0rdBjgwAW/UCgcEAqGVYGjKdXCzuDvf9EpV4
   mpTWB6yIV2ckaPOn/tZi5BgsmEPwvZYZt0vMbu28Px7sSpkqUuBKbzJ4pcy8uC3I
   SuYiTAhMiHS4rxIBX3BYXSuDD2RD4vG1+XM0h6jVRHXHh0nOXdVfgnmigPGz3jVJ
   B8oph/jD8O2YCk4YCTDOXPEi8Rjusxzro+whvRR+kG0gsGGcKSVNCPj1fNISEte4
   gJId7O1mUAAzeDjn/VaS/PXQovEMolssPPKn9NocbKbpAoHBAJnFHJunl22W/lrr
   ppmPnIzjI30YVcYOA5vlqLKyGaAsnfYqP1WUNgfVhq2jRsrHx9cnHQI9Hu442PvI
   x+c5H30YFJ4ipE3eRRRmAUi4ghY5WgD+1hw8fqyUW7E7l5LbSbGEUVXtrkU5G64T
   UR91LEyMF8OPATdiV/KD4PWYkgaqRm3tVEuCVACDTQkqNsOOi3YPQcm270w6gxfQ
   SOEy/kdhCFexJFA8uZvmh6Cp2crczxyBilR/yCxqKOONqlFdOQKBwFbJk5eHPjJz
   AYueKMQESPGYCrwIqxgZGCxaqeVArHvKsEDx5whI6JWoFYVkFA8F0MyhukoEb/2x
   2qB5T88Dg3EbqjTiLg3qxrWJ2OxtUo8pBP2I2wbl2NOwzcbrlYhzEZ8bJyxZu5i1
   sYILC8PJ4Qzw6jS4Qpm4y1WHz8e/ElW6VyfmljZYA7f9WMntdfeQVqCVzNTvKn6f
   hg6GSpJTzp4LV3ougi9nQuWXZF2wInsXkLYpsiMbL6Fz34RwohJtYA==
   -----END PRIVATE KEY-----</artwork>
        <t indent="0" pn="section-appendix.d.3-3">Bob checks that the length of the ciphertext is less than nLen bytes.</t>
        <t indent="0" pn="section-appendix.d.3-4">Bob checks that the ciphertext is greater than zero and is less
than his RSA modulus.</t>
        <t indent="0" pn="section-appendix.d.3-5">Bob decrypts the ciphertext with his RSA private key to obtain
the integer z:</t>
        <artwork align="left" pn="section-appendix.d.3-6">
   9c126102a5c1c0354672a3c2f19fc9ddea988f815e1da812c7bd4f8eb082bdd1
   4f85a7f7c2f1af11d5333e0d6bcb375bf855f208da72ba27e6fb0655f2825aa6
   2b93b1f9bbd3491fed58f0380fa0de36430e3a144d569600bd362609be5b9481
   0875990b614e406fa6dff500043cbca95968faba61f795096a7fb3687a51078c
   4ca2cb663366b0bea0cd9cccac72a25f3f4ed03deb68b4453bba44b943f4367b
   67d6cd10c8ace53f545aac50968fc3c6ecc80f3224b64e37038504e2d2c0e2b2
   9d45e46c62826d96331360e4c17ea3ef89a9efc5fac99eda830e81450b6534dc
   0bdf042b8f3b706649c631fe51fc2445cc8d447203ec2f41f79cdfea16de1ce6
   abdfdc1e2ef2e5d5d8a65e645f397240ef5a26f5e4ff715de782e30ecf477293
   e89e13171405909a8e04dd31d21d0c57935fc1ceea8e1033e31e1bc8c56da0f3
   d79510f3f380ff58e5a61d361f2f18e99fbae5663172e8cd1f21deaddc5bbbea
   060d55f1842b93d1a9c888d0bf85d0af9947fe51acf940c7e7577eb79cabecb3</artwork>
        <t indent="0" pn="section-appendix.d.3-7">Bob checks that the integer z is greater than zero and is less
than his RSA modulus.</t>
        <t indent="0" pn="section-appendix.d.3-8">Bob derives the shared secret (SS) using KDF3 with SHA-256:</t>
        <artwork align="left" pn="section-appendix.d.3-9">
   3cf82ec41b54ed4d37402bbd8f805a52</artwork>
      </section>
      <section anchor="recipient-cms-processing" numbered="true" removeInRFC="false" toc="include" pn="section-appendix.d.4">
        <name slugifiedName="name-recipient-cms-processing">Recipient CMS Processing</name>
        <t indent="0" pn="section-appendix.d.4-1">Bob encodes the CMSORIforKEMOtherInfo structure with the algorithm
identifier for AES-128-KEYWRAP and a key length of 16 octets.
The DER encoding of CMSORIforKEMOtherInfo is not repeated here.</t>
        <t indent="0" pn="section-appendix.d.4-2">Bob derives the key-encryption key from shared secret and the
CMSORIforKEMOtherInfo structure with KDF3 and SHA-256, the KEK is:</t>
        <artwork align="left" pn="section-appendix.d.4-3">
   e6dc9d62ff2b469bef604c617b018718</artwork>
        <t indent="0" pn="section-appendix.d.4-4">Bob uses AES-KEY-WRAP to decrypt the content-encryption key
with the key-encryption key. The content-encryption key is:</t>
        <artwork align="left" pn="section-appendix.d.4-5">
   77f2a84640304be7bd42670a84a1258b</artwork>
        <t indent="0" pn="section-appendix.d.4-6">Bob decrypts the content using AES-128-CBC with the content-
encryption key.  The 16-octet IV used is:</t>
        <artwork align="left" pn="section-appendix.d.4-7">
   480ccafebabefacedbaddecaf8887781</artwork>
        <t indent="0" pn="section-appendix.d.4-8">The received ciphertext content is:</t>
        <artwork align="left" pn="section-appendix.d.4-9">
   c6ca65db7bdd76b0f37e2fab6264b66d</artwork>
        <t indent="0" pn="section-appendix.d.4-10">The resulting padded plaintext content is:</t>
        <artwork align="left" pn="section-appendix.d.4-11">
   48656c6c6f2c20776f726c6421030303</artwork>
        <t indent="0" pn="section-appendix.d.4-12">After stripping the AES-CBC padding, the plaintext content is:</t>
        <artwork align="left" pn="section-appendix.d.4-13">
   Hello, world!</artwork>
      </section>
    </section>
    <section numbered="false" anchor="acknowledgements" removeInRFC="false" toc="include" pn="section-appendix.e">
      <name slugifiedName="name-acknowledgements">Acknowledgements</name>
      <t indent="0" pn="section-appendix.e-1">We thank <contact fullname="James Randall"/>, <contact fullname="Burt       Kaliski"/>, and <contact fullname="John Brainard"/> as the original
      authors of <xref target="RFC5990" format="default" sectionFormat="of" derivedContent="RFC5990"/>; this document is based on their
      work.</t>
      <t indent="0" pn="section-appendix.e-2">We thank the members of the ASC X9F1 working group for their
      contributions to drafts of ANS X9.44, which led to <xref target="RFC5990" format="default" sectionFormat="of" derivedContent="RFC5990"/>.</t>
      <t indent="0" pn="section-appendix.e-3">We thank <contact fullname="Blake Ramsdell"/>, <contact fullname="Jim       Schaad"/>, <contact fullname="Magnus Nystrom"/>, <contact fullname="Bob       Griffin"/>, and <contact fullname="John Linn"/> for helping bring <xref target="RFC5990" format="default" sectionFormat="of" derivedContent="RFC5990"/> to fruition.</t>
      <t indent="0" pn="section-appendix.e-4">We thank <contact fullname="Burt Kaliski"/>, <contact fullname="Alex       Railean"/>, <contact fullname="Joe Mandel"/>, <contact fullname="Mike       Ounsworth"/>, <contact fullname="Peter Campbell"/>, <contact fullname="Daniel Van Geest"/>, and <contact fullname="David Ireland"/>
      for careful review and thoughtful comments that greatly improved this
      document.</t>
    </section>
    <section anchor="authors-addresses" numbered="false" removeInRFC="false" toc="include" pn="section-appendix.f">
      <name slugifiedName="name-authors-addresses">Authors' Addresses</name>
      <author initials="R." surname="Housley" fullname="Russ Housley">
        <organization abbrev="Vigil Security" showOnFrontPage="true">Vigil Security, LLC</organization>
        <address>
          <postal>
            <street>516 Dranesville Road</street>
            <city>Herndon</city>
            <region>VA</region>
            <code>20170</code>
            <country>United States of America</country>
          </postal>
          <email>housley@vigilsec.com</email>
        </address>
      </author>
      <author initials="S." surname="Turner" fullname="Sean Turner">
        <organization showOnFrontPage="true">sn3rd</organization>
        <address>
          <email>sean@sn3rd.com</email>
        </address>
      </author>
    </section>
  </back>
</rfc>
